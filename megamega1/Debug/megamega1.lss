
megamega1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003f2  00800100  00003bf8  00003c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003bf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b3  008004f2  008004f2  0000407e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000407e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034c3  00000000  00000000  0000423c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c82  00000000  00000000  000076ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000154f  00000000  00000000  00008381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000168c  00000000  00000000  000098d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000816  00000000  00000000  0000af5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006950  00000000  00000000  0000b772  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000120c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      14:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__vector_5>
      18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      34:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__vector_13>
      38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      48:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__vector_18>
      4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      5c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      60:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      68:	ad 01       	movw	r20, r26
      6a:	bf 01       	movw	r22, r30
      6c:	d3 01       	movw	r26, r6
      6e:	e8 01       	movw	r28, r16
      70:	41 02       	muls	r20, r17
      72:	ff 01       	movw	r30, r30
      74:	13 02       	muls	r17, r19
      76:	26 02       	muls	r18, r22
      78:	29 02       	muls	r18, r25
      7a:	3e 02       	muls	r19, r30
      7c:	d1 02       	muls	r29, r17
      7e:	e2 02       	muls	r30, r18
      80:	f8 02       	muls	r31, r24
      82:	26 03       	mulsu	r18, r22
      84:	47 03       	mulsu	r20, r23
      86:	69 03       	fmul	r22, r17
      88:	86 03       	fmuls	r16, r22
      8a:	a8 03       	fmulsu	r18, r16
      8c:	1a 07       	cpc	r17, r26
      8e:	a6 07       	cpc	r26, r22
      90:	35 08       	sbc	r3, r5
      92:	c4 08       	sbc	r12, r4
      94:	5b 09       	sbc	r21, r11
      96:	eb 09       	sbc	r30, r11
      98:	7d 0a       	sbc	r7, r29
      9a:	09 0b       	sbc	r16, r25
      9c:	9b 0b       	sbc	r25, r27
      9e:	2e 0c       	add	r2, r14
      a0:	bf 0c       	add	r11, r15
      a2:	50 0d       	add	r21, r0
      a4:	e1 0d       	add	r30, r1
      a6:	71 0e       	add	r7, r17
      a8:	03 0f       	add	r16, r19
      aa:	8f 0f       	add	r24, r31
      ac:	11 10       	cpse	r1, r1
      ae:	a0 10       	cpse	r10, r0
      b0:	b3 12       	cpse	r11, r19
      b2:	c3 12       	cpse	r12, r19
      b4:	d3 12       	cpse	r13, r19
      b6:	e3 12       	cpse	r14, r19
      b8:	f3 12       	cpse	r15, r19
      ba:	03 13       	cpse	r16, r19
      bc:	13 13       	cpse	r17, r19

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	14 e0       	ldi	r17, 0x04	; 4
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e8 ef       	ldi	r30, 0xF8	; 248
      d2:	fb e3       	ldi	r31, 0x3B	; 59
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a2 3f       	cpi	r26, 0xF2	; 242
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	26 e0       	ldi	r18, 0x06	; 6
      e2:	a2 ef       	ldi	r26, 0xF2	; 242
      e4:	b4 e0       	ldi	r27, 0x04	; 4
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a5 3a       	cpi	r26, 0xA5	; 165
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
      f0:	0e 94 85 11 	call	0x230a	; 0x230a <main>
      f4:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <_exit>

000000f8 <__bad_interrupt>:
      f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <hd44780_outnibble>:

  x = hd44780_innibble(rs) << 4;
  x |= hd44780_innibble(rs);

  return x;
}
      fc:	95 b1       	in	r25, 0x05	; 5
      fe:	9e 7f       	andi	r25, 0xFE	; 254
     100:	95 b9       	out	0x05, r25	; 5
     102:	66 23       	and	r22, r22
     104:	21 f0       	breq	.+8      	; 0x10e <hd44780_outnibble+0x12>
     106:	95 b1       	in	r25, 0x05	; 5
     108:	92 60       	ori	r25, 0x02	; 2
     10a:	95 b9       	out	0x05, r25	; 5
     10c:	03 c0       	rjmp	.+6      	; 0x114 <hd44780_outnibble+0x18>
     10e:	95 b1       	in	r25, 0x05	; 5
     110:	9d 7f       	andi	r25, 0xFD	; 253
     112:	95 b9       	out	0x05, r25	; 5
     114:	98 b1       	in	r25, 0x08	; 8
     116:	90 7f       	andi	r25, 0xF0	; 240
     118:	89 2b       	or	r24, r25
     11a:	88 b9       	out	0x08, r24	; 8
     11c:	85 b1       	in	r24, 0x05	; 5
     11e:	84 60       	ori	r24, 0x04	; 4
     120:	85 b9       	out	0x05, r24	; 5
     122:	82 e0       	ldi	r24, 0x02	; 2
     124:	8a 95       	dec	r24
     126:	f1 f7       	brne	.-4      	; 0x124 <hd44780_outnibble+0x28>
     128:	00 c0       	rjmp	.+0      	; 0x12a <hd44780_outnibble+0x2e>
     12a:	85 b1       	in	r24, 0x05	; 5
     12c:	8b 7f       	andi	r24, 0xFB	; 251
     12e:	85 b9       	out	0x05, r24	; 5
     130:	08 95       	ret

00000132 <hd44780_outbyte>:
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	c8 2f       	mov	r28, r24
     138:	d6 2f       	mov	r29, r22
     13a:	82 95       	swap	r24
     13c:	8f 70       	andi	r24, 0x0F	; 15
     13e:	0e 94 7e 00 	call	0xfc	; 0xfc <hd44780_outnibble>
     142:	6d 2f       	mov	r22, r29
     144:	8c 2f       	mov	r24, r28
     146:	8f 70       	andi	r24, 0x0F	; 15
     148:	0e 94 7e 00 	call	0xfc	; 0xfc <hd44780_outnibble>
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <hd44780_wait_ready>:
hd44780_wait_ready(bool longwait)
{
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
#else
  if (longwait)
     152:	88 23       	and	r24, r24
     154:	39 f0       	breq	.+14     	; 0x164 <hd44780_wait_ready+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     156:	8f eb       	ldi	r24, 0xBF	; 191
     158:	97 e1       	ldi	r25, 0x17	; 23
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <hd44780_wait_ready+0x8>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <hd44780_wait_ready+0xe>
     160:	00 00       	nop
     162:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     164:	95 ec       	ldi	r25, 0xC5	; 197
     166:	9a 95       	dec	r25
     168:	f1 f7       	brne	.-4      	; 0x166 <hd44780_wait_ready+0x14>
     16a:	00 00       	nop
     16c:	08 95       	ret

0000016e <hd44780_init>:
 * the busy flag cannot be probed initially.
 */
void
hd44780_init(void)
{
  SET(DDR, HD44780_RS);
     16e:	84 b1       	in	r24, 0x04	; 4
     170:	82 60       	ori	r24, 0x02	; 2
     172:	84 b9       	out	0x04, r24	; 4
  SET(DDR, HD44780_RW);
     174:	84 b1       	in	r24, 0x04	; 4
     176:	81 60       	ori	r24, 0x01	; 1
     178:	84 b9       	out	0x04, r24	; 4
  SET(DDR, HD44780_E);
     17a:	84 b1       	in	r24, 0x04	; 4
     17c:	84 60       	ori	r24, 0x04	; 4
     17e:	84 b9       	out	0x04, r24	; 4
  ASSIGN(DDR, HD44780_D4, 0x0F);
     180:	87 b1       	in	r24, 0x07	; 7
     182:	8f 60       	ori	r24, 0x0F	; 15
     184:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     186:	8f e5       	ldi	r24, 0x5F	; 95
     188:	9a ee       	ldi	r25, 0xEA	; 234
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <hd44780_init+0x1c>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <hd44780_init+0x22>
     190:	00 00       	nop

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	83 e0       	ldi	r24, 0x03	; 3
     196:	0e 94 7e 00 	call	0xfc	; 0xfc <hd44780_outnibble>
     19a:	8f e0       	ldi	r24, 0x0F	; 15
     19c:	90 e4       	ldi	r25, 0x40	; 64
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <hd44780_init+0x30>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <hd44780_init+0x36>
     1a4:	00 00       	nop
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	0e 94 7e 00 	call	0xfc	; 0xfc <hd44780_outnibble>
     1ae:	8f e8       	ldi	r24, 0x8F	; 143
     1b0:	91 e0       	ldi	r25, 0x01	; 1
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <hd44780_init+0x44>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <hd44780_init+0x4a>
     1b8:	00 00       	nop
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	83 e0       	ldi	r24, 0x03	; 3
     1be:	0e 94 7e 00 	call	0xfc	; 0xfc <hd44780_outnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c2:	95 ec       	ldi	r25, 0xC5	; 197
     1c4:	9a 95       	dec	r25
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <hd44780_init+0x56>
     1c8:	00 00       	nop
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	0e 94 7e 00 	call	0xfc	; 0xfc <hd44780_outnibble>
  hd44780_wait_ready(false);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	88 e2       	ldi	r24, 0x28	; 40
     1dc:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outbyte>
  hd44780_wait_ready(false);
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	88 e0       	ldi	r24, 0x08	; 8
     1ea:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outbyte>
  hd44780_wait_ready(false);
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>
     1f4:	08 95       	ret

000001f6 <lcd_init>:
 */
void
lcd_init(void)
{

  hd44780_init();
     1f6:	0e 94 b7 00 	call	0x16e	; 0x16e <hd44780_init>

  /*
   * Clear the display.
   */
  hd44780_outcmd(HD44780_CLR);
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outbyte>
  hd44780_wait_ready(true);
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>

  /*
   * Entry mode: auto-increment address counter, no display shift in
   * effect.
   */
  hd44780_outcmd(HD44780_ENTMODE(1, 0));
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	86 e0       	ldi	r24, 0x06	; 6
     20c:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outbyte>
  hd44780_wait_ready(false);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>

  /*
   * Enable display, activate non-blinking cursor.
   */
  hd44780_outcmd(HD44780_DISPCTL(1, 0, 0));
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	8c e0       	ldi	r24, 0x0C	; 12
     21a:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outbyte>
  hd44780_wait_ready(false);
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>
     224:	08 95       	ret

00000226 <lcd_putchar>:
 * Send character c to the LCD display.  After a '\n' has been seen,
 * the next character will first clear the display.
 */
int
lcd_putchar(char c, FILE *unused)
{
     226:	cf 93       	push	r28
     228:	c8 2f       	mov	r28, r24
  static bool nl_seen = 0;

  if (nl_seen >= 2 && c != '\n')
     22a:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <__data_end>
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	02 97       	sbiw	r24, 0x02	; 2
     232:	cc f0       	brlt	.+50     	; 0x266 <lcd_putchar+0x40>
     234:	ca 30       	cpi	r28, 0x0A	; 10
     236:	b9 f0       	breq	.+46     	; 0x266 <lcd_putchar+0x40>
    {
      /*
       * First character after newline, clear display and home cursor.
       */
      hd44780_wait_ready(false);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_CLR);
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outbyte>
      hd44780_wait_ready(false);
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_HOME);
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outbyte>
      hd44780_wait_ready(true);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_DDADDR(0));
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	80 e8       	ldi	r24, 0x80	; 128
     25e:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outbyte>

      nl_seen = 0;
     262:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <__data_end>
    }
  if (c == '\n')
     266:	ca 30       	cpi	r28, 0x0A	; 10
     268:	51 f4       	brne	.+20     	; 0x27e <lcd_putchar+0x58>
    {
      ++nl_seen;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <__data_end>
      if (nl_seen == 1){
		    hd44780_wait_ready(true);
     270:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>
		    hd44780_outcmd(HD44780_DDADDR(0x40));
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	80 ec       	ldi	r24, 0xC0	; 192
     278:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outbyte>
     27c:	07 c0       	rjmp	.+14     	; 0x28c <lcd_putchar+0x66>
		  }
    }
  else
    {
      hd44780_wait_ready(false);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>
      hd44780_outdata(c);
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	8c 2f       	mov	r24, r28
     288:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outbyte>
    }

  return 0;
}
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <home>:

/*
Returns the cursor to the first row first cell of the LCD
*/
void home(void){
  hd44780_wait_ready(true);
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	0e 94 a9 00 	call	0x152	; 0x152 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DDADDR(0x00));
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	80 e8       	ldi	r24, 0x80	; 128
     29e:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outbyte>
     2a2:	08 95       	ret

000002a4 <SPIsend>:

// transmit data over the SPI lines
unsigned char SPIsend(unsigned char data){
	uint8_t readData;
	
	glb.sreg = SREG;
     2a4:	9f b7       	in	r25, 0x3f	; 63
     2a6:	90 93 fd 05 	sts	0x05FD, r25	; 0x8005fd <glb+0x10a>
	cli();
     2aa:	f8 94       	cli
	PORTC &= ~(1<<SS); // clear SS to signify sending data
     2ac:	98 b1       	in	r25, 0x08	; 8
     2ae:	9f 7e       	andi	r25, 0xEF	; 239
     2b0:	98 b9       	out	0x08, r25	; 8
     2b2:	90 e1       	ldi	r25, 0x10	; 16
     2b4:	9a 95       	dec	r25
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <SPIsend+0x10>
	_delay_us(3);
	SPDR = data; // send byte
     2b8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); // wait for SPI data transmission complete flag SPIF in SPSR
     2ba:	0d b4       	in	r0, 0x2d	; 45
     2bc:	07 fe       	sbrs	r0, 7
     2be:	fd cf       	rjmp	.-6      	; 0x2ba <SPIsend+0x16>
	readData = SPDR;
     2c0:	8e b5       	in	r24, 0x2e	; 46
	PORTC |= (1<<SS); // set SS
     2c2:	98 b1       	in	r25, 0x08	; 8
     2c4:	90 61       	ori	r25, 0x10	; 16
     2c6:	98 b9       	out	0x08, r25	; 8
	glb.sreg = SREG;
     2c8:	9f b7       	in	r25, 0x3f	; 63
     2ca:	90 93 fd 05 	sts	0x05FD, r25	; 0x8005fd <glb+0x10a>
	return readData; // only used for testing
}
     2ce:	08 95       	ret

000002d0 <sendreg>:

// send first a flag signifying which set of 3 channels (1-3 (0), 4-6 (1), or all 6 (default)) will be written to in the slave ATmega
// followed by the register to be written to, followed by the data to be written to that register
void sendreg(uint8_t flag, uint8_t reg, uint8_t data){
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	d6 2f       	mov	r29, r22
     2d6:	c4 2f       	mov	r28, r20
	unsigned char rData;
	
	rData = SPIsend(flag);
     2d8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <SPIsend>
     2dc:	85 e3       	ldi	r24, 0x35	; 53
     2de:	8a 95       	dec	r24
     2e0:	f1 f7       	brne	.-4      	; 0x2de <sendreg+0xe>
     2e2:	00 00       	nop
	_delay_us(10);
	rData = SPIsend(reg);
     2e4:	8d 2f       	mov	r24, r29
     2e6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <SPIsend>
     2ea:	85 e3       	ldi	r24, 0x35	; 53
     2ec:	8a 95       	dec	r24
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <sendreg+0x1c>
     2f0:	00 00       	nop
	_delay_us(10);
	rData = SPIsend(data);
     2f2:	8c 2f       	mov	r24, r28
     2f4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <SPIsend>
     2f8:	85 e3       	ldi	r24, 0x35	; 53
     2fa:	8a 95       	dec	r24
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <sendreg+0x2a>
     2fe:	00 00       	nop
	_delay_us(10);
}
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <writeToYM>:

// send parameter data to slave ATmega to be written to YM2612
// all 6 channels will be written to at once, but only the currently selected operator
void writeToYM(uint8_t op, uint8_t val1, uint8_t val2, uint8_t baseReg, uint8_t bitShift1, uint8_t bitShift2,
bool multiOp, bool multiChannel, uint8_t options, uint8_t subValue1, uint8_t subValue2){
     306:	7f 92       	push	r7
     308:	8f 92       	push	r8
     30a:	9f 92       	push	r9
     30c:	af 92       	push	r10
     30e:	bf 92       	push	r11
     310:	cf 92       	push	r12
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	96 2e       	mov	r9, r22
     326:	f4 2e       	mov	r15, r20
     328:	78 88       	ldd	r7, Y+16	; 0x10
	
	uint8_t regToWrite;
	uint8_t dataToWrite;
	
	// add offset (0x00, 0x08, 0x04, 0x0C for op 0, 1, 2, 3) to base register, to write to the register associated with a specific operator
	if(multiOp){
     32a:	cc 20       	and	r12, r12
     32c:	39 f0       	breq	.+14     	; 0x33c <writeToYM+0x36>
		regToWrite = baseReg + opOffset[op];
     32e:	e8 2f       	mov	r30, r24
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	e8 51       	subi	r30, 0x18	; 24
     334:	fb 4f       	sbci	r31, 0xFB	; 251
     336:	10 81       	ld	r17, Z
     338:	12 0f       	add	r17, r18
     33a:	01 c0       	rjmp	.+2      	; 0x33e <writeToYM+0x38>
	} else {
		regToWrite = baseReg;
     33c:	12 2f       	mov	r17, r18
	}
	
	// most registers are written to on a channel-by-channel basis
	// so first send flag 0 to write to channel 1, 2, 3 (0xX0, 0xX1, 0xX2, 0xX3 + op offset),
	// then send flag 1 to write to channels 4, 5, 6 using the same values
	if(multiChannel){
     33e:	a1 10       	cpse	r10, r1
     340:	b5 c0       	rjmp	.+362    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     342:	bb c0       	rjmp	.+374    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
		for(int j = 0; j < 2; j++){
			for(int i = 0; i < 3; i++){ // write same value to all 6 channels
				switch(options){
     344:	88 2d       	mov	r24, r8
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	8a 30       	cpi	r24, 0x0A	; 10
     34a:	91 05       	cpc	r25, r1
     34c:	08 f0       	brcs	.+2      	; 0x350 <writeToYM+0x4a>
     34e:	99 c0       	rjmp	.+306    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     350:	fc 01       	movw	r30, r24
     352:	ec 5c       	subi	r30, 0xCC	; 204
     354:	ff 4f       	sbci	r31, 0xFF	; 255
     356:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__tablejump2__>
					case 0: // shared, neither register is reversed
						dataToWrite = (val1 << bitShift1) + (val2 << bitShift2);
     35a:	49 2d       	mov	r20, r9
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	00 2e       	mov	r0, r16
     360:	02 c0       	rjmp	.+4      	; 0x366 <writeToYM+0x60>
     362:	44 0f       	add	r20, r20
     364:	55 1f       	adc	r21, r21
     366:	0a 94       	dec	r0
     368:	e2 f7       	brpl	.-8      	; 0x362 <writeToYM+0x5c>
     36a:	8f 2d       	mov	r24, r15
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 2c       	mov	r0, r14
     370:	02 c0       	rjmp	.+4      	; 0x376 <writeToYM+0x70>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	0a 94       	dec	r0
     378:	e2 f7       	brpl	.-8      	; 0x372 <writeToYM+0x6c>
     37a:	48 0f       	add	r20, r24
						break;
     37c:	83 c0       	rjmp	.+262    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
					case 1: // val 1 is reversed, val 2 is not
						dataToWrite = ((subValue1 - val1) << bitShift1) + (val2 << bitShift2);
     37e:	47 2d       	mov	r20, r7
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	49 19       	sub	r20, r9
     384:	51 09       	sbc	r21, r1
     386:	00 2e       	mov	r0, r16
     388:	02 c0       	rjmp	.+4      	; 0x38e <writeToYM+0x88>
     38a:	44 0f       	add	r20, r20
     38c:	55 1f       	adc	r21, r21
     38e:	0a 94       	dec	r0
     390:	e2 f7       	brpl	.-8      	; 0x38a <writeToYM+0x84>
     392:	8f 2d       	mov	r24, r15
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 2c       	mov	r0, r14
     398:	02 c0       	rjmp	.+4      	; 0x39e <writeToYM+0x98>
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	0a 94       	dec	r0
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <writeToYM+0x94>
     3a2:	48 0f       	add	r20, r24
						break;
     3a4:	6f c0       	rjmp	.+222    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
					case 2: // val 1 is not reverse, val 2 is
						dataToWrite = (val1 << bitShift1) + ((subValue2 - val2) << bitShift2);
     3a6:	49 2d       	mov	r20, r9
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	00 2e       	mov	r0, r16
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <writeToYM+0xac>
     3ae:	44 0f       	add	r20, r20
     3b0:	55 1f       	adc	r21, r21
     3b2:	0a 94       	dec	r0
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <writeToYM+0xa8>
     3b6:	29 89       	ldd	r18, Y+17	; 0x11
     3b8:	82 2f       	mov	r24, r18
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	8f 19       	sub	r24, r15
     3be:	91 09       	sbc	r25, r1
     3c0:	0e 2c       	mov	r0, r14
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <writeToYM+0xc2>
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	0a 94       	dec	r0
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <writeToYM+0xbe>
     3cc:	48 0f       	add	r20, r24
						break;
     3ce:	5a c0       	rjmp	.+180    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
					case 3: // both vals reversed
						dataToWrite = ((subValue1 - val1) << bitShift1) + ((subValue2 - val2) << bitShift2);
     3d0:	47 2d       	mov	r20, r7
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	49 19       	sub	r20, r9
     3d6:	51 09       	sbc	r21, r1
     3d8:	00 2e       	mov	r0, r16
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <writeToYM+0xda>
     3dc:	44 0f       	add	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	0a 94       	dec	r0
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <writeToYM+0xd6>
     3e4:	29 89       	ldd	r18, Y+17	; 0x11
     3e6:	82 2f       	mov	r24, r18
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	8f 19       	sub	r24, r15
     3ec:	91 09       	sbc	r25, r1
     3ee:	0e 2c       	mov	r0, r14
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <writeToYM+0xf0>
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	0a 94       	dec	r0
     3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <writeToYM+0xec>
     3fa:	48 0f       	add	r20, r24
						break;
     3fc:	43 c0       	rjmp	.+134    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
					case 4: // not shared, not reverse (SSGEG if 0, frequency A0)
						dataToWrite = val1;
						break;
					case 5: // for detune & oct, which have a a min value of -3 (val1)
						dataToWrite = ((val1 + 3) << bitShift1) + (val2 << bitShift2);
     3fe:	49 2d       	mov	r20, r9
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	4d 5f       	subi	r20, 0xFD	; 253
     404:	5f 4f       	sbci	r21, 0xFF	; 255
     406:	00 2e       	mov	r0, r16
     408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40a:	44 0f       	add	r20, r20
     40c:	55 1f       	adc	r21, r21
     40e:	0a 94       	dec	r0
     410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     412:	8f 2d       	mov	r24, r15
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 2c       	mov	r0, r14
     418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	0a 94       	dec	r0
     420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     422:	48 0f       	add	r20, r24
						break;
     424:	2f c0       	rjmp	.+94     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
					case 6: // for detune & oct, which have a a min value of -3 (val2)
						dataToWrite = (val1 << bitShift1) + ((val2 + 3) << bitShift2);
     426:	49 2d       	mov	r20, r9
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	00 2e       	mov	r0, r16
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     42e:	44 0f       	add	r20, r20
     430:	55 1f       	adc	r21, r21
     432:	0a 94       	dec	r0
     434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     436:	8f 2d       	mov	r24, r15
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	03 96       	adiw	r24, 0x03	; 3
     43c:	0e 2c       	mov	r0, r14
     43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	0a 94       	dec	r0
     446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     448:	48 0f       	add	r20, r24
						break;
     44a:	1c c0       	rjmp	.+56     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
					case 7: // only sustain rate, which is both not shared AND reversed
						dataToWrite = subValue1 - val1;
     44c:	47 2d       	mov	r20, r7
     44e:	49 19       	sub	r20, r9
						break;
     450:	19 c0       	rjmp	.+50     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
					case 8: // only for reg B4+ which has pan (always both L and R true)
						dataToWrite = 0xC0 + (val1 << bitShift1) + (val2 << bitShift2);
     452:	89 2d       	mov	r24, r9
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	ac 01       	movw	r20, r24
     458:	00 2e       	mov	r0, r16
     45a:	02 c0       	rjmp	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     45c:	44 0f       	add	r20, r20
     45e:	55 1f       	adc	r21, r21
     460:	0a 94       	dec	r0
     462:	e2 f7       	brpl	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     464:	8f 2d       	mov	r24, r15
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 2c       	mov	r0, r14
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	0a 94       	dec	r0
     472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     474:	84 0f       	add	r24, r20
     476:	40 ec       	ldi	r20, 0xC0	; 192
     478:	48 0f       	add	r20, r24
						break;
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
					case 9: // not shared, but reverse (total lvl)
						dataToWrite = subValue1 - val1;
     47c:	47 2d       	mov	r20, r7
     47e:	49 19       	sub	r20, r9
						break;
     480:	01 c0       	rjmp	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
						break;
					case 3: // both vals reversed
						dataToWrite = ((subValue1 - val1) << bitShift1) + ((subValue2 - val2) << bitShift2);
						break;
					case 4: // not shared, not reverse (SSGEG if 0, frequency A0)
						dataToWrite = val1;
     482:	49 2d       	mov	r20, r9
					default:
						dataToWrite = val1;
						break;
				}
				
				sendreg(j, regToWrite + i, dataToWrite); // write
     484:	61 2f       	mov	r22, r17
     486:	6c 0d       	add	r22, r12
     488:	8a 2d       	mov	r24, r10
     48a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
	// most registers are written to on a channel-by-channel basis
	// so first send flag 0 to write to channel 1, 2, 3 (0xX0, 0xX1, 0xX2, 0xX3 + op offset),
	// then send flag 1 to write to channels 4, 5, 6 using the same values
	if(multiChannel){
		for(int j = 0; j < 2; j++){
			for(int i = 0; i < 3; i++){ // write same value to all 6 channels
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	c8 1a       	sub	r12, r24
     492:	d8 0a       	sbc	r13, r24
     494:	02 c0       	rjmp	.+4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     496:	c1 2c       	mov	r12, r1
     498:	d1 2c       	mov	r13, r1
     49a:	23 e0       	ldi	r18, 0x03	; 3
     49c:	c2 16       	cp	r12, r18
     49e:	d1 04       	cpc	r13, r1
     4a0:	0c f4       	brge	.+2      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     4a2:	50 cf       	rjmp	.-352    	; 0x344 <writeToYM+0x3e>
	
	// most registers are written to on a channel-by-channel basis
	// so first send flag 0 to write to channel 1, 2, 3 (0xX0, 0xX1, 0xX2, 0xX3 + op offset),
	// then send flag 1 to write to channels 4, 5, 6 using the same values
	if(multiChannel){
		for(int j = 0; j < 2; j++){
     4a4:	8f ef       	ldi	r24, 0xFF	; 255
     4a6:	a8 1a       	sub	r10, r24
     4a8:	b8 0a       	sbc	r11, r24
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4ac:	a1 2c       	mov	r10, r1
     4ae:	b1 2c       	mov	r11, r1
     4b0:	22 e0       	ldi	r18, 0x02	; 2
     4b2:	a2 16       	cp	r10, r18
     4b4:	b1 04       	cpc	r11, r1
     4b6:	7c f3       	brlt	.-34     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     4b8:	0c c0       	rjmp	.+24     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
				sendreg(j, regToWrite + i, dataToWrite); // write
			}
		}
		
	} else { // only LFO register 0x22 is global (among the registers being written to in this function anyway)
		sendreg(0, baseReg, val1 + (val2 << bitShift2));
     4ba:	4f 2d       	mov	r20, r15
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4c0:	44 0f       	add	r20, r20
     4c2:	55 1f       	adc	r21, r21
     4c4:	ea 94       	dec	r14
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     4c8:	49 0d       	add	r20, r9
     4ca:	62 2f       	mov	r22, r18
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
	}
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	df 90       	pop	r13
     4e0:	cf 90       	pop	r12
     4e2:	bf 90       	pop	r11
     4e4:	af 90       	pop	r10
     4e6:	9f 90       	pop	r9
     4e8:	8f 90       	pop	r8
     4ea:	7f 90       	pop	r7
     4ec:	08 95       	ret

000004ee <printToLCD>:

// format and print text to LCD based on currently selected parameter
void printToLCD(char param[17],int options){
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	cc 5d       	subi	r28, 0xDC	; 220
     508:	d1 40       	sbci	r29, 0x01	; 1
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	b8 2e       	mov	r11, r24
     516:	a9 2e       	mov	r10, r25
     518:	8b 01       	movw	r16, r22
	int val = *ym.value;
     51a:	ee ef       	ldi	r30, 0xFE	; 254
     51c:	f5 e0       	ldi	r31, 0x05	; 5
     51e:	a6 81       	ldd	r26, Z+6	; 0x06
     520:	b7 81       	ldd	r27, Z+7	; 0x07
     522:	cd 90       	ld	r12, X+
     524:	dc 90       	ld	r13, X
	
	uint8_t op = ym.op;
     526:	e0 80       	ld	r14, Z
     528:	f1 80       	ldd	r15, Z+1	; 0x01
	
	// algorithm types
	char algorithms[8][17] = {	
     52a:	88 e8       	ldi	r24, 0x88	; 136
     52c:	ee e0       	ldi	r30, 0x0E	; 14
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	de 01       	movw	r26, r28
     532:	11 96       	adiw	r26, 0x01	; 1
     534:	01 90       	ld	r0, Z+
     536:	0d 92       	st	X+, r0
     538:	8a 95       	dec	r24
     53a:	e1 f7       	brne	.-8      	; 0x534 <printToLCD+0x46>
		"(2 > 3) & 1 > 4~", "(1 > 2) & 3 > 4~",
		"1 > 2~, 3 > 4~", "1 > (2 & 3 & 4)~",
		"1 > 3~, 2~, 4~", "1~, 2~, 3~, 4~" 
	};
	
	char onOff[2][17] = {"OFF","ON"}; // whether param is off or on
     53c:	82 e2       	ldi	r24, 0x22	; 34
     53e:	e6 e9       	ldi	r30, 0x96	; 150
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	de 01       	movw	r26, r28
     544:	a7 57       	subi	r26, 0x77	; 119
     546:	bf 4f       	sbci	r27, 0xFF	; 255
     548:	01 90       	ld	r0, Z+
     54a:	0d 92       	st	X+, r0
     54c:	8a 95       	dec	r24
     54e:	e1 f7       	brne	.-8      	; 0x548 <printToLCD+0x5a>
	
	// lfo freqs are displayed as strings
	char lfoFreqs[9][17] = {	
     550:	89 e9       	ldi	r24, 0x99	; 153
     552:	e8 eb       	ldi	r30, 0xB8	; 184
     554:	f1 e0       	ldi	r31, 0x01	; 1
     556:	de 01       	movw	r26, r28
     558:	a5 55       	subi	r26, 0x55	; 85
     55a:	bf 4f       	sbci	r27, 0xFF	; 255
     55c:	01 90       	ld	r0, Z+
     55e:	0d 92       	st	X+, r0
     560:	8a 95       	dec	r24
     562:	e1 f7       	brne	.-8      	; 0x55c <printToLCD+0x6e>
		"OFF", "3.82 Hz", "5.33 Hz", "5.77 Hz", "6.11 Hz", 
		"6.60 Hz", "9.23 Hz", "46.11 Hz", "69.22 Hz" 
	};
	
	// SSGEG types
	char egTypes[9][17] = {	
     564:	89 e9       	ldi	r24, 0x99	; 153
     566:	e1 e5       	ldi	r30, 0x51	; 81
     568:	f2 e0       	ldi	r31, 0x02	; 2
     56a:	de 01       	movw	r26, r28
     56c:	ac 5b       	subi	r26, 0xBC	; 188
     56e:	be 4f       	sbci	r27, 0xFE	; 254
     570:	01 90       	ld	r0, Z+
     572:	0d 92       	st	X+, r0
     574:	8a 95       	dec	r24
     576:	e1 f7       	brne	.-8      	; 0x570 <printToLCD+0x82>
		"forward+rev loop", "one shot + high",
		"reverse loop", "reverse + high",
		"rev+forward loop", "reverse + low" 
	};
	
	home(); // line 1, spot 1
     578:	0e 94 4a 01 	call	0x294	; 0x294 <home>
	printf("                \n                "); // clear screen
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	9f 93       	push	r25
     582:	8f 93       	push	r24
     584:	0e 94 1c 1b 	call	0x3638	; 0x3638 <printf>
	home();
     588:	0e 94 4a 01 	call	0x294	; 0x294 <home>

	switch(options){
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	08 30       	cpi	r16, 0x08	; 8
     592:	11 05       	cpc	r17, r1
     594:	08 f0       	brcs	.+2      	; 0x598 <printToLCD+0xaa>
     596:	ee c0       	rjmp	.+476    	; 0x774 <printToLCD+0x286>
     598:	f8 01       	movw	r30, r16
     59a:	e2 5c       	subi	r30, 0xC2	; 194
     59c:	ff 4f       	sbci	r31, 0xFF	; 255
     59e:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__tablejump2__>
		case 0: // not operator, no strings
			printf("%s:\n%d",param,val);
     5a2:	df 92       	push	r13
     5a4:	cf 92       	push	r12
     5a6:	af 92       	push	r10
     5a8:	bf 92       	push	r11
     5aa:	8a e2       	ldi	r24, 0x2A	; 42
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	0e 94 1c 1b 	call	0x3638	; 0x3638 <printf>
			break;
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	d8 c0       	rjmp	.+432    	; 0x774 <printToLCD+0x286>
		case 1: // regular operator params
			printf("op %d %s:\n%d",op+1,param,val);
     5c4:	df 92       	push	r13
     5c6:	cf 92       	push	r12
     5c8:	af 92       	push	r10
     5ca:	bf 92       	push	r11
     5cc:	ff 24       	eor	r15, r15
     5ce:	2f ef       	ldi	r18, 0xFF	; 255
     5d0:	e2 1a       	sub	r14, r18
     5d2:	f2 0a       	sbc	r15, r18
     5d4:	ff 92       	push	r15
     5d6:	ef 92       	push	r14
     5d8:	84 e2       	ldi	r24, 0x24	; 36
     5da:	93 e0       	ldi	r25, 0x03	; 3
     5dc:	9f 93       	push	r25
     5de:	8f 93       	push	r24
     5e0:	0e 94 1c 1b 	call	0x3638	; 0x3638 <printf>
			break;
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	c2 c0       	rjmp	.+388    	; 0x774 <printToLCD+0x286>
		case 2:  // just mult (0 = 0.5, everything else is normal)
			if(val == 0){
     5f0:	c1 14       	cp	r12, r1
     5f2:	d1 04       	cpc	r13, r1
     5f4:	a9 f4       	brne	.+42     	; 0x620 <printToLCD+0x132>
				printf("op %d %s:\n0.5",op+1,param);
     5f6:	af 92       	push	r10
     5f8:	bf 92       	push	r11
     5fa:	ff 24       	eor	r15, r15
     5fc:	9f ef       	ldi	r25, 0xFF	; 255
     5fe:	e9 1a       	sub	r14, r25
     600:	f9 0a       	sbc	r15, r25
     602:	ff 92       	push	r15
     604:	ef 92       	push	r14
     606:	81 e3       	ldi	r24, 0x31	; 49
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	9f 93       	push	r25
     60c:	8f 93       	push	r24
     60e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <printf>
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	aa c0       	rjmp	.+340    	; 0x774 <printToLCD+0x286>
			} else {
				printf("op %d %s:\n%d",op+1,param,val);
     620:	df 92       	push	r13
     622:	cf 92       	push	r12
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	ff 24       	eor	r15, r15
     62a:	2f ef       	ldi	r18, 0xFF	; 255
     62c:	e2 1a       	sub	r14, r18
     62e:	f2 0a       	sbc	r15, r18
     630:	ff 92       	push	r15
     632:	ef 92       	push	r14
     634:	84 e2       	ldi	r24, 0x24	; 36
     636:	93 e0       	ldi	r25, 0x03	; 3
     638:	9f 93       	push	r25
     63a:	8f 93       	push	r24
     63c:	0e 94 1c 1b 	call	0x3638	; 0x3638 <printf>
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	94 c0       	rjmp	.+296    	; 0x774 <printToLCD+0x286>
			}
			break;
		case 3: // algorithm
			printf("%s %d:\n%s",param,val+1,algorithms[val]);
     64c:	21 e1       	ldi	r18, 0x11	; 17
     64e:	2c 9d       	mul	r18, r12
     650:	c0 01       	movw	r24, r0
     652:	2d 9d       	mul	r18, r13
     654:	90 0d       	add	r25, r0
     656:	11 24       	eor	r1, r1
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	2c 0f       	add	r18, r28
     65e:	3d 1f       	adc	r19, r29
     660:	82 0f       	add	r24, r18
     662:	93 1f       	adc	r25, r19
     664:	9f 93       	push	r25
     666:	8f 93       	push	r24
     668:	3f ef       	ldi	r19, 0xFF	; 255
     66a:	c3 1a       	sub	r12, r19
     66c:	d3 0a       	sbc	r13, r19
     66e:	df 92       	push	r13
     670:	cf 92       	push	r12
     672:	af 92       	push	r10
     674:	bf 92       	push	r11
     676:	8f e3       	ldi	r24, 0x3F	; 63
     678:	93 e0       	ldi	r25, 0x03	; 3
     67a:	9f 93       	push	r25
     67c:	8f 93       	push	r24
     67e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <printf>
			break;
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	73 c0       	rjmp	.+230    	; 0x774 <printToLCD+0x286>
		case 4: // on or off params (AM and... i think thats it for now)
			printf("op %d %s:\n%s",op+1,param,onOff[val]);
     68e:	21 e1       	ldi	r18, 0x11	; 17
     690:	2c 9d       	mul	r18, r12
     692:	c0 01       	movw	r24, r0
     694:	2d 9d       	mul	r18, r13
     696:	90 0d       	add	r25, r0
     698:	11 24       	eor	r1, r1
     69a:	29 e8       	ldi	r18, 0x89	; 137
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	2c 0f       	add	r18, r28
     6a0:	3d 1f       	adc	r19, r29
     6a2:	82 0f       	add	r24, r18
     6a4:	93 1f       	adc	r25, r19
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	af 92       	push	r10
     6ac:	bf 92       	push	r11
     6ae:	ff 24       	eor	r15, r15
     6b0:	3f ef       	ldi	r19, 0xFF	; 255
     6b2:	e3 1a       	sub	r14, r19
     6b4:	f3 0a       	sbc	r15, r19
     6b6:	ff 92       	push	r15
     6b8:	ef 92       	push	r14
     6ba:	89 e4       	ldi	r24, 0x49	; 73
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	9f 93       	push	r25
     6c0:	8f 93       	push	r24
     6c2:	0e 94 1c 1b 	call	0x3638	; 0x3638 <printf>
			break;
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	51 c0       	rjmp	.+162    	; 0x774 <printToLCD+0x286>
		case 5: // LFO
			printf("%s:\n%s",param,lfoFreqs[val]);
     6d2:	21 e1       	ldi	r18, 0x11	; 17
     6d4:	2c 9d       	mul	r18, r12
     6d6:	c0 01       	movw	r24, r0
     6d8:	2d 9d       	mul	r18, r13
     6da:	90 0d       	add	r25, r0
     6dc:	11 24       	eor	r1, r1
     6de:	2b ea       	ldi	r18, 0xAB	; 171
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	2c 0f       	add	r18, r28
     6e4:	3d 1f       	adc	r19, r29
     6e6:	82 0f       	add	r24, r18
     6e8:	93 1f       	adc	r25, r19
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	af 92       	push	r10
     6f0:	bf 92       	push	r11
     6f2:	8f e4       	ldi	r24, 0x4F	; 79
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	9f 93       	push	r25
     6f8:	8f 93       	push	r24
     6fa:	0e 94 1c 1b 	call	0x3638	; 0x3638 <printf>
			break;
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	34 c0       	rjmp	.+104    	; 0x774 <printToLCD+0x286>
		case 6: // SSGEG
			printf("op %d %s:\n%s",op+1,param,egTypes[val]);
     70c:	21 e1       	ldi	r18, 0x11	; 17
     70e:	2c 9d       	mul	r18, r12
     710:	c0 01       	movw	r24, r0
     712:	2d 9d       	mul	r18, r13
     714:	90 0d       	add	r25, r0
     716:	11 24       	eor	r1, r1
     718:	24 e4       	ldi	r18, 0x44	; 68
     71a:	31 e0       	ldi	r19, 0x01	; 1
     71c:	2c 0f       	add	r18, r28
     71e:	3d 1f       	adc	r19, r29
     720:	82 0f       	add	r24, r18
     722:	93 1f       	adc	r25, r19
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	af 92       	push	r10
     72a:	bf 92       	push	r11
     72c:	ff 24       	eor	r15, r15
     72e:	3f ef       	ldi	r19, 0xFF	; 255
     730:	e3 1a       	sub	r14, r19
     732:	f3 0a       	sbc	r15, r19
     734:	ff 92       	push	r15
     736:	ef 92       	push	r14
     738:	89 e4       	ldi	r24, 0x49	; 73
     73a:	93 e0       	ldi	r25, 0x03	; 3
     73c:	9f 93       	push	r25
     73e:	8f 93       	push	r24
     740:	0e 94 1c 1b 	call	0x3638	; 0x3638 <printf>
			break;
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
     74e:	12 c0       	rjmp	.+36     	; 0x774 <printToLCD+0x286>
		case 7: // preset patch
			printf("%s:\n%s",param,ym.patchName);
     750:	8c e2       	ldi	r24, 0x2C	; 44
     752:	96 e0       	ldi	r25, 0x06	; 6
     754:	9f 93       	push	r25
     756:	8f 93       	push	r24
     758:	af 92       	push	r10
     75a:	bf 92       	push	r11
     75c:	8f e4       	ldi	r24, 0x4F	; 79
     75e:	93 e0       	ldi	r25, 0x03	; 3
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	0e 94 1c 1b 	call	0x3638	; 0x3638 <printf>
			break;
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
	}
	
	// for some reason i can't seem to add extra cases - it causes weird malfunctions in the synth that cause the display not to work and then it crashes
	// any insight into why this might be happening would be helpful
}
     774:	c4 52       	subi	r28, 0x24	; 36
     776:	de 4f       	sbci	r29, 0xFE	; 254
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	bf 90       	pop	r11
     794:	af 90       	pop	r10
     796:	08 95       	ret

00000798 <minMaxValue>:

// restrict passed value within min/max values
void minMaxValue(int* var, int min, int max){
	int varVal = *var;
     798:	fc 01       	movw	r30, r24
     79a:	20 81       	ld	r18, Z
     79c:	31 81       	ldd	r19, Z+1	; 0x01
	
	if(varVal < min){
     79e:	26 17       	cp	r18, r22
     7a0:	37 07       	cpc	r19, r23
     7a2:	1c f4       	brge	.+6      	; 0x7aa <minMaxValue+0x12>
		*var = max;
     7a4:	51 83       	std	Z+1, r21	; 0x01
     7a6:	40 83       	st	Z, r20
     7a8:	08 95       	ret
	} else if(varVal > max){
     7aa:	42 17       	cp	r20, r18
     7ac:	53 07       	cpc	r21, r19
     7ae:	1c f4       	brge	.+6      	; 0x7b6 <minMaxValue+0x1e>
		*var = min;
     7b0:	fc 01       	movw	r30, r24
     7b2:	71 83       	std	Z+1, r23	; 0x01
     7b4:	60 83       	st	Z, r22
     7b6:	08 95       	ret

000007b8 <changeAllParams>:
int mult0, int  mult1, int mult2, int mult3, int det0, int det1, int det2, int det3,
int tl0, int tl1, int tl2, int tl3, int atk0, int atk1, int atk2, int atk3,
int dcy0, int dcy1, int dcy2, int dcy3, int sl0, int sl1, int sl2, int sl3,
int sr0, int sr1, int sr2, int sr3, int rel0, int rel1, int rel2, int rel3,
int rs0, int rs1, int rs2, int rs3, int eg0, int eg1, int eg2, int eg3,
int am0, int am1, int am2, int am3){
     7b8:	2f 92       	push	r2
     7ba:	3f 92       	push	r3
     7bc:	4f 92       	push	r4
     7be:	5f 92       	push	r5
     7c0:	6f 92       	push	r6
     7c2:	7f 92       	push	r7
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	c2 56       	subi	r28, 0x62	; 98
     7e2:	d1 09       	sbc	r29, r1
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	3a 01       	movw	r6, r20
     7f0:	52 2e       	mov	r5, r18
     7f2:	40 2e       	mov	r4, r16
     7f4:	c9 54       	subi	r28, 0x49	; 73
     7f6:	df 4f       	sbci	r29, 0xFF	; 255
     7f8:	48 81       	ld	r20, Y
     7fa:	59 81       	ldd	r21, Y+1	; 0x01
     7fc:	c7 5b       	subi	r28, 0xB7	; 183
     7fe:	d0 40       	sbci	r29, 0x00	; 0
     800:	c7 54       	subi	r28, 0x47	; 71
     802:	df 4f       	sbci	r29, 0xFF	; 255
     804:	a8 81       	ld	r26, Y
     806:	b9 81       	ldd	r27, Y+1	; 0x01
     808:	c9 5b       	subi	r28, 0xB9	; 185
     80a:	d0 40       	sbci	r29, 0x00	; 0
     80c:	c5 54       	subi	r28, 0x45	; 69
     80e:	df 4f       	sbci	r29, 0xFF	; 255
     810:	28 80       	ld	r2, Y
     812:	39 80       	ldd	r3, Y+1	; 0x01
     814:	cb 5b       	subi	r28, 0xBB	; 187
     816:	d0 40       	sbci	r29, 0x00	; 0
     818:	c3 54       	subi	r28, 0x43	; 67
     81a:	df 4f       	sbci	r29, 0xFF	; 255
     81c:	e8 81       	ld	r30, Y
     81e:	f9 81       	ldd	r31, Y+1	; 0x01
     820:	cd 5b       	subi	r28, 0xBD	; 189
     822:	d0 40       	sbci	r29, 0x00	; 0
     824:	6b 96       	adiw	r28, 0x1b	; 27
     826:	ff af       	std	Y+63, r31	; 0x3f
     828:	ee af       	std	Y+62, r30	; 0x3e
     82a:	6b 97       	sbiw	r28, 0x1b	; 27
     82c:	c1 54       	subi	r28, 0x41	; 65
     82e:	df 4f       	sbci	r29, 0xFF	; 255
     830:	e8 81       	ld	r30, Y
     832:	f9 81       	ldd	r31, Y+1	; 0x01
     834:	cf 5b       	subi	r28, 0xBF	; 191
     836:	d0 40       	sbci	r29, 0x00	; 0
     838:	6d 96       	adiw	r28, 0x1d	; 29
     83a:	ff af       	std	Y+63, r31	; 0x3f
     83c:	ee af       	std	Y+62, r30	; 0x3e
     83e:	6d 97       	sbiw	r28, 0x1d	; 29
     840:	cf 53       	subi	r28, 0x3F	; 63
     842:	df 4f       	sbci	r29, 0xFF	; 255
     844:	e8 81       	ld	r30, Y
     846:	f9 81       	ldd	r31, Y+1	; 0x01
     848:	c1 5c       	subi	r28, 0xC1	; 193
     84a:	d0 40       	sbci	r29, 0x00	; 0
     84c:	6f 96       	adiw	r28, 0x1f	; 31
     84e:	ff af       	std	Y+63, r31	; 0x3f
     850:	ee af       	std	Y+62, r30	; 0x3e
     852:	6f 97       	sbiw	r28, 0x1f	; 31
     854:	cd 53       	subi	r28, 0x3D	; 61
     856:	df 4f       	sbci	r29, 0xFF	; 255
     858:	e8 81       	ld	r30, Y
     85a:	f9 81       	ldd	r31, Y+1	; 0x01
     85c:	c3 5c       	subi	r28, 0xC3	; 195
     85e:	d0 40       	sbci	r29, 0x00	; 0
     860:	a1 96       	adiw	r28, 0x21	; 33
     862:	ff af       	std	Y+63, r31	; 0x3f
     864:	ee af       	std	Y+62, r30	; 0x3e
     866:	a1 97       	sbiw	r28, 0x21	; 33
     868:	cb 53       	subi	r28, 0x3B	; 59
     86a:	df 4f       	sbci	r29, 0xFF	; 255
     86c:	e8 81       	ld	r30, Y
     86e:	f9 81       	ldd	r31, Y+1	; 0x01
     870:	c5 5c       	subi	r28, 0xC5	; 197
     872:	d0 40       	sbci	r29, 0x00	; 0
     874:	a3 96       	adiw	r28, 0x23	; 35
     876:	ff af       	std	Y+63, r31	; 0x3f
     878:	ee af       	std	Y+62, r30	; 0x3e
     87a:	a3 97       	sbiw	r28, 0x23	; 35
	
	// change param values inside program:
	
	// non-operator params:
	ym.algorithm = alg;
     87c:	ed e3       	ldi	r30, 0x3D	; 61
     87e:	f6 e0       	ldi	r31, 0x06	; 6
     880:	80 83       	st	Z, r24
     882:	91 83       	std	Z+1, r25	; 0x01
	ym.feedback = fb;
     884:	ef e3       	ldi	r30, 0x3F	; 63
     886:	f6 e0       	ldi	r31, 0x06	; 6
     888:	60 83       	st	Z, r22
     88a:	71 83       	std	Z+1, r23	; 0x01
	ym.lfoFreq = lfo;
     88c:	70 92 92 06 	sts	0x0692, r7	; 0x800692 <ym+0x94>
     890:	60 92 91 06 	sts	0x0691, r6	; 0x800691 <ym+0x93>
	ym.vibrato = vib;
     894:	e3 e9       	ldi	r30, 0x93	; 147
     896:	f6 e0       	ldi	r31, 0x06	; 6
     898:	20 83       	st	Z, r18
     89a:	31 83       	std	Z+1, r19	; 0x01
	ym.tremolo = trem;
     89c:	e5 e9       	ldi	r30, 0x95	; 149
     89e:	f6 e0       	ldi	r31, 0x06	; 6
     8a0:	00 83       	st	Z, r16
     8a2:	11 83       	std	Z+1, r17	; 0x01
	
	// reconstruct operator arrays:
	
	// group 1
	int mult[] = {mult0, mult1, mult2, mult3};
     8a4:	fa 82       	std	Y+2, r15	; 0x02
     8a6:	e9 82       	std	Y+1, r14	; 0x01
     8a8:	dc 82       	std	Y+4, r13	; 0x04
     8aa:	cb 82       	std	Y+3, r12	; 0x03
     8ac:	be 82       	std	Y+6, r11	; 0x06
     8ae:	ad 82       	std	Y+5, r10	; 0x05
     8b0:	98 86       	std	Y+8, r9	; 0x08
     8b2:	8f 82       	std	Y+7, r8	; 0x07
	int det[] = {det0, det1, det2, det3};
     8b4:	e9 96       	adiw	r28, 0x39	; 57
     8b6:	2e ad       	ldd	r18, Y+62	; 0x3e
     8b8:	3f ad       	ldd	r19, Y+63	; 0x3f
     8ba:	e9 97       	sbiw	r28, 0x39	; 57
     8bc:	3a 87       	std	Y+10, r19	; 0x0a
     8be:	29 87       	std	Y+9, r18	; 0x09
     8c0:	eb 96       	adiw	r28, 0x3b	; 59
     8c2:	2e ad       	ldd	r18, Y+62	; 0x3e
     8c4:	3f ad       	ldd	r19, Y+63	; 0x3f
     8c6:	eb 97       	sbiw	r28, 0x3b	; 59
     8c8:	3c 87       	std	Y+12, r19	; 0x0c
     8ca:	2b 87       	std	Y+11, r18	; 0x0b
     8cc:	ed 96       	adiw	r28, 0x3d	; 61
     8ce:	2e ad       	ldd	r18, Y+62	; 0x3e
     8d0:	3f ad       	ldd	r19, Y+63	; 0x3f
     8d2:	ed 97       	sbiw	r28, 0x3d	; 61
     8d4:	3e 87       	std	Y+14, r19	; 0x0e
     8d6:	2d 87       	std	Y+13, r18	; 0x0d
     8d8:	ef 96       	adiw	r28, 0x3f	; 63
     8da:	2e ad       	ldd	r18, Y+62	; 0x3e
     8dc:	3f ad       	ldd	r19, Y+63	; 0x3f
     8de:	ef 97       	sbiw	r28, 0x3f	; 63
     8e0:	38 8b       	std	Y+16, r19	; 0x10
     8e2:	2f 87       	std	Y+15, r18	; 0x0f
	int tl[] = {tl0, tl1, tl2, tl3};
     8e4:	c1 58       	subi	r28, 0x81	; 129
     8e6:	df 4f       	sbci	r29, 0xFF	; 255
     8e8:	28 81       	ld	r18, Y
     8ea:	39 81       	ldd	r19, Y+1	; 0x01
     8ec:	cf 57       	subi	r28, 0x7F	; 127
     8ee:	d0 40       	sbci	r29, 0x00	; 0
     8f0:	3a 8b       	std	Y+18, r19	; 0x12
     8f2:	29 8b       	std	Y+17, r18	; 0x11
     8f4:	cf 57       	subi	r28, 0x7F	; 127
     8f6:	df 4f       	sbci	r29, 0xFF	; 255
     8f8:	28 81       	ld	r18, Y
     8fa:	39 81       	ldd	r19, Y+1	; 0x01
     8fc:	c1 58       	subi	r28, 0x81	; 129
     8fe:	d0 40       	sbci	r29, 0x00	; 0
     900:	3c 8b       	std	Y+20, r19	; 0x14
     902:	2b 8b       	std	Y+19, r18	; 0x13
     904:	cd 57       	subi	r28, 0x7D	; 125
     906:	df 4f       	sbci	r29, 0xFF	; 255
     908:	28 81       	ld	r18, Y
     90a:	39 81       	ldd	r19, Y+1	; 0x01
     90c:	c3 58       	subi	r28, 0x83	; 131
     90e:	d0 40       	sbci	r29, 0x00	; 0
     910:	3e 8b       	std	Y+22, r19	; 0x16
     912:	2d 8b       	std	Y+21, r18	; 0x15
     914:	cb 57       	subi	r28, 0x7B	; 123
     916:	df 4f       	sbci	r29, 0xFF	; 255
     918:	28 81       	ld	r18, Y
     91a:	39 81       	ldd	r19, Y+1	; 0x01
     91c:	c5 58       	subi	r28, 0x85	; 133
     91e:	d0 40       	sbci	r29, 0x00	; 0
     920:	38 8f       	std	Y+24, r19	; 0x18
     922:	2f 8b       	std	Y+23, r18	; 0x17
	
	// group 2
	int atk[] = {atk0, atk1, atk2, atk3};
     924:	c9 57       	subi	r28, 0x79	; 121
     926:	df 4f       	sbci	r29, 0xFF	; 255
     928:	28 81       	ld	r18, Y
     92a:	39 81       	ldd	r19, Y+1	; 0x01
     92c:	c7 58       	subi	r28, 0x87	; 135
     92e:	d0 40       	sbci	r29, 0x00	; 0
     930:	3a 8f       	std	Y+26, r19	; 0x1a
     932:	29 8f       	std	Y+25, r18	; 0x19
     934:	c7 57       	subi	r28, 0x77	; 119
     936:	df 4f       	sbci	r29, 0xFF	; 255
     938:	28 81       	ld	r18, Y
     93a:	39 81       	ldd	r19, Y+1	; 0x01
     93c:	c9 58       	subi	r28, 0x89	; 137
     93e:	d0 40       	sbci	r29, 0x00	; 0
     940:	3c 8f       	std	Y+28, r19	; 0x1c
     942:	2b 8f       	std	Y+27, r18	; 0x1b
     944:	c5 57       	subi	r28, 0x75	; 117
     946:	df 4f       	sbci	r29, 0xFF	; 255
     948:	28 81       	ld	r18, Y
     94a:	39 81       	ldd	r19, Y+1	; 0x01
     94c:	cb 58       	subi	r28, 0x8B	; 139
     94e:	d0 40       	sbci	r29, 0x00	; 0
     950:	3e 8f       	std	Y+30, r19	; 0x1e
     952:	2d 8f       	std	Y+29, r18	; 0x1d
     954:	c3 57       	subi	r28, 0x73	; 115
     956:	df 4f       	sbci	r29, 0xFF	; 255
     958:	28 81       	ld	r18, Y
     95a:	39 81       	ldd	r19, Y+1	; 0x01
     95c:	cd 58       	subi	r28, 0x8D	; 141
     95e:	d0 40       	sbci	r29, 0x00	; 0
     960:	38 a3       	std	Y+32, r19	; 0x20
     962:	2f 8f       	std	Y+31, r18	; 0x1f
	int dcy[] = {dcy0, dcy1, dcy2, dcy3};
     964:	c1 57       	subi	r28, 0x71	; 113
     966:	df 4f       	sbci	r29, 0xFF	; 255
     968:	28 81       	ld	r18, Y
     96a:	39 81       	ldd	r19, Y+1	; 0x01
     96c:	cf 58       	subi	r28, 0x8F	; 143
     96e:	d0 40       	sbci	r29, 0x00	; 0
     970:	3a a3       	std	Y+34, r19	; 0x22
     972:	29 a3       	std	Y+33, r18	; 0x21
     974:	cf 56       	subi	r28, 0x6F	; 111
     976:	df 4f       	sbci	r29, 0xFF	; 255
     978:	28 81       	ld	r18, Y
     97a:	39 81       	ldd	r19, Y+1	; 0x01
     97c:	c1 59       	subi	r28, 0x91	; 145
     97e:	d0 40       	sbci	r29, 0x00	; 0
     980:	3c a3       	std	Y+36, r19	; 0x24
     982:	2b a3       	std	Y+35, r18	; 0x23
     984:	cd 56       	subi	r28, 0x6D	; 109
     986:	df 4f       	sbci	r29, 0xFF	; 255
     988:	28 81       	ld	r18, Y
     98a:	39 81       	ldd	r19, Y+1	; 0x01
     98c:	c3 59       	subi	r28, 0x93	; 147
     98e:	d0 40       	sbci	r29, 0x00	; 0
     990:	3e a3       	std	Y+38, r19	; 0x26
     992:	2d a3       	std	Y+37, r18	; 0x25
     994:	cb 56       	subi	r28, 0x6B	; 107
     996:	df 4f       	sbci	r29, 0xFF	; 255
     998:	28 81       	ld	r18, Y
     99a:	39 81       	ldd	r19, Y+1	; 0x01
     99c:	c5 59       	subi	r28, 0x95	; 149
     99e:	d0 40       	sbci	r29, 0x00	; 0
     9a0:	38 a7       	std	Y+40, r19	; 0x28
     9a2:	2f a3       	std	Y+39, r18	; 0x27
	int sl[] = {sl0, sl1, sl2, sl3};
     9a4:	c9 56       	subi	r28, 0x69	; 105
     9a6:	df 4f       	sbci	r29, 0xFF	; 255
     9a8:	28 81       	ld	r18, Y
     9aa:	39 81       	ldd	r19, Y+1	; 0x01
     9ac:	c7 59       	subi	r28, 0x97	; 151
     9ae:	d0 40       	sbci	r29, 0x00	; 0
     9b0:	3a a7       	std	Y+42, r19	; 0x2a
     9b2:	29 a7       	std	Y+41, r18	; 0x29
     9b4:	c7 56       	subi	r28, 0x67	; 103
     9b6:	df 4f       	sbci	r29, 0xFF	; 255
     9b8:	28 81       	ld	r18, Y
     9ba:	39 81       	ldd	r19, Y+1	; 0x01
     9bc:	c9 59       	subi	r28, 0x99	; 153
     9be:	d0 40       	sbci	r29, 0x00	; 0
     9c0:	3c a7       	std	Y+44, r19	; 0x2c
     9c2:	2b a7       	std	Y+43, r18	; 0x2b
     9c4:	c5 56       	subi	r28, 0x65	; 101
     9c6:	df 4f       	sbci	r29, 0xFF	; 255
     9c8:	28 81       	ld	r18, Y
     9ca:	39 81       	ldd	r19, Y+1	; 0x01
     9cc:	cb 59       	subi	r28, 0x9B	; 155
     9ce:	d0 40       	sbci	r29, 0x00	; 0
     9d0:	3e a7       	std	Y+46, r19	; 0x2e
     9d2:	2d a7       	std	Y+45, r18	; 0x2d
     9d4:	c3 56       	subi	r28, 0x63	; 99
     9d6:	df 4f       	sbci	r29, 0xFF	; 255
     9d8:	28 81       	ld	r18, Y
     9da:	39 81       	ldd	r19, Y+1	; 0x01
     9dc:	cd 59       	subi	r28, 0x9D	; 157
     9de:	d0 40       	sbci	r29, 0x00	; 0
     9e0:	38 ab       	std	Y+48, r19	; 0x30
     9e2:	2f a7       	std	Y+47, r18	; 0x2f
	int sr[] = {sr0, sr1, sr2, sr3};
     9e4:	c1 56       	subi	r28, 0x61	; 97
     9e6:	df 4f       	sbci	r29, 0xFF	; 255
     9e8:	28 81       	ld	r18, Y
     9ea:	39 81       	ldd	r19, Y+1	; 0x01
     9ec:	cf 59       	subi	r28, 0x9F	; 159
     9ee:	d0 40       	sbci	r29, 0x00	; 0
     9f0:	3a ab       	std	Y+50, r19	; 0x32
     9f2:	29 ab       	std	Y+49, r18	; 0x31
     9f4:	cf 55       	subi	r28, 0x5F	; 95
     9f6:	df 4f       	sbci	r29, 0xFF	; 255
     9f8:	28 81       	ld	r18, Y
     9fa:	39 81       	ldd	r19, Y+1	; 0x01
     9fc:	c1 5a       	subi	r28, 0xA1	; 161
     9fe:	d0 40       	sbci	r29, 0x00	; 0
     a00:	3c ab       	std	Y+52, r19	; 0x34
     a02:	2b ab       	std	Y+51, r18	; 0x33
     a04:	cd 55       	subi	r28, 0x5D	; 93
     a06:	df 4f       	sbci	r29, 0xFF	; 255
     a08:	28 81       	ld	r18, Y
     a0a:	39 81       	ldd	r19, Y+1	; 0x01
     a0c:	c3 5a       	subi	r28, 0xA3	; 163
     a0e:	d0 40       	sbci	r29, 0x00	; 0
     a10:	3e ab       	std	Y+54, r19	; 0x36
     a12:	2d ab       	std	Y+53, r18	; 0x35
     a14:	cb 55       	subi	r28, 0x5B	; 91
     a16:	df 4f       	sbci	r29, 0xFF	; 255
     a18:	28 81       	ld	r18, Y
     a1a:	39 81       	ldd	r19, Y+1	; 0x01
     a1c:	c5 5a       	subi	r28, 0xA5	; 165
     a1e:	d0 40       	sbci	r29, 0x00	; 0
     a20:	38 af       	std	Y+56, r19	; 0x38
     a22:	2f ab       	std	Y+55, r18	; 0x37
	int rel[] = {rel0, rel1, rel2, rel3};
     a24:	c9 55       	subi	r28, 0x59	; 89
     a26:	df 4f       	sbci	r29, 0xFF	; 255
     a28:	28 81       	ld	r18, Y
     a2a:	39 81       	ldd	r19, Y+1	; 0x01
     a2c:	c7 5a       	subi	r28, 0xA7	; 167
     a2e:	d0 40       	sbci	r29, 0x00	; 0
     a30:	3a af       	std	Y+58, r19	; 0x3a
     a32:	29 af       	std	Y+57, r18	; 0x39
     a34:	c7 55       	subi	r28, 0x57	; 87
     a36:	df 4f       	sbci	r29, 0xFF	; 255
     a38:	28 81       	ld	r18, Y
     a3a:	39 81       	ldd	r19, Y+1	; 0x01
     a3c:	c9 5a       	subi	r28, 0xA9	; 169
     a3e:	d0 40       	sbci	r29, 0x00	; 0
     a40:	3c af       	std	Y+60, r19	; 0x3c
     a42:	2b af       	std	Y+59, r18	; 0x3b
     a44:	c5 55       	subi	r28, 0x55	; 85
     a46:	df 4f       	sbci	r29, 0xFF	; 255
     a48:	28 81       	ld	r18, Y
     a4a:	39 81       	ldd	r19, Y+1	; 0x01
     a4c:	cb 5a       	subi	r28, 0xAB	; 171
     a4e:	d0 40       	sbci	r29, 0x00	; 0
     a50:	3e af       	std	Y+62, r19	; 0x3e
     a52:	2d af       	std	Y+61, r18	; 0x3d
     a54:	c3 55       	subi	r28, 0x53	; 83
     a56:	df 4f       	sbci	r29, 0xFF	; 255
     a58:	28 81       	ld	r18, Y
     a5a:	39 81       	ldd	r19, Y+1	; 0x01
     a5c:	cd 5a       	subi	r28, 0xAD	; 173
     a5e:	d0 40       	sbci	r29, 0x00	; 0
     a60:	21 96       	adiw	r28, 0x01	; 1
     a62:	3f af       	std	Y+63, r19	; 0x3f
     a64:	2e af       	std	Y+62, r18	; 0x3e
     a66:	21 97       	sbiw	r28, 0x01	; 1
	int rs[] = {rs0, rs1, rs2, rs3};
     a68:	c1 55       	subi	r28, 0x51	; 81
     a6a:	df 4f       	sbci	r29, 0xFF	; 255
     a6c:	28 81       	ld	r18, Y
     a6e:	39 81       	ldd	r19, Y+1	; 0x01
     a70:	cf 5a       	subi	r28, 0xAF	; 175
     a72:	d0 40       	sbci	r29, 0x00	; 0
     a74:	23 96       	adiw	r28, 0x03	; 3
     a76:	3f af       	std	Y+63, r19	; 0x3f
     a78:	2e af       	std	Y+62, r18	; 0x3e
     a7a:	23 97       	sbiw	r28, 0x03	; 3
     a7c:	cf 54       	subi	r28, 0x4F	; 79
     a7e:	df 4f       	sbci	r29, 0xFF	; 255
     a80:	28 81       	ld	r18, Y
     a82:	39 81       	ldd	r19, Y+1	; 0x01
     a84:	c1 5b       	subi	r28, 0xB1	; 177
     a86:	d0 40       	sbci	r29, 0x00	; 0
     a88:	25 96       	adiw	r28, 0x05	; 5
     a8a:	3f af       	std	Y+63, r19	; 0x3f
     a8c:	2e af       	std	Y+62, r18	; 0x3e
     a8e:	25 97       	sbiw	r28, 0x05	; 5
     a90:	cd 54       	subi	r28, 0x4D	; 77
     a92:	df 4f       	sbci	r29, 0xFF	; 255
     a94:	28 81       	ld	r18, Y
     a96:	39 81       	ldd	r19, Y+1	; 0x01
     a98:	c3 5b       	subi	r28, 0xB3	; 179
     a9a:	d0 40       	sbci	r29, 0x00	; 0
     a9c:	27 96       	adiw	r28, 0x07	; 7
     a9e:	3f af       	std	Y+63, r19	; 0x3f
     aa0:	2e af       	std	Y+62, r18	; 0x3e
     aa2:	27 97       	sbiw	r28, 0x07	; 7
     aa4:	cb 54       	subi	r28, 0x4B	; 75
     aa6:	df 4f       	sbci	r29, 0xFF	; 255
     aa8:	28 81       	ld	r18, Y
     aaa:	39 81       	ldd	r19, Y+1	; 0x01
     aac:	c5 5b       	subi	r28, 0xB5	; 181
     aae:	d0 40       	sbci	r29, 0x00	; 0
     ab0:	29 96       	adiw	r28, 0x09	; 9
     ab2:	3f af       	std	Y+63, r19	; 0x3f
     ab4:	2e af       	std	Y+62, r18	; 0x3e
     ab6:	29 97       	sbiw	r28, 0x09	; 9
	int eg[] = {eg0, eg1, eg2, eg3};
     ab8:	2b 96       	adiw	r28, 0x0b	; 11
     aba:	5f af       	std	Y+63, r21	; 0x3f
     abc:	4e af       	std	Y+62, r20	; 0x3e
     abe:	2b 97       	sbiw	r28, 0x0b	; 11
     ac0:	2d 96       	adiw	r28, 0x0d	; 13
     ac2:	bf af       	std	Y+63, r27	; 0x3f
     ac4:	ae af       	std	Y+62, r26	; 0x3e
     ac6:	2d 97       	sbiw	r28, 0x0d	; 13
     ac8:	2f 96       	adiw	r28, 0x0f	; 15
     aca:	3f ae       	std	Y+63, r3	; 0x3f
     acc:	2e ae       	std	Y+62, r2	; 0x3e
     ace:	2f 97       	sbiw	r28, 0x0f	; 15
     ad0:	6b 96       	adiw	r28, 0x1b	; 27
     ad2:	2e ad       	ldd	r18, Y+62	; 0x3e
     ad4:	3f ad       	ldd	r19, Y+63	; 0x3f
     ad6:	6b 97       	sbiw	r28, 0x1b	; 27
     ad8:	61 96       	adiw	r28, 0x11	; 17
     ada:	3f af       	std	Y+63, r19	; 0x3f
     adc:	2e af       	std	Y+62, r18	; 0x3e
     ade:	61 97       	sbiw	r28, 0x11	; 17
	
	// group 3
	int am[] = {am0, am1, am2, am3};
     ae0:	6d 96       	adiw	r28, 0x1d	; 29
     ae2:	ee ad       	ldd	r30, Y+62	; 0x3e
     ae4:	ff ad       	ldd	r31, Y+63	; 0x3f
     ae6:	6d 97       	sbiw	r28, 0x1d	; 29
     ae8:	63 96       	adiw	r28, 0x13	; 19
     aea:	ff af       	std	Y+63, r31	; 0x3f
     aec:	ee af       	std	Y+62, r30	; 0x3e
     aee:	63 97       	sbiw	r28, 0x13	; 19
     af0:	6f 96       	adiw	r28, 0x1f	; 31
     af2:	2e ad       	ldd	r18, Y+62	; 0x3e
     af4:	3f ad       	ldd	r19, Y+63	; 0x3f
     af6:	6f 97       	sbiw	r28, 0x1f	; 31
     af8:	65 96       	adiw	r28, 0x15	; 21
     afa:	3f af       	std	Y+63, r19	; 0x3f
     afc:	2e af       	std	Y+62, r18	; 0x3e
     afe:	65 97       	sbiw	r28, 0x15	; 21
     b00:	a1 96       	adiw	r28, 0x21	; 33
     b02:	ee ad       	ldd	r30, Y+62	; 0x3e
     b04:	ff ad       	ldd	r31, Y+63	; 0x3f
     b06:	a1 97       	sbiw	r28, 0x21	; 33
     b08:	67 96       	adiw	r28, 0x17	; 23
     b0a:	ff af       	std	Y+63, r31	; 0x3f
     b0c:	ee af       	std	Y+62, r30	; 0x3e
     b0e:	67 97       	sbiw	r28, 0x17	; 23
     b10:	a3 96       	adiw	r28, 0x23	; 35
     b12:	2e ad       	ldd	r18, Y+62	; 0x3e
     b14:	3f ad       	ldd	r19, Y+63	; 0x3f
     b16:	a3 97       	sbiw	r28, 0x23	; 35
     b18:	69 96       	adiw	r28, 0x19	; 25
     b1a:	3f af       	std	Y+63, r19	; 0x3f
     b1c:	2e af       	std	Y+62, r18	; 0x3e
     b1e:	69 97       	sbiw	r28, 0x19	; 25
	
	// write non-operator parameters to YM:
	writeToYM(0,alg,fb,0xB0,0,3,0,1,0,0,0); // algorithm & feedback share one register (group 1)
     b20:	1f 92       	push	r1
     b22:	1f 92       	push	r1
     b24:	81 2c       	mov	r8, r1
     b26:	aa 24       	eor	r10, r10
     b28:	a3 94       	inc	r10
     b2a:	c1 2c       	mov	r12, r1
     b2c:	0f 2e       	mov	r0, r31
     b2e:	f3 e0       	ldi	r31, 0x03	; 3
     b30:	ef 2e       	mov	r14, r31
     b32:	f0 2d       	mov	r31, r0
     b34:	00 e0       	ldi	r16, 0x00	; 0
     b36:	20 eb       	ldi	r18, 0xB0	; 176
     b38:	46 2f       	mov	r20, r22
     b3a:	68 2f       	mov	r22, r24
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
	
	if(lfo == 0){ // special case for LFO (group 3)
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	61 14       	cp	r6, r1
     b48:	71 04       	cpc	r7, r1
     b4a:	61 f4       	brne	.+24     	; 0xb64 <__stack+0x265>
		writeToYM(0,0,0,0x22,0,3,0,0,0,0,0);
     b4c:	1f 92       	push	r1
     b4e:	1f 92       	push	r1
     b50:	a1 2c       	mov	r10, r1
     b52:	22 e2       	ldi	r18, 0x22	; 34
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	13 c0       	rjmp	.+38     	; 0xb8a <__stack+0x28b>
	} else {
		writeToYM(0,lfo-1,1,0x22,0,3,0,0,0,0,0);
     b64:	6f ef       	ldi	r22, 0xFF	; 255
     b66:	66 0d       	add	r22, r6
     b68:	1f 92       	push	r1
     b6a:	1f 92       	push	r1
     b6c:	81 2c       	mov	r8, r1
     b6e:	a1 2c       	mov	r10, r1
     b70:	c1 2c       	mov	r12, r1
     b72:	0f 2e       	mov	r0, r31
     b74:	f3 e0       	ldi	r31, 0x03	; 3
     b76:	ef 2e       	mov	r14, r31
     b78:	f0 2d       	mov	r31, r0
     b7a:	00 e0       	ldi	r16, 0x00	; 0
     b7c:	22 e2       	ldi	r18, 0x22	; 34
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
	}
	
	writeToYM(0,vib,trem,0xB4,0,4,0,1,8,0,0); // vib & trem share one register (group 3)
     b8a:	1f 92       	push	r1
     b8c:	1f 92       	push	r1
     b8e:	68 94       	set
     b90:	88 24       	eor	r8, r8
     b92:	83 f8       	bld	r8, 3
     b94:	aa 24       	eor	r10, r10
     b96:	a3 94       	inc	r10
     b98:	c1 2c       	mov	r12, r1
     b9a:	68 94       	set
     b9c:	ee 24       	eor	r14, r14
     b9e:	e2 f8       	bld	r14, 2
     ba0:	00 e0       	ldi	r16, 0x00	; 0
     ba2:	24 eb       	ldi	r18, 0xB4	; 180
     ba4:	44 2d       	mov	r20, r4
     ba6:	65 2d       	mov	r22, r5
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
	
	// operator params:
	for(int i = 0; i < 4; i++){
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	41 2c       	mov	r4, r1
     bb4:	51 2c       	mov	r5, r1
     bb6:	08 c1       	rjmp	.+528    	; 0xdc8 <__stack+0x4c9>
		// change all operator params in program for each operator
		ym.multiple[i] = mult[i];
     bb8:	92 01       	movw	r18, r4
     bba:	22 0f       	add	r18, r18
     bbc:	33 1f       	adc	r19, r19
     bbe:	66 24       	eor	r6, r6
     bc0:	63 94       	inc	r6
     bc2:	71 2c       	mov	r7, r1
     bc4:	6c 0e       	add	r6, r28
     bc6:	7d 1e       	adc	r7, r29
     bc8:	62 0e       	add	r6, r18
     bca:	73 1e       	adc	r7, r19
     bcc:	f3 01       	movw	r30, r6
     bce:	60 81       	ld	r22, Z
     bd0:	41 81       	ldd	r20, Z+1	; 0x01
     bd2:	c9 01       	movw	r24, r18
     bd4:	82 50       	subi	r24, 0x02	; 2
     bd6:	9a 4f       	sbci	r25, 0xFA	; 250
     bd8:	fc 01       	movw	r30, r24
     bda:	e5 5b       	subi	r30, 0xB5	; 181
     bdc:	ff 4f       	sbci	r31, 0xFF	; 255
     bde:	60 83       	st	Z, r22
     be0:	41 83       	std	Z+1, r20	; 0x01
		ym.detune[i] = det[i];
     be2:	f3 01       	movw	r30, r6
     be4:	40 85       	ldd	r20, Z+8	; 0x08
     be6:	51 85       	ldd	r21, Z+9	; 0x09
     be8:	fc 01       	movw	r30, r24
     bea:	ed 5b       	subi	r30, 0xBD	; 189
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	40 83       	st	Z, r20
     bf0:	51 83       	std	Z+1, r21	; 0x01
		ym.totalLvl[i] = tl[i];
     bf2:	f3 01       	movw	r30, r6
     bf4:	10 89       	ldd	r17, Z+16	; 0x10
     bf6:	51 89       	ldd	r21, Z+17	; 0x11
     bf8:	fc 01       	movw	r30, r24
     bfa:	ed 5a       	subi	r30, 0xAD	; 173
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	10 83       	st	Z, r17
     c00:	51 83       	std	Z+1, r21	; 0x01
		ym.attack[i] = atk[i];
     c02:	f3 01       	movw	r30, r6
     c04:	b0 8c       	ldd	r11, Z+24	; 0x18
     c06:	51 8d       	ldd	r21, Z+25	; 0x19
     c08:	fc 01       	movw	r30, r24
     c0a:	e5 5a       	subi	r30, 0xA5	; 165
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	b0 82       	st	Z, r11
     c10:	51 83       	std	Z+1, r21	; 0x01
		ym.decay[i] = dcy[i];
     c12:	f3 01       	movw	r30, r6
     c14:	f0 a0       	ldd	r15, Z+32	; 0x20
     c16:	51 a1       	ldd	r21, Z+33	; 0x21
     c18:	fc 01       	movw	r30, r24
     c1a:	ed 59       	subi	r30, 0x9D	; 157
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	f0 82       	st	Z, r15
     c20:	51 83       	std	Z+1, r21	; 0x01
		ym.susLvl[i] = sl[i];
     c22:	f3 01       	movw	r30, r6
     c24:	f0 a5       	ldd	r31, Z+40	; 0x28
     c26:	6a 96       	adiw	r28, 0x1a	; 26
     c28:	ff af       	std	Y+63, r31	; 0x3f
     c2a:	6a 97       	sbiw	r28, 0x1a	; 26
     c2c:	f3 01       	movw	r30, r6
     c2e:	51 a5       	ldd	r21, Z+41	; 0x29
     c30:	fc 01       	movw	r30, r24
     c32:	e5 59       	subi	r30, 0x95	; 149
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	6a 96       	adiw	r28, 0x1a	; 26
     c38:	7f ad       	ldd	r23, Y+63	; 0x3f
     c3a:	6a 97       	sbiw	r28, 0x1a	; 26
     c3c:	70 83       	st	Z, r23
     c3e:	51 83       	std	Z+1, r21	; 0x01
		ym.susRate[i] = sr[i];
     c40:	f3 01       	movw	r30, r6
     c42:	f0 a9       	ldd	r31, Z+48	; 0x30
     c44:	6c 96       	adiw	r28, 0x1c	; 28
     c46:	ff af       	std	Y+63, r31	; 0x3f
     c48:	6c 97       	sbiw	r28, 0x1c	; 28
     c4a:	f3 01       	movw	r30, r6
     c4c:	51 a9       	ldd	r21, Z+49	; 0x31
     c4e:	fc 01       	movw	r30, r24
     c50:	ed 58       	subi	r30, 0x8D	; 141
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	6c 96       	adiw	r28, 0x1c	; 28
     c56:	7f ad       	ldd	r23, Y+63	; 0x3f
     c58:	6c 97       	sbiw	r28, 0x1c	; 28
     c5a:	70 83       	st	Z, r23
     c5c:	51 83       	std	Z+1, r21	; 0x01
		ym.rateScl[i] = rs[i];
     c5e:	e1 e4       	ldi	r30, 0x41	; 65
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	ec 0f       	add	r30, r28
     c64:	fd 1f       	adc	r31, r29
     c66:	e2 0f       	add	r30, r18
     c68:	f3 1f       	adc	r31, r19
     c6a:	90 80       	ld	r9, Z
     c6c:	51 81       	ldd	r21, Z+1	; 0x01
     c6e:	fc 01       	movw	r30, r24
     c70:	ed 57       	subi	r30, 0x7D	; 125
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	90 82       	st	Z, r9
     c76:	51 83       	std	Z+1, r21	; 0x01
		ym.ssgeg[i] = eg[i];
     c78:	e9 e4       	ldi	r30, 0x49	; 73
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	ec 0f       	add	r30, r28
     c7e:	fd 1f       	adc	r31, r29
     c80:	e2 0f       	add	r30, r18
     c82:	f3 1f       	adc	r31, r19
     c84:	20 80       	ld	r2, Z
     c86:	31 80       	ldd	r3, Z+1	; 0x01
     c88:	fc 01       	movw	r30, r24
     c8a:	e5 57       	subi	r30, 0x75	; 117
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	31 82       	std	Z+1, r3	; 0x01
     c90:	20 82       	st	Z, r2
		ym.amOn[i] = am[i];
     c92:	e1 e5       	ldi	r30, 0x51	; 81
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	ec 0f       	add	r30, r28
     c98:	fd 1f       	adc	r31, r29
     c9a:	e2 0f       	add	r30, r18
     c9c:	f3 1f       	adc	r31, r19
     c9e:	d0 80       	ld	r13, Z
     ca0:	21 81       	ldd	r18, Z+1	; 0x01
     ca2:	fc 01       	movw	r30, r24
     ca4:	e7 56       	subi	r30, 0x67	; 103
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	d0 82       	st	Z, r13
     caa:	21 83       	std	Z+1, r18	; 0x01
		
		// group 1
		writeToYM(i,mult[i],det[i],0x30,0,4,1,1,6,0,0);
     cac:	1f 92       	push	r1
     cae:	1f 92       	push	r1
     cb0:	0f 2e       	mov	r0, r31
     cb2:	f6 e0       	ldi	r31, 0x06	; 6
     cb4:	8f 2e       	mov	r8, r31
     cb6:	f0 2d       	mov	r31, r0
     cb8:	aa 24       	eor	r10, r10
     cba:	a3 94       	inc	r10
     cbc:	cc 24       	eor	r12, r12
     cbe:	c3 94       	inc	r12
     cc0:	68 94       	set
     cc2:	ee 24       	eor	r14, r14
     cc4:	e2 f8       	bld	r14, 2
     cc6:	00 e0       	ldi	r16, 0x00	; 0
     cc8:	20 e3       	ldi	r18, 0x30	; 48
     cca:	84 2d       	mov	r24, r4
     ccc:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		writeToYM(i,tl[i],0,0x40,0,0,1,1,9,127,0); // total level has its own reg
     cd0:	1f 92       	push	r1
     cd2:	8f e7       	ldi	r24, 0x7F	; 127
     cd4:	8f 93       	push	r24
     cd6:	0f 2e       	mov	r0, r31
     cd8:	f9 e0       	ldi	r31, 0x09	; 9
     cda:	8f 2e       	mov	r8, r31
     cdc:	f0 2d       	mov	r31, r0
     cde:	e1 2c       	mov	r14, r1
     ce0:	20 e4       	ldi	r18, 0x40	; 64
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	61 2f       	mov	r22, r17
     ce6:	84 2d       	mov	r24, r4
     ce8:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		
		// group 2
		writeToYM(i,atk[i],rs[i],0x50,0,6,1,1,1,31,0);
     cec:	1f 92       	push	r1
     cee:	1f e1       	ldi	r17, 0x1F	; 31
     cf0:	1f 93       	push	r17
     cf2:	88 24       	eor	r8, r8
     cf4:	83 94       	inc	r8
     cf6:	0f 2e       	mov	r0, r31
     cf8:	f6 e0       	ldi	r31, 0x06	; 6
     cfa:	ef 2e       	mov	r14, r31
     cfc:	f0 2d       	mov	r31, r0
     cfe:	20 e5       	ldi	r18, 0x50	; 80
     d00:	49 2d       	mov	r20, r9
     d02:	6b 2d       	mov	r22, r11
     d04:	84 2d       	mov	r24, r4
     d06:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		writeToYM(i,dcy[i],am[i],0x60,0,7,1,1,1,31,0); // AM is in group 4
     d0a:	1f 92       	push	r1
     d0c:	1f 93       	push	r17
     d0e:	0f 2e       	mov	r0, r31
     d10:	f7 e0       	ldi	r31, 0x07	; 7
     d12:	ef 2e       	mov	r14, r31
     d14:	f0 2d       	mov	r31, r0
     d16:	20 e6       	ldi	r18, 0x60	; 96
     d18:	4d 2d       	mov	r20, r13
     d1a:	6f 2d       	mov	r22, r15
     d1c:	84 2d       	mov	r24, r4
     d1e:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		writeToYM(i,sl[i],rel[i],0x80,4,0,1,1,3,15,15);
     d22:	f3 01       	movw	r30, r6
     d24:	40 ad       	ldd	r20, Z+56	; 0x38
     d26:	8f e0       	ldi	r24, 0x0F	; 15
     d28:	8f 93       	push	r24
     d2a:	8f 93       	push	r24
     d2c:	0f 2e       	mov	r0, r31
     d2e:	f3 e0       	ldi	r31, 0x03	; 3
     d30:	8f 2e       	mov	r8, r31
     d32:	f0 2d       	mov	r31, r0
     d34:	e1 2c       	mov	r14, r1
     d36:	04 e0       	ldi	r16, 0x04	; 4
     d38:	20 e8       	ldi	r18, 0x80	; 128
     d3a:	6a 96       	adiw	r28, 0x1a	; 26
     d3c:	6f ad       	ldd	r22, Y+63	; 0x3f
     d3e:	6a 97       	sbiw	r28, 0x1a	; 26
     d40:	84 2d       	mov	r24, r4
     d42:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		writeToYM(i,sr[i],0,0x70,0,0,1,1,7,31,0); // sustain rate has its own reg
     d46:	1f 92       	push	r1
     d48:	1f 93       	push	r17
     d4a:	0f 2e       	mov	r0, r31
     d4c:	f7 e0       	ldi	r31, 0x07	; 7
     d4e:	8f 2e       	mov	r8, r31
     d50:	f0 2d       	mov	r31, r0
     d52:	00 e0       	ldi	r16, 0x00	; 0
     d54:	20 e7       	ldi	r18, 0x70	; 112
     d56:	40 e0       	ldi	r20, 0x00	; 0
     d58:	6c 96       	adiw	r28, 0x1c	; 28
     d5a:	6f ad       	ldd	r22, Y+63	; 0x3f
     d5c:	6c 97       	sbiw	r28, 0x1c	; 28
     d5e:	84 2d       	mov	r24, r4
     d60:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		// finally, SSGEG
		if(eg[i] == 0){
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	21 14       	cp	r2, r1
     d70:	31 04       	cpc	r3, r1
     d72:	91 f4       	brne	.+36     	; 0xd98 <__stack+0x499>
			writeToYM(i,0,0,0x90,0,3,1,1,4,0,0);
     d74:	1f 92       	push	r1
     d76:	1f 92       	push	r1
     d78:	68 94       	set
     d7a:	88 24       	eor	r8, r8
     d7c:	82 f8       	bld	r8, 2
     d7e:	0f 2e       	mov	r0, r31
     d80:	f3 e0       	ldi	r31, 0x03	; 3
     d82:	ef 2e       	mov	r14, r31
     d84:	f0 2d       	mov	r31, r0
     d86:	20 e9       	ldi	r18, 0x90	; 144
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	84 2d       	mov	r24, r4
     d8e:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	15 c0       	rjmp	.+42     	; 0xdc2 <__stack+0x4c3>
		} else {
			writeToYM(i,eg[i]-1,1,0x90,0,3,1,1,0,0,0);
     d98:	6f ef       	ldi	r22, 0xFF	; 255
     d9a:	62 0d       	add	r22, r2
     d9c:	1f 92       	push	r1
     d9e:	1f 92       	push	r1
     da0:	81 2c       	mov	r8, r1
     da2:	aa 24       	eor	r10, r10
     da4:	a3 94       	inc	r10
     da6:	cc 24       	eor	r12, r12
     da8:	c3 94       	inc	r12
     daa:	0f 2e       	mov	r0, r31
     dac:	f3 e0       	ldi	r31, 0x03	; 3
     dae:	ef 2e       	mov	r14, r31
     db0:	f0 2d       	mov	r31, r0
     db2:	00 e0       	ldi	r16, 0x00	; 0
     db4:	20 e9       	ldi	r18, 0x90	; 144
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	84 2d       	mov	r24, r4
     dba:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
	}
	
	writeToYM(0,vib,trem,0xB4,0,4,0,1,8,0,0); // vib & trem share one register (group 3)
	
	// operator params:
	for(int i = 0; i < 4; i++){
     dc2:	3f ef       	ldi	r19, 0xFF	; 255
     dc4:	43 1a       	sub	r4, r19
     dc6:	53 0a       	sbc	r5, r19
     dc8:	54 e0       	ldi	r21, 0x04	; 4
     dca:	45 16       	cp	r4, r21
     dcc:	51 04       	cpc	r5, r1
     dce:	0c f4       	brge	.+2      	; 0xdd2 <__stack+0x4d3>
     dd0:	f3 ce       	rjmp	.-538    	; 0xbb8 <__stack+0x2b9>
			writeToYM(i,0,0,0x90,0,3,1,1,4,0,0);
		} else {
			writeToYM(i,eg[i]-1,1,0x90,0,3,1,1,0,0,0);
		}
	}
}
     dd2:	ce 59       	subi	r28, 0x9E	; 158
     dd4:	df 4f       	sbci	r29, 0xFF	; 255
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	df 90       	pop	r13
     dee:	cf 90       	pop	r12
     df0:	bf 90       	pop	r11
     df2:	af 90       	pop	r10
     df4:	9f 90       	pop	r9
     df6:	8f 90       	pop	r8
     df8:	7f 90       	pop	r7
     dfa:	6f 90       	pop	r6
     dfc:	5f 90       	pop	r5
     dfe:	4f 90       	pop	r4
     e00:	3f 90       	pop	r3
     e02:	2f 90       	pop	r2
     e04:	08 95       	ret

00000e06 <preset>:

// for each preset patch, format name to be printed and change values of params, both within program and within YM2612
void preset(){
     e06:	8f 92       	push	r8
     e08:	9f 92       	push	r9
     e0a:	af 92       	push	r10
     e0c:	bf 92       	push	r11
     e0e:	cf 92       	push	r12
     e10:	df 92       	push	r13
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
	switch(ym.patchNum){
     e1a:	e0 91 2a 06 	lds	r30, 0x062A	; 0x80062a <ym+0x2c>
     e1e:	f0 91 2b 06 	lds	r31, 0x062B	; 0x80062b <ym+0x2d>
     e22:	e2 31       	cpi	r30, 0x12	; 18
     e24:	f1 05       	cpc	r31, r1
     e26:	10 f0       	brcs	.+4      	; 0xe2c <preset+0x26>
     e28:	0c 94 27 11 	jmp	0x224e	; 0x224e <preset+0x1448>
     e2c:	ea 5b       	subi	r30, 0xBA	; 186
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__tablejump2__>
		case 0:
		// format patch name for printing
		sprintf(ym.patchName,"%s","ding dong piano");
     e34:	80 e1       	ldi	r24, 0x10	; 16
     e36:	e6 e5       	ldi	r30, 0x56	; 86
     e38:	f3 e0       	ldi	r31, 0x03	; 3
     e3a:	ac e2       	ldi	r26, 0x2C	; 44
     e3c:	b6 e0       	ldi	r27, 0x06	; 6
     e3e:	01 90       	ld	r0, Z+
     e40:	0d 92       	st	X+, r0
     e42:	8a 95       	dec	r24
     e44:	e1 f7       	brne	.-8      	; 0xe3e <preset+0x38>
		
		// params are grouped according to whether they're global, or groups of 4 for operator
		// i.e. alg,fb,lfo,vib,trem, mult[0-3], det[0-3], tl[0-3], atk[0-3], dec[0-3], sl[0-3], sr[0-3], rel[0-3], rs[0-3], eg[0-3], am[0-3]
			changeAllParams(7,0,0,0,0, 10,8,4,2, -3,1,3,0, 63,117,117,127, 0,0,0,0, 16,16,16,15, 0,0,0,0, 29,29,29,29, 1,1,1,1, 1,2,1,2, 0,0,0,0, 0,0,0,0);
     e46:	1f 92       	push	r1
     e48:	1f 92       	push	r1
     e4a:	1f 92       	push	r1
     e4c:	1f 92       	push	r1
     e4e:	1f 92       	push	r1
     e50:	1f 92       	push	r1
     e52:	1f 92       	push	r1
     e54:	1f 92       	push	r1
     e56:	1f 92       	push	r1
     e58:	1f 92       	push	r1
     e5a:	1f 92       	push	r1
     e5c:	1f 92       	push	r1
     e5e:	1f 92       	push	r1
     e60:	1f 92       	push	r1
     e62:	1f 92       	push	r1
     e64:	1f 92       	push	r1
     e66:	1f 92       	push	r1
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	9f 93       	push	r25
     e6c:	1f 92       	push	r1
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	8f 93       	push	r24
     e72:	1f 92       	push	r1
     e74:	9f 93       	push	r25
     e76:	1f 92       	push	r1
     e78:	8f 93       	push	r24
     e7a:	1f 92       	push	r1
     e7c:	8f 93       	push	r24
     e7e:	1f 92       	push	r1
     e80:	8f 93       	push	r24
     e82:	1f 92       	push	r1
     e84:	8f 93       	push	r24
     e86:	1f 92       	push	r1
     e88:	8f 93       	push	r24
     e8a:	1f 92       	push	r1
     e8c:	9d e1       	ldi	r25, 0x1D	; 29
     e8e:	9f 93       	push	r25
     e90:	1f 92       	push	r1
     e92:	9f 93       	push	r25
     e94:	1f 92       	push	r1
     e96:	9f 93       	push	r25
     e98:	1f 92       	push	r1
     e9a:	9f 93       	push	r25
     e9c:	1f 92       	push	r1
     e9e:	1f 92       	push	r1
     ea0:	1f 92       	push	r1
     ea2:	1f 92       	push	r1
     ea4:	1f 92       	push	r1
     ea6:	1f 92       	push	r1
     ea8:	1f 92       	push	r1
     eaa:	1f 92       	push	r1
     eac:	1f 92       	push	r1
     eae:	9f e0       	ldi	r25, 0x0F	; 15
     eb0:	9f 93       	push	r25
     eb2:	1f 92       	push	r1
     eb4:	90 e1       	ldi	r25, 0x10	; 16
     eb6:	9f 93       	push	r25
     eb8:	1f 92       	push	r1
     eba:	9f 93       	push	r25
     ebc:	1f 92       	push	r1
     ebe:	9f 93       	push	r25
     ec0:	1f 92       	push	r1
     ec2:	1f 92       	push	r1
     ec4:	1f 92       	push	r1
     ec6:	1f 92       	push	r1
     ec8:	1f 92       	push	r1
     eca:	1f 92       	push	r1
     ecc:	1f 92       	push	r1
     ece:	1f 92       	push	r1
     ed0:	1f 92       	push	r1
     ed2:	9f e7       	ldi	r25, 0x7F	; 127
     ed4:	9f 93       	push	r25
     ed6:	1f 92       	push	r1
     ed8:	95 e7       	ldi	r25, 0x75	; 117
     eda:	9f 93       	push	r25
     edc:	1f 92       	push	r1
     ede:	9f 93       	push	r25
     ee0:	1f 92       	push	r1
     ee2:	9f e3       	ldi	r25, 0x3F	; 63
     ee4:	9f 93       	push	r25
     ee6:	1f 92       	push	r1
     ee8:	1f 92       	push	r1
     eea:	1f 92       	push	r1
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	9f 93       	push	r25
     ef0:	1f 92       	push	r1
     ef2:	8f 93       	push	r24
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	8f 93       	push	r24
     ef8:	8d ef       	ldi	r24, 0xFD	; 253
     efa:	8f 93       	push	r24
     efc:	68 94       	set
     efe:	88 24       	eor	r8, r8
     f00:	81 f8       	bld	r8, 1
     f02:	91 2c       	mov	r9, r1
     f04:	68 94       	set
     f06:	aa 24       	eor	r10, r10
     f08:	a2 f8       	bld	r10, 2
     f0a:	b1 2c       	mov	r11, r1
     f0c:	68 94       	set
     f0e:	cc 24       	eor	r12, r12
     f10:	c3 f8       	bld	r12, 3
     f12:	d1 2c       	mov	r13, r1
     f14:	0f 2e       	mov	r0, r31
     f16:	fa e0       	ldi	r31, 0x0A	; 10
     f18:	ef 2e       	mov	r14, r31
     f1a:	f1 2c       	mov	r15, r1
     f1c:	f0 2d       	mov	r31, r0
     f1e:	00 e0       	ldi	r16, 0x00	; 0
     f20:	10 e0       	ldi	r17, 0x00	; 0
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	87 e0       	ldi	r24, 0x07	; 7
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
     f36:	8d b7       	in	r24, 0x3d	; 61
     f38:	9e b7       	in	r25, 0x3e	; 62
     f3a:	80 5b       	subi	r24, 0xB0	; 176
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	9e bf       	out	0x3e, r25	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	8d bf       	out	0x3d, r24	; 61
     f48:	0c 94 27 11 	jmp	0x224e	; 0x224e <preset+0x1448>
		case 1:
			sprintf(ym.patchName,"%s","toxic sludge");
     f4c:	8d e0       	ldi	r24, 0x0D	; 13
     f4e:	e6 e6       	ldi	r30, 0x66	; 102
     f50:	f3 e0       	ldi	r31, 0x03	; 3
     f52:	ac e2       	ldi	r26, 0x2C	; 44
     f54:	b6 e0       	ldi	r27, 0x06	; 6
     f56:	01 90       	ld	r0, Z+
     f58:	0d 92       	st	X+, r0
     f5a:	8a 95       	dec	r24
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <preset+0x150>
			changeAllParams(3,4,2,4,0, 1,10,2,6, 0,0,0,0, 127,127,127,127, 0,2,12,7, 4,0,23,31, 14,5,0,13, 29,16,0,29, 7,5,8,7, 1,1,1,1, 0,0,0,0, 0,0,0,0);
     f5e:	1f 92       	push	r1
     f60:	1f 92       	push	r1
     f62:	1f 92       	push	r1
     f64:	1f 92       	push	r1
     f66:	1f 92       	push	r1
     f68:	1f 92       	push	r1
     f6a:	1f 92       	push	r1
     f6c:	1f 92       	push	r1
     f6e:	1f 92       	push	r1
     f70:	1f 92       	push	r1
     f72:	1f 92       	push	r1
     f74:	1f 92       	push	r1
     f76:	1f 92       	push	r1
     f78:	1f 92       	push	r1
     f7a:	1f 92       	push	r1
     f7c:	1f 92       	push	r1
     f7e:	1f 92       	push	r1
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	8f 93       	push	r24
     f84:	1f 92       	push	r1
     f86:	8f 93       	push	r24
     f88:	1f 92       	push	r1
     f8a:	8f 93       	push	r24
     f8c:	1f 92       	push	r1
     f8e:	8f 93       	push	r24
     f90:	1f 92       	push	r1
     f92:	87 e0       	ldi	r24, 0x07	; 7
     f94:	8f 93       	push	r24
     f96:	1f 92       	push	r1
     f98:	98 e0       	ldi	r25, 0x08	; 8
     f9a:	9f 93       	push	r25
     f9c:	1f 92       	push	r1
     f9e:	95 e0       	ldi	r25, 0x05	; 5
     fa0:	9f 93       	push	r25
     fa2:	1f 92       	push	r1
     fa4:	8f 93       	push	r24
     fa6:	1f 92       	push	r1
     fa8:	2d e1       	ldi	r18, 0x1D	; 29
     faa:	2f 93       	push	r18
     fac:	1f 92       	push	r1
     fae:	1f 92       	push	r1
     fb0:	1f 92       	push	r1
     fb2:	30 e1       	ldi	r19, 0x10	; 16
     fb4:	3f 93       	push	r19
     fb6:	1f 92       	push	r1
     fb8:	2f 93       	push	r18
     fba:	1f 92       	push	r1
     fbc:	2d e0       	ldi	r18, 0x0D	; 13
     fbe:	2f 93       	push	r18
     fc0:	1f 92       	push	r1
     fc2:	1f 92       	push	r1
     fc4:	1f 92       	push	r1
     fc6:	9f 93       	push	r25
     fc8:	1f 92       	push	r1
     fca:	9e e0       	ldi	r25, 0x0E	; 14
     fcc:	9f 93       	push	r25
     fce:	1f 92       	push	r1
     fd0:	9f e1       	ldi	r25, 0x1F	; 31
     fd2:	9f 93       	push	r25
     fd4:	1f 92       	push	r1
     fd6:	97 e1       	ldi	r25, 0x17	; 23
     fd8:	9f 93       	push	r25
     fda:	1f 92       	push	r1
     fdc:	1f 92       	push	r1
     fde:	1f 92       	push	r1
     fe0:	94 e0       	ldi	r25, 0x04	; 4
     fe2:	9f 93       	push	r25
     fe4:	1f 92       	push	r1
     fe6:	8f 93       	push	r24
     fe8:	1f 92       	push	r1
     fea:	8c e0       	ldi	r24, 0x0C	; 12
     fec:	8f 93       	push	r24
     fee:	1f 92       	push	r1
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	8f 93       	push	r24
     ff4:	1f 92       	push	r1
     ff6:	1f 92       	push	r1
     ff8:	1f 92       	push	r1
     ffa:	8f e7       	ldi	r24, 0x7F	; 127
     ffc:	8f 93       	push	r24
     ffe:	1f 92       	push	r1
    1000:	8f 93       	push	r24
    1002:	1f 92       	push	r1
    1004:	8f 93       	push	r24
    1006:	1f 92       	push	r1
    1008:	8f 93       	push	r24
    100a:	1f 92       	push	r1
    100c:	1f 92       	push	r1
    100e:	1f 92       	push	r1
    1010:	1f 92       	push	r1
    1012:	1f 92       	push	r1
    1014:	1f 92       	push	r1
    1016:	1f 92       	push	r1
    1018:	1f 92       	push	r1
    101a:	0f 2e       	mov	r0, r31
    101c:	f6 e0       	ldi	r31, 0x06	; 6
    101e:	8f 2e       	mov	r8, r31
    1020:	91 2c       	mov	r9, r1
    1022:	f0 2d       	mov	r31, r0
    1024:	68 94       	set
    1026:	aa 24       	eor	r10, r10
    1028:	a1 f8       	bld	r10, 1
    102a:	b1 2c       	mov	r11, r1
    102c:	0f 2e       	mov	r0, r31
    102e:	fa e0       	ldi	r31, 0x0A	; 10
    1030:	cf 2e       	mov	r12, r31
    1032:	d1 2c       	mov	r13, r1
    1034:	f0 2d       	mov	r31, r0
    1036:	ee 24       	eor	r14, r14
    1038:	e3 94       	inc	r14
    103a:	f1 2c       	mov	r15, r1
    103c:	00 e0       	ldi	r16, 0x00	; 0
    103e:	10 e0       	ldi	r17, 0x00	; 0
    1040:	24 e0       	ldi	r18, 0x04	; 4
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	42 e0       	ldi	r20, 0x02	; 2
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	64 e0       	ldi	r22, 0x04	; 4
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    1054:	8d b7       	in	r24, 0x3d	; 61
    1056:	9e b7       	in	r25, 0x3e	; 62
    1058:	80 5b       	subi	r24, 0xB0	; 176
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	9e bf       	out	0x3e, r25	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	8d bf       	out	0x3d, r24	; 61
    1066:	0c 94 27 11 	jmp	0x224e	; 0x224e <preset+0x1448>
		case 2:
			sprintf(ym.patchName,"%s","wooden steel");
    106a:	8d e0       	ldi	r24, 0x0D	; 13
    106c:	e3 e7       	ldi	r30, 0x73	; 115
    106e:	f3 e0       	ldi	r31, 0x03	; 3
    1070:	ac e2       	ldi	r26, 0x2C	; 44
    1072:	b6 e0       	ldi	r27, 0x06	; 6
    1074:	01 90       	ld	r0, Z+
    1076:	0d 92       	st	X+, r0
    1078:	8a 95       	dec	r24
    107a:	e1 f7       	brne	.-8      	; 0x1074 <preset+0x26e>
			changeAllParams(4,0,0,0,0, 10,8,4,2, -3,1,3,0, 27,112,112,127, 0,0,9,0, 16,16,16,21, 0,0,0,0, 29,29,29,29, 7,7,7,10, 1,2,1,2, 0,0,0,0, 0,0,0,0);
    107c:	1f 92       	push	r1
    107e:	1f 92       	push	r1
    1080:	1f 92       	push	r1
    1082:	1f 92       	push	r1
    1084:	1f 92       	push	r1
    1086:	1f 92       	push	r1
    1088:	1f 92       	push	r1
    108a:	1f 92       	push	r1
    108c:	1f 92       	push	r1
    108e:	1f 92       	push	r1
    1090:	1f 92       	push	r1
    1092:	1f 92       	push	r1
    1094:	1f 92       	push	r1
    1096:	1f 92       	push	r1
    1098:	1f 92       	push	r1
    109a:	1f 92       	push	r1
    109c:	1f 92       	push	r1
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	8f 93       	push	r24
    10a2:	1f 92       	push	r1
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	9f 93       	push	r25
    10a8:	1f 92       	push	r1
    10aa:	8f 93       	push	r24
    10ac:	1f 92       	push	r1
    10ae:	9f 93       	push	r25
    10b0:	1f 92       	push	r1
    10b2:	8a e0       	ldi	r24, 0x0A	; 10
    10b4:	8f 93       	push	r24
    10b6:	1f 92       	push	r1
    10b8:	87 e0       	ldi	r24, 0x07	; 7
    10ba:	8f 93       	push	r24
    10bc:	1f 92       	push	r1
    10be:	8f 93       	push	r24
    10c0:	1f 92       	push	r1
    10c2:	8f 93       	push	r24
    10c4:	1f 92       	push	r1
    10c6:	8d e1       	ldi	r24, 0x1D	; 29
    10c8:	8f 93       	push	r24
    10ca:	1f 92       	push	r1
    10cc:	8f 93       	push	r24
    10ce:	1f 92       	push	r1
    10d0:	8f 93       	push	r24
    10d2:	1f 92       	push	r1
    10d4:	8f 93       	push	r24
    10d6:	1f 92       	push	r1
    10d8:	1f 92       	push	r1
    10da:	1f 92       	push	r1
    10dc:	1f 92       	push	r1
    10de:	1f 92       	push	r1
    10e0:	1f 92       	push	r1
    10e2:	1f 92       	push	r1
    10e4:	1f 92       	push	r1
    10e6:	1f 92       	push	r1
    10e8:	85 e1       	ldi	r24, 0x15	; 21
    10ea:	8f 93       	push	r24
    10ec:	1f 92       	push	r1
    10ee:	80 e1       	ldi	r24, 0x10	; 16
    10f0:	8f 93       	push	r24
    10f2:	1f 92       	push	r1
    10f4:	8f 93       	push	r24
    10f6:	1f 92       	push	r1
    10f8:	8f 93       	push	r24
    10fa:	1f 92       	push	r1
    10fc:	1f 92       	push	r1
    10fe:	1f 92       	push	r1
    1100:	89 e0       	ldi	r24, 0x09	; 9
    1102:	8f 93       	push	r24
    1104:	1f 92       	push	r1
    1106:	1f 92       	push	r1
    1108:	1f 92       	push	r1
    110a:	1f 92       	push	r1
    110c:	1f 92       	push	r1
    110e:	8f e7       	ldi	r24, 0x7F	; 127
    1110:	8f 93       	push	r24
    1112:	1f 92       	push	r1
    1114:	80 e7       	ldi	r24, 0x70	; 112
    1116:	8f 93       	push	r24
    1118:	1f 92       	push	r1
    111a:	8f 93       	push	r24
    111c:	1f 92       	push	r1
    111e:	8b e1       	ldi	r24, 0x1B	; 27
    1120:	8f 93       	push	r24
    1122:	1f 92       	push	r1
    1124:	1f 92       	push	r1
    1126:	1f 92       	push	r1
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	8f 93       	push	r24
    112c:	1f 92       	push	r1
    112e:	9f 93       	push	r25
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	8f 93       	push	r24
    1134:	8d ef       	ldi	r24, 0xFD	; 253
    1136:	8f 93       	push	r24
    1138:	68 94       	set
    113a:	88 24       	eor	r8, r8
    113c:	81 f8       	bld	r8, 1
    113e:	91 2c       	mov	r9, r1
    1140:	68 94       	set
    1142:	aa 24       	eor	r10, r10
    1144:	a2 f8       	bld	r10, 2
    1146:	b1 2c       	mov	r11, r1
    1148:	68 94       	set
    114a:	cc 24       	eor	r12, r12
    114c:	c3 f8       	bld	r12, 3
    114e:	d1 2c       	mov	r13, r1
    1150:	0f 2e       	mov	r0, r31
    1152:	fa e0       	ldi	r31, 0x0A	; 10
    1154:	ef 2e       	mov	r14, r31
    1156:	f1 2c       	mov	r15, r1
    1158:	f0 2d       	mov	r31, r0
    115a:	00 e0       	ldi	r16, 0x00	; 0
    115c:	10 e0       	ldi	r17, 0x00	; 0
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	84 e0       	ldi	r24, 0x04	; 4
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    1172:	8d b7       	in	r24, 0x3d	; 61
    1174:	9e b7       	in	r25, 0x3e	; 62
    1176:	80 5b       	subi	r24, 0xB0	; 176
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	9e bf       	out	0x3e, r25	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	8d bf       	out	0x3d, r24	; 61
    1184:	0c 94 27 11 	jmp	0x224e	; 0x224e <preset+0x1448>
		case 3:
			sprintf(ym.patchName,"%s","steel drum pad");
    1188:	8f e0       	ldi	r24, 0x0F	; 15
    118a:	e0 e8       	ldi	r30, 0x80	; 128
    118c:	f3 e0       	ldi	r31, 0x03	; 3
    118e:	ac e2       	ldi	r26, 0x2C	; 44
    1190:	b6 e0       	ldi	r27, 0x06	; 6
    1192:	01 90       	ld	r0, Z+
    1194:	0d 92       	st	X+, r0
    1196:	8a 95       	dec	r24
    1198:	e1 f7       	brne	.-8      	; 0x1192 <preset+0x38c>
			changeAllParams(5,3,3,0,3, 10,8,6,2, -3,1,3,0, 100,117,117,127, 10,26,25,0, 15,23,16,21, 13,7,12,0, 29,29,29,29, 9,1,19,11, 1,2,1,2, 0,0,0,0, 0,0,1,0);
    119a:	1f 92       	push	r1
    119c:	1f 92       	push	r1
    119e:	1f 92       	push	r1
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	8f 93       	push	r24
    11a4:	1f 92       	push	r1
    11a6:	1f 92       	push	r1
    11a8:	1f 92       	push	r1
    11aa:	1f 92       	push	r1
    11ac:	1f 92       	push	r1
    11ae:	1f 92       	push	r1
    11b0:	1f 92       	push	r1
    11b2:	1f 92       	push	r1
    11b4:	1f 92       	push	r1
    11b6:	1f 92       	push	r1
    11b8:	1f 92       	push	r1
    11ba:	1f 92       	push	r1
    11bc:	1f 92       	push	r1
    11be:	92 e0       	ldi	r25, 0x02	; 2
    11c0:	9f 93       	push	r25
    11c2:	1f 92       	push	r1
    11c4:	8f 93       	push	r24
    11c6:	1f 92       	push	r1
    11c8:	9f 93       	push	r25
    11ca:	1f 92       	push	r1
    11cc:	8f 93       	push	r24
    11ce:	1f 92       	push	r1
    11d0:	9b e0       	ldi	r25, 0x0B	; 11
    11d2:	9f 93       	push	r25
    11d4:	1f 92       	push	r1
    11d6:	93 e1       	ldi	r25, 0x13	; 19
    11d8:	9f 93       	push	r25
    11da:	1f 92       	push	r1
    11dc:	8f 93       	push	r24
    11de:	1f 92       	push	r1
    11e0:	99 e0       	ldi	r25, 0x09	; 9
    11e2:	9f 93       	push	r25
    11e4:	1f 92       	push	r1
    11e6:	9d e1       	ldi	r25, 0x1D	; 29
    11e8:	9f 93       	push	r25
    11ea:	1f 92       	push	r1
    11ec:	9f 93       	push	r25
    11ee:	1f 92       	push	r1
    11f0:	9f 93       	push	r25
    11f2:	1f 92       	push	r1
    11f4:	9f 93       	push	r25
    11f6:	1f 92       	push	r1
    11f8:	1f 92       	push	r1
    11fa:	1f 92       	push	r1
    11fc:	9c e0       	ldi	r25, 0x0C	; 12
    11fe:	9f 93       	push	r25
    1200:	1f 92       	push	r1
    1202:	97 e0       	ldi	r25, 0x07	; 7
    1204:	9f 93       	push	r25
    1206:	1f 92       	push	r1
    1208:	9d e0       	ldi	r25, 0x0D	; 13
    120a:	9f 93       	push	r25
    120c:	1f 92       	push	r1
    120e:	95 e1       	ldi	r25, 0x15	; 21
    1210:	9f 93       	push	r25
    1212:	1f 92       	push	r1
    1214:	90 e1       	ldi	r25, 0x10	; 16
    1216:	9f 93       	push	r25
    1218:	1f 92       	push	r1
    121a:	97 e1       	ldi	r25, 0x17	; 23
    121c:	9f 93       	push	r25
    121e:	1f 92       	push	r1
    1220:	9f e0       	ldi	r25, 0x0F	; 15
    1222:	9f 93       	push	r25
    1224:	1f 92       	push	r1
    1226:	1f 92       	push	r1
    1228:	1f 92       	push	r1
    122a:	99 e1       	ldi	r25, 0x19	; 25
    122c:	9f 93       	push	r25
    122e:	1f 92       	push	r1
    1230:	9a e1       	ldi	r25, 0x1A	; 26
    1232:	9f 93       	push	r25
    1234:	1f 92       	push	r1
    1236:	9a e0       	ldi	r25, 0x0A	; 10
    1238:	9f 93       	push	r25
    123a:	1f 92       	push	r1
    123c:	9f e7       	ldi	r25, 0x7F	; 127
    123e:	9f 93       	push	r25
    1240:	1f 92       	push	r1
    1242:	95 e7       	ldi	r25, 0x75	; 117
    1244:	9f 93       	push	r25
    1246:	1f 92       	push	r1
    1248:	9f 93       	push	r25
    124a:	1f 92       	push	r1
    124c:	94 e6       	ldi	r25, 0x64	; 100
    124e:	9f 93       	push	r25
    1250:	1f 92       	push	r1
    1252:	1f 92       	push	r1
    1254:	1f 92       	push	r1
    1256:	93 e0       	ldi	r25, 0x03	; 3
    1258:	9f 93       	push	r25
    125a:	1f 92       	push	r1
    125c:	8f 93       	push	r24
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	8f 93       	push	r24
    1262:	8d ef       	ldi	r24, 0xFD	; 253
    1264:	8f 93       	push	r24
    1266:	68 94       	set
    1268:	88 24       	eor	r8, r8
    126a:	81 f8       	bld	r8, 1
    126c:	91 2c       	mov	r9, r1
    126e:	0f 2e       	mov	r0, r31
    1270:	f6 e0       	ldi	r31, 0x06	; 6
    1272:	af 2e       	mov	r10, r31
    1274:	b1 2c       	mov	r11, r1
    1276:	f0 2d       	mov	r31, r0
    1278:	68 94       	set
    127a:	cc 24       	eor	r12, r12
    127c:	c3 f8       	bld	r12, 3
    127e:	d1 2c       	mov	r13, r1
    1280:	0f 2e       	mov	r0, r31
    1282:	fa e0       	ldi	r31, 0x0A	; 10
    1284:	ef 2e       	mov	r14, r31
    1286:	f1 2c       	mov	r15, r1
    1288:	f0 2d       	mov	r31, r0
    128a:	03 e0       	ldi	r16, 0x03	; 3
    128c:	10 e0       	ldi	r17, 0x00	; 0
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	43 e0       	ldi	r20, 0x03	; 3
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	63 e0       	ldi	r22, 0x03	; 3
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	85 e0       	ldi	r24, 0x05	; 5
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    12a2:	8d b7       	in	r24, 0x3d	; 61
    12a4:	9e b7       	in	r25, 0x3e	; 62
    12a6:	80 5b       	subi	r24, 0xB0	; 176
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	9e bf       	out	0x3e, r25	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	8d bf       	out	0x3d, r24	; 61
    12b4:	cc c7       	rjmp	.+3992   	; 0x224e <preset+0x1448>
		case 4:
			sprintf(ym.patchName,"%s","(un)naturhythm");
    12b6:	8f e0       	ldi	r24, 0x0F	; 15
    12b8:	ef e8       	ldi	r30, 0x8F	; 143
    12ba:	f3 e0       	ldi	r31, 0x03	; 3
    12bc:	ac e2       	ldi	r26, 0x2C	; 44
    12be:	b6 e0       	ldi	r27, 0x06	; 6
    12c0:	01 90       	ld	r0, Z+
    12c2:	0d 92       	st	X+, r0
    12c4:	8a 95       	dec	r24
    12c6:	e1 f7       	brne	.-8      	; 0x12c0 <preset+0x4ba>
			changeAllParams(0,6,1,6,2, 10,8,1,2, -3,1,3,0, 88,112,112,127, 14,17,14,8, 18,19,19,22, 0,0,0,15, 29,29,29,29, 6,6,6,8, 2,1,2,1, 3,1,3,0, 1,1,1,0);
    12c8:	1f 92       	push	r1
    12ca:	1f 92       	push	r1
    12cc:	1f 92       	push	r1
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	8f 93       	push	r24
    12d2:	1f 92       	push	r1
    12d4:	8f 93       	push	r24
    12d6:	1f 92       	push	r1
    12d8:	8f 93       	push	r24
    12da:	1f 92       	push	r1
    12dc:	1f 92       	push	r1
    12de:	1f 92       	push	r1
    12e0:	23 e0       	ldi	r18, 0x03	; 3
    12e2:	2f 93       	push	r18
    12e4:	1f 92       	push	r1
    12e6:	8f 93       	push	r24
    12e8:	1f 92       	push	r1
    12ea:	2f 93       	push	r18
    12ec:	1f 92       	push	r1
    12ee:	8f 93       	push	r24
    12f0:	1f 92       	push	r1
    12f2:	92 e0       	ldi	r25, 0x02	; 2
    12f4:	9f 93       	push	r25
    12f6:	1f 92       	push	r1
    12f8:	8f 93       	push	r24
    12fa:	1f 92       	push	r1
    12fc:	9f 93       	push	r25
    12fe:	1f 92       	push	r1
    1300:	38 e0       	ldi	r19, 0x08	; 8
    1302:	3f 93       	push	r19
    1304:	1f 92       	push	r1
    1306:	96 e0       	ldi	r25, 0x06	; 6
    1308:	9f 93       	push	r25
    130a:	1f 92       	push	r1
    130c:	9f 93       	push	r25
    130e:	1f 92       	push	r1
    1310:	9f 93       	push	r25
    1312:	1f 92       	push	r1
    1314:	9d e1       	ldi	r25, 0x1D	; 29
    1316:	9f 93       	push	r25
    1318:	1f 92       	push	r1
    131a:	9f 93       	push	r25
    131c:	1f 92       	push	r1
    131e:	9f 93       	push	r25
    1320:	1f 92       	push	r1
    1322:	9f 93       	push	r25
    1324:	1f 92       	push	r1
    1326:	9f e0       	ldi	r25, 0x0F	; 15
    1328:	9f 93       	push	r25
    132a:	1f 92       	push	r1
    132c:	1f 92       	push	r1
    132e:	1f 92       	push	r1
    1330:	1f 92       	push	r1
    1332:	1f 92       	push	r1
    1334:	1f 92       	push	r1
    1336:	1f 92       	push	r1
    1338:	96 e1       	ldi	r25, 0x16	; 22
    133a:	9f 93       	push	r25
    133c:	1f 92       	push	r1
    133e:	93 e1       	ldi	r25, 0x13	; 19
    1340:	9f 93       	push	r25
    1342:	1f 92       	push	r1
    1344:	9f 93       	push	r25
    1346:	1f 92       	push	r1
    1348:	92 e1       	ldi	r25, 0x12	; 18
    134a:	9f 93       	push	r25
    134c:	1f 92       	push	r1
    134e:	3f 93       	push	r19
    1350:	1f 92       	push	r1
    1352:	9e e0       	ldi	r25, 0x0E	; 14
    1354:	9f 93       	push	r25
    1356:	1f 92       	push	r1
    1358:	31 e1       	ldi	r19, 0x11	; 17
    135a:	3f 93       	push	r19
    135c:	1f 92       	push	r1
    135e:	9f 93       	push	r25
    1360:	1f 92       	push	r1
    1362:	9f e7       	ldi	r25, 0x7F	; 127
    1364:	9f 93       	push	r25
    1366:	1f 92       	push	r1
    1368:	90 e7       	ldi	r25, 0x70	; 112
    136a:	9f 93       	push	r25
    136c:	1f 92       	push	r1
    136e:	9f 93       	push	r25
    1370:	1f 92       	push	r1
    1372:	98 e5       	ldi	r25, 0x58	; 88
    1374:	9f 93       	push	r25
    1376:	1f 92       	push	r1
    1378:	1f 92       	push	r1
    137a:	1f 92       	push	r1
    137c:	2f 93       	push	r18
    137e:	1f 92       	push	r1
    1380:	8f 93       	push	r24
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	8f 93       	push	r24
    1386:	8d ef       	ldi	r24, 0xFD	; 253
    1388:	8f 93       	push	r24
    138a:	68 94       	set
    138c:	88 24       	eor	r8, r8
    138e:	81 f8       	bld	r8, 1
    1390:	91 2c       	mov	r9, r1
    1392:	aa 24       	eor	r10, r10
    1394:	a3 94       	inc	r10
    1396:	b1 2c       	mov	r11, r1
    1398:	68 94       	set
    139a:	cc 24       	eor	r12, r12
    139c:	c3 f8       	bld	r12, 3
    139e:	d1 2c       	mov	r13, r1
    13a0:	0f 2e       	mov	r0, r31
    13a2:	fa e0       	ldi	r31, 0x0A	; 10
    13a4:	ef 2e       	mov	r14, r31
    13a6:	f1 2c       	mov	r15, r1
    13a8:	f0 2d       	mov	r31, r0
    13aa:	02 e0       	ldi	r16, 0x02	; 2
    13ac:	10 e0       	ldi	r17, 0x00	; 0
    13ae:	26 e0       	ldi	r18, 0x06	; 6
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	41 e0       	ldi	r20, 0x01	; 1
    13b4:	50 e0       	ldi	r21, 0x00	; 0
    13b6:	66 e0       	ldi	r22, 0x06	; 6
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    13c2:	8d b7       	in	r24, 0x3d	; 61
    13c4:	9e b7       	in	r25, 0x3e	; 62
    13c6:	80 5b       	subi	r24, 0xB0	; 176
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	9e bf       	out	0x3e, r25	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	8d bf       	out	0x3d, r24	; 61
    13d4:	3c c7       	rjmp	.+3704   	; 0x224e <preset+0x1448>
		case 5:
			sprintf(ym.patchName,"%s","reedy ripper");
    13d6:	8d e0       	ldi	r24, 0x0D	; 13
    13d8:	ee e9       	ldi	r30, 0x9E	; 158
    13da:	f3 e0       	ldi	r31, 0x03	; 3
    13dc:	ac e2       	ldi	r26, 0x2C	; 44
    13de:	b6 e0       	ldi	r27, 0x06	; 6
    13e0:	01 90       	ld	r0, Z+
    13e2:	0d 92       	st	X+, r0
    13e4:	8a 95       	dec	r24
    13e6:	e1 f7       	brne	.-8      	; 0x13e0 <preset+0x5da>
			changeAllParams(2,5,0,0,0, 1,2,7,2, 3,-3,3,0, 126,97,106,127, 16,19,27,10, 27,22,26,21, 13,10,12,12, 31,31,31,27, 8,8,8,8, 1,1,1,1, 0,0,0,0, 0,0,0,0);
    13e8:	1f 92       	push	r1
    13ea:	1f 92       	push	r1
    13ec:	1f 92       	push	r1
    13ee:	1f 92       	push	r1
    13f0:	1f 92       	push	r1
    13f2:	1f 92       	push	r1
    13f4:	1f 92       	push	r1
    13f6:	1f 92       	push	r1
    13f8:	1f 92       	push	r1
    13fa:	1f 92       	push	r1
    13fc:	1f 92       	push	r1
    13fe:	1f 92       	push	r1
    1400:	1f 92       	push	r1
    1402:	1f 92       	push	r1
    1404:	1f 92       	push	r1
    1406:	1f 92       	push	r1
    1408:	1f 92       	push	r1
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	8f 93       	push	r24
    140e:	1f 92       	push	r1
    1410:	8f 93       	push	r24
    1412:	1f 92       	push	r1
    1414:	8f 93       	push	r24
    1416:	1f 92       	push	r1
    1418:	8f 93       	push	r24
    141a:	1f 92       	push	r1
    141c:	88 e0       	ldi	r24, 0x08	; 8
    141e:	8f 93       	push	r24
    1420:	1f 92       	push	r1
    1422:	8f 93       	push	r24
    1424:	1f 92       	push	r1
    1426:	8f 93       	push	r24
    1428:	1f 92       	push	r1
    142a:	8f 93       	push	r24
    142c:	1f 92       	push	r1
    142e:	8b e1       	ldi	r24, 0x1B	; 27
    1430:	8f 93       	push	r24
    1432:	1f 92       	push	r1
    1434:	9f e1       	ldi	r25, 0x1F	; 31
    1436:	9f 93       	push	r25
    1438:	1f 92       	push	r1
    143a:	9f 93       	push	r25
    143c:	1f 92       	push	r1
    143e:	9f 93       	push	r25
    1440:	1f 92       	push	r1
    1442:	9c e0       	ldi	r25, 0x0C	; 12
    1444:	9f 93       	push	r25
    1446:	1f 92       	push	r1
    1448:	9f 93       	push	r25
    144a:	1f 92       	push	r1
    144c:	9a e0       	ldi	r25, 0x0A	; 10
    144e:	9f 93       	push	r25
    1450:	1f 92       	push	r1
    1452:	2d e0       	ldi	r18, 0x0D	; 13
    1454:	2f 93       	push	r18
    1456:	1f 92       	push	r1
    1458:	25 e1       	ldi	r18, 0x15	; 21
    145a:	2f 93       	push	r18
    145c:	1f 92       	push	r1
    145e:	2a e1       	ldi	r18, 0x1A	; 26
    1460:	2f 93       	push	r18
    1462:	1f 92       	push	r1
    1464:	26 e1       	ldi	r18, 0x16	; 22
    1466:	2f 93       	push	r18
    1468:	1f 92       	push	r1
    146a:	8f 93       	push	r24
    146c:	1f 92       	push	r1
    146e:	9f 93       	push	r25
    1470:	1f 92       	push	r1
    1472:	8f 93       	push	r24
    1474:	1f 92       	push	r1
    1476:	83 e1       	ldi	r24, 0x13	; 19
    1478:	8f 93       	push	r24
    147a:	1f 92       	push	r1
    147c:	80 e1       	ldi	r24, 0x10	; 16
    147e:	8f 93       	push	r24
    1480:	1f 92       	push	r1
    1482:	8f e7       	ldi	r24, 0x7F	; 127
    1484:	8f 93       	push	r24
    1486:	1f 92       	push	r1
    1488:	8a e6       	ldi	r24, 0x6A	; 106
    148a:	8f 93       	push	r24
    148c:	1f 92       	push	r1
    148e:	81 e6       	ldi	r24, 0x61	; 97
    1490:	8f 93       	push	r24
    1492:	1f 92       	push	r1
    1494:	8e e7       	ldi	r24, 0x7E	; 126
    1496:	8f 93       	push	r24
    1498:	1f 92       	push	r1
    149a:	1f 92       	push	r1
    149c:	1f 92       	push	r1
    149e:	83 e0       	ldi	r24, 0x03	; 3
    14a0:	8f 93       	push	r24
    14a2:	9f ef       	ldi	r25, 0xFF	; 255
    14a4:	9f 93       	push	r25
    14a6:	9d ef       	ldi	r25, 0xFD	; 253
    14a8:	9f 93       	push	r25
    14aa:	1f 92       	push	r1
    14ac:	8f 93       	push	r24
    14ae:	68 94       	set
    14b0:	88 24       	eor	r8, r8
    14b2:	81 f8       	bld	r8, 1
    14b4:	91 2c       	mov	r9, r1
    14b6:	0f 2e       	mov	r0, r31
    14b8:	f7 e0       	ldi	r31, 0x07	; 7
    14ba:	af 2e       	mov	r10, r31
    14bc:	b1 2c       	mov	r11, r1
    14be:	f0 2d       	mov	r31, r0
    14c0:	68 94       	set
    14c2:	cc 24       	eor	r12, r12
    14c4:	c1 f8       	bld	r12, 1
    14c6:	d1 2c       	mov	r13, r1
    14c8:	ee 24       	eor	r14, r14
    14ca:	e3 94       	inc	r14
    14cc:	f1 2c       	mov	r15, r1
    14ce:	00 e0       	ldi	r16, 0x00	; 0
    14d0:	10 e0       	ldi	r17, 0x00	; 0
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	65 e0       	ldi	r22, 0x05	; 5
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    14e6:	8d b7       	in	r24, 0x3d	; 61
    14e8:	9e b7       	in	r25, 0x3e	; 62
    14ea:	80 5b       	subi	r24, 0xB0	; 176
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	9e bf       	out	0x3e, r25	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	8d bf       	out	0x3d, r24	; 61
    14f8:	aa c6       	rjmp	.+3412   	; 0x224e <preset+0x1448>
		case 6:
			sprintf(ym.patchName,"%s","sawlike");
    14fa:	88 e0       	ldi	r24, 0x08	; 8
    14fc:	eb ea       	ldi	r30, 0xAB	; 171
    14fe:	f3 e0       	ldi	r31, 0x03	; 3
    1500:	ac e2       	ldi	r26, 0x2C	; 44
    1502:	b6 e0       	ldi	r27, 0x06	; 6
    1504:	01 90       	ld	r0, Z+
    1506:	0d 92       	st	X+, r0
    1508:	8a 95       	dec	r24
    150a:	e1 f7       	brne	.-8      	; 0x1504 <preset+0x6fe>
			changeAllParams(7,4,0,0,0, 4,2,1,2, -2,2,1,-1, 124,117,120,127, 0,0,0,0, 16,23,31,12, 0,0,0,0, 29,29,0,18, 1,1,1,1, 1,1,1,1, 0,0,0,0, 0,0,0,0);
    150c:	1f 92       	push	r1
    150e:	1f 92       	push	r1
    1510:	1f 92       	push	r1
    1512:	1f 92       	push	r1
    1514:	1f 92       	push	r1
    1516:	1f 92       	push	r1
    1518:	1f 92       	push	r1
    151a:	1f 92       	push	r1
    151c:	1f 92       	push	r1
    151e:	1f 92       	push	r1
    1520:	1f 92       	push	r1
    1522:	1f 92       	push	r1
    1524:	1f 92       	push	r1
    1526:	1f 92       	push	r1
    1528:	1f 92       	push	r1
    152a:	1f 92       	push	r1
    152c:	1f 92       	push	r1
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	8f 93       	push	r24
    1532:	1f 92       	push	r1
    1534:	8f 93       	push	r24
    1536:	1f 92       	push	r1
    1538:	8f 93       	push	r24
    153a:	1f 92       	push	r1
    153c:	8f 93       	push	r24
    153e:	1f 92       	push	r1
    1540:	8f 93       	push	r24
    1542:	1f 92       	push	r1
    1544:	8f 93       	push	r24
    1546:	1f 92       	push	r1
    1548:	8f 93       	push	r24
    154a:	1f 92       	push	r1
    154c:	8f 93       	push	r24
    154e:	1f 92       	push	r1
    1550:	92 e1       	ldi	r25, 0x12	; 18
    1552:	9f 93       	push	r25
    1554:	1f 92       	push	r1
    1556:	1f 92       	push	r1
    1558:	1f 92       	push	r1
    155a:	9d e1       	ldi	r25, 0x1D	; 29
    155c:	9f 93       	push	r25
    155e:	1f 92       	push	r1
    1560:	9f 93       	push	r25
    1562:	1f 92       	push	r1
    1564:	1f 92       	push	r1
    1566:	1f 92       	push	r1
    1568:	1f 92       	push	r1
    156a:	1f 92       	push	r1
    156c:	1f 92       	push	r1
    156e:	1f 92       	push	r1
    1570:	1f 92       	push	r1
    1572:	1f 92       	push	r1
    1574:	9c e0       	ldi	r25, 0x0C	; 12
    1576:	9f 93       	push	r25
    1578:	1f 92       	push	r1
    157a:	9f e1       	ldi	r25, 0x1F	; 31
    157c:	9f 93       	push	r25
    157e:	1f 92       	push	r1
    1580:	97 e1       	ldi	r25, 0x17	; 23
    1582:	9f 93       	push	r25
    1584:	1f 92       	push	r1
    1586:	90 e1       	ldi	r25, 0x10	; 16
    1588:	9f 93       	push	r25
    158a:	1f 92       	push	r1
    158c:	1f 92       	push	r1
    158e:	1f 92       	push	r1
    1590:	1f 92       	push	r1
    1592:	1f 92       	push	r1
    1594:	1f 92       	push	r1
    1596:	1f 92       	push	r1
    1598:	1f 92       	push	r1
    159a:	1f 92       	push	r1
    159c:	9f e7       	ldi	r25, 0x7F	; 127
    159e:	9f 93       	push	r25
    15a0:	1f 92       	push	r1
    15a2:	98 e7       	ldi	r25, 0x78	; 120
    15a4:	9f 93       	push	r25
    15a6:	1f 92       	push	r1
    15a8:	95 e7       	ldi	r25, 0x75	; 117
    15aa:	9f 93       	push	r25
    15ac:	1f 92       	push	r1
    15ae:	9c e7       	ldi	r25, 0x7C	; 124
    15b0:	9f 93       	push	r25
    15b2:	9f ef       	ldi	r25, 0xFF	; 255
    15b4:	9f 93       	push	r25
    15b6:	9f 93       	push	r25
    15b8:	1f 92       	push	r1
    15ba:	8f 93       	push	r24
    15bc:	1f 92       	push	r1
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	8f 93       	push	r24
    15c2:	9f 93       	push	r25
    15c4:	8e ef       	ldi	r24, 0xFE	; 254
    15c6:	8f 93       	push	r24
    15c8:	68 94       	set
    15ca:	88 24       	eor	r8, r8
    15cc:	81 f8       	bld	r8, 1
    15ce:	91 2c       	mov	r9, r1
    15d0:	aa 24       	eor	r10, r10
    15d2:	a3 94       	inc	r10
    15d4:	b1 2c       	mov	r11, r1
    15d6:	68 94       	set
    15d8:	cc 24       	eor	r12, r12
    15da:	c1 f8       	bld	r12, 1
    15dc:	d1 2c       	mov	r13, r1
    15de:	68 94       	set
    15e0:	ee 24       	eor	r14, r14
    15e2:	e2 f8       	bld	r14, 2
    15e4:	f1 2c       	mov	r15, r1
    15e6:	00 e0       	ldi	r16, 0x00	; 0
    15e8:	10 e0       	ldi	r17, 0x00	; 0
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	64 e0       	ldi	r22, 0x04	; 4
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	87 e0       	ldi	r24, 0x07	; 7
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    15fe:	8d b7       	in	r24, 0x3d	; 61
    1600:	9e b7       	in	r25, 0x3e	; 62
    1602:	80 5b       	subi	r24, 0xB0	; 176
    1604:	9f 4f       	sbci	r25, 0xFF	; 255
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	9e bf       	out	0x3e, r25	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	8d bf       	out	0x3d, r24	; 61
    1610:	1e c6       	rjmp	.+3132   	; 0x224e <preset+0x1448>
		case 7:
			sprintf(ym.patchName,"%s","tuned bounce");
    1612:	8d e0       	ldi	r24, 0x0D	; 13
    1614:	e3 eb       	ldi	r30, 0xB3	; 179
    1616:	f3 e0       	ldi	r31, 0x03	; 3
    1618:	ac e2       	ldi	r26, 0x2C	; 44
    161a:	b6 e0       	ldi	r27, 0x06	; 6
    161c:	01 90       	ld	r0, Z+
    161e:	0d 92       	st	X+, r0
    1620:	8a 95       	dec	r24
    1622:	e1 f7       	brne	.-8      	; 0x161c <preset+0x816>
			changeAllParams(3,0,0,0,0, 4,6,3,4, -3,2,3,-1, 111,79,118,127, 11,14,2,1, 15,20,10,17, 0,0,0,0, 29,29,29,29, 9,1,10,9, 2,2,1,2, 0,0,0,0, 0,0,0,0);
    1624:	1f 92       	push	r1
    1626:	1f 92       	push	r1
    1628:	1f 92       	push	r1
    162a:	1f 92       	push	r1
    162c:	1f 92       	push	r1
    162e:	1f 92       	push	r1
    1630:	1f 92       	push	r1
    1632:	1f 92       	push	r1
    1634:	1f 92       	push	r1
    1636:	1f 92       	push	r1
    1638:	1f 92       	push	r1
    163a:	1f 92       	push	r1
    163c:	1f 92       	push	r1
    163e:	1f 92       	push	r1
    1640:	1f 92       	push	r1
    1642:	1f 92       	push	r1
    1644:	1f 92       	push	r1
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	8f 93       	push	r24
    164a:	1f 92       	push	r1
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	2f 93       	push	r18
    1650:	1f 92       	push	r1
    1652:	8f 93       	push	r24
    1654:	1f 92       	push	r1
    1656:	8f 93       	push	r24
    1658:	1f 92       	push	r1
    165a:	99 e0       	ldi	r25, 0x09	; 9
    165c:	9f 93       	push	r25
    165e:	1f 92       	push	r1
    1660:	3a e0       	ldi	r19, 0x0A	; 10
    1662:	3f 93       	push	r19
    1664:	1f 92       	push	r1
    1666:	2f 93       	push	r18
    1668:	1f 92       	push	r1
    166a:	9f 93       	push	r25
    166c:	1f 92       	push	r1
    166e:	9d e1       	ldi	r25, 0x1D	; 29
    1670:	9f 93       	push	r25
    1672:	1f 92       	push	r1
    1674:	9f 93       	push	r25
    1676:	1f 92       	push	r1
    1678:	9f 93       	push	r25
    167a:	1f 92       	push	r1
    167c:	9f 93       	push	r25
    167e:	1f 92       	push	r1
    1680:	1f 92       	push	r1
    1682:	1f 92       	push	r1
    1684:	1f 92       	push	r1
    1686:	1f 92       	push	r1
    1688:	1f 92       	push	r1
    168a:	1f 92       	push	r1
    168c:	1f 92       	push	r1
    168e:	1f 92       	push	r1
    1690:	91 e1       	ldi	r25, 0x11	; 17
    1692:	9f 93       	push	r25
    1694:	1f 92       	push	r1
    1696:	3f 93       	push	r19
    1698:	1f 92       	push	r1
    169a:	94 e1       	ldi	r25, 0x14	; 20
    169c:	9f 93       	push	r25
    169e:	1f 92       	push	r1
    16a0:	9f e0       	ldi	r25, 0x0F	; 15
    16a2:	9f 93       	push	r25
    16a4:	1f 92       	push	r1
    16a6:	2f 93       	push	r18
    16a8:	1f 92       	push	r1
    16aa:	8f 93       	push	r24
    16ac:	1f 92       	push	r1
    16ae:	9e e0       	ldi	r25, 0x0E	; 14
    16b0:	9f 93       	push	r25
    16b2:	1f 92       	push	r1
    16b4:	9b e0       	ldi	r25, 0x0B	; 11
    16b6:	9f 93       	push	r25
    16b8:	1f 92       	push	r1
    16ba:	9f e7       	ldi	r25, 0x7F	; 127
    16bc:	9f 93       	push	r25
    16be:	1f 92       	push	r1
    16c0:	96 e7       	ldi	r25, 0x76	; 118
    16c2:	9f 93       	push	r25
    16c4:	1f 92       	push	r1
    16c6:	9f e4       	ldi	r25, 0x4F	; 79
    16c8:	9f 93       	push	r25
    16ca:	1f 92       	push	r1
    16cc:	9f e6       	ldi	r25, 0x6F	; 111
    16ce:	9f 93       	push	r25
    16d0:	9f ef       	ldi	r25, 0xFF	; 255
    16d2:	9f 93       	push	r25
    16d4:	9f 93       	push	r25
    16d6:	1f 92       	push	r1
    16d8:	23 e0       	ldi	r18, 0x03	; 3
    16da:	2f 93       	push	r18
    16dc:	1f 92       	push	r1
    16de:	8f 93       	push	r24
    16e0:	9f 93       	push	r25
    16e2:	8d ef       	ldi	r24, 0xFD	; 253
    16e4:	8f 93       	push	r24
    16e6:	68 94       	set
    16e8:	88 24       	eor	r8, r8
    16ea:	82 f8       	bld	r8, 2
    16ec:	91 2c       	mov	r9, r1
    16ee:	0f 2e       	mov	r0, r31
    16f0:	f3 e0       	ldi	r31, 0x03	; 3
    16f2:	af 2e       	mov	r10, r31
    16f4:	b1 2c       	mov	r11, r1
    16f6:	f0 2d       	mov	r31, r0
    16f8:	0f 2e       	mov	r0, r31
    16fa:	f6 e0       	ldi	r31, 0x06	; 6
    16fc:	cf 2e       	mov	r12, r31
    16fe:	d1 2c       	mov	r13, r1
    1700:	f0 2d       	mov	r31, r0
    1702:	68 94       	set
    1704:	ee 24       	eor	r14, r14
    1706:	e2 f8       	bld	r14, 2
    1708:	f1 2c       	mov	r15, r1
    170a:	00 e0       	ldi	r16, 0x00	; 0
    170c:	10 e0       	ldi	r17, 0x00	; 0
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    1722:	8d b7       	in	r24, 0x3d	; 61
    1724:	9e b7       	in	r25, 0x3e	; 62
    1726:	80 5b       	subi	r24, 0xB0	; 176
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	9e bf       	out	0x3e, r25	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	8d bf       	out	0x3d, r24	; 61
    1734:	8c c5       	rjmp	.+2840   	; 0x224e <preset+0x1448>
		case 8:
			sprintf(ym.patchName,"%s","morph metal");
    1736:	8c e0       	ldi	r24, 0x0C	; 12
    1738:	e0 ec       	ldi	r30, 0xC0	; 192
    173a:	f3 e0       	ldi	r31, 0x03	; 3
    173c:	ac e2       	ldi	r26, 0x2C	; 44
    173e:	b6 e0       	ldi	r27, 0x06	; 6
    1740:	01 90       	ld	r0, Z+
    1742:	0d 92       	st	X+, r0
    1744:	8a 95       	dec	r24
    1746:	e1 f7       	brne	.-8      	; 0x1740 <preset+0x93a>
			changeAllParams(3,4,0,0,0, 4,6,7,4, -1,2,3,-1, 111,117,118,127, 10,22,27,1, 15,20,17,21, 0,0,0,0, 29,29,31,29, 9,1,10,9, 2,2,1,2, 0,0,0,0, 0,0,0,0);
    1748:	1f 92       	push	r1
    174a:	1f 92       	push	r1
    174c:	1f 92       	push	r1
    174e:	1f 92       	push	r1
    1750:	1f 92       	push	r1
    1752:	1f 92       	push	r1
    1754:	1f 92       	push	r1
    1756:	1f 92       	push	r1
    1758:	1f 92       	push	r1
    175a:	1f 92       	push	r1
    175c:	1f 92       	push	r1
    175e:	1f 92       	push	r1
    1760:	1f 92       	push	r1
    1762:	1f 92       	push	r1
    1764:	1f 92       	push	r1
    1766:	1f 92       	push	r1
    1768:	1f 92       	push	r1
    176a:	92 e0       	ldi	r25, 0x02	; 2
    176c:	9f 93       	push	r25
    176e:	1f 92       	push	r1
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	8f 93       	push	r24
    1774:	1f 92       	push	r1
    1776:	9f 93       	push	r25
    1778:	1f 92       	push	r1
    177a:	9f 93       	push	r25
    177c:	1f 92       	push	r1
    177e:	29 e0       	ldi	r18, 0x09	; 9
    1780:	2f 93       	push	r18
    1782:	1f 92       	push	r1
    1784:	3a e0       	ldi	r19, 0x0A	; 10
    1786:	3f 93       	push	r19
    1788:	1f 92       	push	r1
    178a:	8f 93       	push	r24
    178c:	1f 92       	push	r1
    178e:	2f 93       	push	r18
    1790:	1f 92       	push	r1
    1792:	2d e1       	ldi	r18, 0x1D	; 29
    1794:	2f 93       	push	r18
    1796:	1f 92       	push	r1
    1798:	4f e1       	ldi	r20, 0x1F	; 31
    179a:	4f 93       	push	r20
    179c:	1f 92       	push	r1
    179e:	2f 93       	push	r18
    17a0:	1f 92       	push	r1
    17a2:	2f 93       	push	r18
    17a4:	1f 92       	push	r1
    17a6:	1f 92       	push	r1
    17a8:	1f 92       	push	r1
    17aa:	1f 92       	push	r1
    17ac:	1f 92       	push	r1
    17ae:	1f 92       	push	r1
    17b0:	1f 92       	push	r1
    17b2:	1f 92       	push	r1
    17b4:	1f 92       	push	r1
    17b6:	25 e1       	ldi	r18, 0x15	; 21
    17b8:	2f 93       	push	r18
    17ba:	1f 92       	push	r1
    17bc:	21 e1       	ldi	r18, 0x11	; 17
    17be:	2f 93       	push	r18
    17c0:	1f 92       	push	r1
    17c2:	24 e1       	ldi	r18, 0x14	; 20
    17c4:	2f 93       	push	r18
    17c6:	1f 92       	push	r1
    17c8:	2f e0       	ldi	r18, 0x0F	; 15
    17ca:	2f 93       	push	r18
    17cc:	1f 92       	push	r1
    17ce:	8f 93       	push	r24
    17d0:	1f 92       	push	r1
    17d2:	8b e1       	ldi	r24, 0x1B	; 27
    17d4:	8f 93       	push	r24
    17d6:	1f 92       	push	r1
    17d8:	86 e1       	ldi	r24, 0x16	; 22
    17da:	8f 93       	push	r24
    17dc:	1f 92       	push	r1
    17de:	3f 93       	push	r19
    17e0:	1f 92       	push	r1
    17e2:	8f e7       	ldi	r24, 0x7F	; 127
    17e4:	8f 93       	push	r24
    17e6:	1f 92       	push	r1
    17e8:	86 e7       	ldi	r24, 0x76	; 118
    17ea:	8f 93       	push	r24
    17ec:	1f 92       	push	r1
    17ee:	85 e7       	ldi	r24, 0x75	; 117
    17f0:	8f 93       	push	r24
    17f2:	1f 92       	push	r1
    17f4:	8f e6       	ldi	r24, 0x6F	; 111
    17f6:	8f 93       	push	r24
    17f8:	8f ef       	ldi	r24, 0xFF	; 255
    17fa:	8f 93       	push	r24
    17fc:	8f 93       	push	r24
    17fe:	1f 92       	push	r1
    1800:	23 e0       	ldi	r18, 0x03	; 3
    1802:	2f 93       	push	r18
    1804:	1f 92       	push	r1
    1806:	9f 93       	push	r25
    1808:	8f 93       	push	r24
    180a:	8f 93       	push	r24
    180c:	68 94       	set
    180e:	88 24       	eor	r8, r8
    1810:	82 f8       	bld	r8, 2
    1812:	91 2c       	mov	r9, r1
    1814:	0f 2e       	mov	r0, r31
    1816:	f7 e0       	ldi	r31, 0x07	; 7
    1818:	af 2e       	mov	r10, r31
    181a:	b1 2c       	mov	r11, r1
    181c:	f0 2d       	mov	r31, r0
    181e:	0f 2e       	mov	r0, r31
    1820:	f6 e0       	ldi	r31, 0x06	; 6
    1822:	cf 2e       	mov	r12, r31
    1824:	d1 2c       	mov	r13, r1
    1826:	f0 2d       	mov	r31, r0
    1828:	68 94       	set
    182a:	ee 24       	eor	r14, r14
    182c:	e2 f8       	bld	r14, 2
    182e:	f1 2c       	mov	r15, r1
    1830:	00 e0       	ldi	r16, 0x00	; 0
    1832:	10 e0       	ldi	r17, 0x00	; 0
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	64 e0       	ldi	r22, 0x04	; 4
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    1848:	8d b7       	in	r24, 0x3d	; 61
    184a:	9e b7       	in	r25, 0x3e	; 62
    184c:	80 5b       	subi	r24, 0xB0	; 176
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	9e bf       	out	0x3e, r25	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	8d bf       	out	0x3d, r24	; 61
    185a:	f9 c4       	rjmp	.+2546   	; 0x224e <preset+0x1448>
		case 9:
			sprintf(ym.patchName,"%s","get(s) nasty");
    185c:	8d e0       	ldi	r24, 0x0D	; 13
    185e:	ec ec       	ldi	r30, 0xCC	; 204
    1860:	f3 e0       	ldi	r31, 0x03	; 3
    1862:	ac e2       	ldi	r26, 0x2C	; 44
    1864:	b6 e0       	ldi	r27, 0x06	; 6
    1866:	01 90       	ld	r0, Z+
    1868:	0d 92       	st	X+, r0
    186a:	8a 95       	dec	r24
    186c:	e1 f7       	brne	.-8      	; 0x1866 <preset+0xa60>
			changeAllParams(3,5,0,0,0, 2,3,2,1, -2,-2,1,0, 116,118,119,127, 25,23,0,0, 25,27,19,24, 9,10,11,13, 31,31,31,31, 4,4,4,4, 1,1,1,1, 0,0,0,0, 0,0,0,0);
    186e:	1f 92       	push	r1
    1870:	1f 92       	push	r1
    1872:	1f 92       	push	r1
    1874:	1f 92       	push	r1
    1876:	1f 92       	push	r1
    1878:	1f 92       	push	r1
    187a:	1f 92       	push	r1
    187c:	1f 92       	push	r1
    187e:	1f 92       	push	r1
    1880:	1f 92       	push	r1
    1882:	1f 92       	push	r1
    1884:	1f 92       	push	r1
    1886:	1f 92       	push	r1
    1888:	1f 92       	push	r1
    188a:	1f 92       	push	r1
    188c:	1f 92       	push	r1
    188e:	1f 92       	push	r1
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	8f 93       	push	r24
    1894:	1f 92       	push	r1
    1896:	8f 93       	push	r24
    1898:	1f 92       	push	r1
    189a:	8f 93       	push	r24
    189c:	1f 92       	push	r1
    189e:	8f 93       	push	r24
    18a0:	1f 92       	push	r1
    18a2:	94 e0       	ldi	r25, 0x04	; 4
    18a4:	9f 93       	push	r25
    18a6:	1f 92       	push	r1
    18a8:	9f 93       	push	r25
    18aa:	1f 92       	push	r1
    18ac:	9f 93       	push	r25
    18ae:	1f 92       	push	r1
    18b0:	9f 93       	push	r25
    18b2:	1f 92       	push	r1
    18b4:	9f e1       	ldi	r25, 0x1F	; 31
    18b6:	9f 93       	push	r25
    18b8:	1f 92       	push	r1
    18ba:	9f 93       	push	r25
    18bc:	1f 92       	push	r1
    18be:	9f 93       	push	r25
    18c0:	1f 92       	push	r1
    18c2:	9f 93       	push	r25
    18c4:	1f 92       	push	r1
    18c6:	9d e0       	ldi	r25, 0x0D	; 13
    18c8:	9f 93       	push	r25
    18ca:	1f 92       	push	r1
    18cc:	9b e0       	ldi	r25, 0x0B	; 11
    18ce:	9f 93       	push	r25
    18d0:	1f 92       	push	r1
    18d2:	9a e0       	ldi	r25, 0x0A	; 10
    18d4:	9f 93       	push	r25
    18d6:	1f 92       	push	r1
    18d8:	99 e0       	ldi	r25, 0x09	; 9
    18da:	9f 93       	push	r25
    18dc:	1f 92       	push	r1
    18de:	98 e1       	ldi	r25, 0x18	; 24
    18e0:	9f 93       	push	r25
    18e2:	1f 92       	push	r1
    18e4:	93 e1       	ldi	r25, 0x13	; 19
    18e6:	9f 93       	push	r25
    18e8:	1f 92       	push	r1
    18ea:	9b e1       	ldi	r25, 0x1B	; 27
    18ec:	9f 93       	push	r25
    18ee:	1f 92       	push	r1
    18f0:	99 e1       	ldi	r25, 0x19	; 25
    18f2:	9f 93       	push	r25
    18f4:	1f 92       	push	r1
    18f6:	1f 92       	push	r1
    18f8:	1f 92       	push	r1
    18fa:	1f 92       	push	r1
    18fc:	1f 92       	push	r1
    18fe:	27 e1       	ldi	r18, 0x17	; 23
    1900:	2f 93       	push	r18
    1902:	1f 92       	push	r1
    1904:	9f 93       	push	r25
    1906:	1f 92       	push	r1
    1908:	9f e7       	ldi	r25, 0x7F	; 127
    190a:	9f 93       	push	r25
    190c:	1f 92       	push	r1
    190e:	97 e7       	ldi	r25, 0x77	; 119
    1910:	9f 93       	push	r25
    1912:	1f 92       	push	r1
    1914:	96 e7       	ldi	r25, 0x76	; 118
    1916:	9f 93       	push	r25
    1918:	1f 92       	push	r1
    191a:	94 e7       	ldi	r25, 0x74	; 116
    191c:	9f 93       	push	r25
    191e:	1f 92       	push	r1
    1920:	1f 92       	push	r1
    1922:	1f 92       	push	r1
    1924:	8f 93       	push	r24
    1926:	9f ef       	ldi	r25, 0xFF	; 255
    1928:	9f 93       	push	r25
    192a:	8e ef       	ldi	r24, 0xFE	; 254
    192c:	8f 93       	push	r24
    192e:	9f 93       	push	r25
    1930:	8f 93       	push	r24
    1932:	88 24       	eor	r8, r8
    1934:	83 94       	inc	r8
    1936:	91 2c       	mov	r9, r1
    1938:	68 94       	set
    193a:	aa 24       	eor	r10, r10
    193c:	a1 f8       	bld	r10, 1
    193e:	b1 2c       	mov	r11, r1
    1940:	0f 2e       	mov	r0, r31
    1942:	f3 e0       	ldi	r31, 0x03	; 3
    1944:	cf 2e       	mov	r12, r31
    1946:	d1 2c       	mov	r13, r1
    1948:	f0 2d       	mov	r31, r0
    194a:	68 94       	set
    194c:	ee 24       	eor	r14, r14
    194e:	e1 f8       	bld	r14, 1
    1950:	f1 2c       	mov	r15, r1
    1952:	00 e0       	ldi	r16, 0x00	; 0
    1954:	10 e0       	ldi	r17, 0x00	; 0
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	65 e0       	ldi	r22, 0x05	; 5
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	83 e0       	ldi	r24, 0x03	; 3
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    196a:	8d b7       	in	r24, 0x3d	; 61
    196c:	9e b7       	in	r25, 0x3e	; 62
    196e:	80 5b       	subi	r24, 0xB0	; 176
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	9e bf       	out	0x3e, r25	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	8d bf       	out	0x3d, r24	; 61
    197c:	68 c4       	rjmp	.+2256   	; 0x224e <preset+0x1448>
		case 10:
			sprintf(ym.patchName,"%s","flarp wobble");
    197e:	8d e0       	ldi	r24, 0x0D	; 13
    1980:	e9 ed       	ldi	r30, 0xD9	; 217
    1982:	f3 e0       	ldi	r31, 0x03	; 3
    1984:	ac e2       	ldi	r26, 0x2C	; 44
    1986:	b6 e0       	ldi	r27, 0x06	; 6
    1988:	01 90       	ld	r0, Z+
    198a:	0d 92       	st	X+, r0
    198c:	8a 95       	dec	r24
    198e:	e1 f7       	brne	.-8      	; 0x1988 <preset+0xb82>
			changeAllParams(5,5,2,5,2, 2,2,2,2, -1,1,3,0, 108,117,124,127, 8,6,12,7, 25,16,27,26, 4,0,0,0, 29,29,29,29, 4,1,3,2, 1,2,1,2, 0,0,0,0, 0,0,1,0);
    1990:	1f 92       	push	r1
    1992:	1f 92       	push	r1
    1994:	1f 92       	push	r1
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	8f 93       	push	r24
    199a:	1f 92       	push	r1
    199c:	1f 92       	push	r1
    199e:	1f 92       	push	r1
    19a0:	1f 92       	push	r1
    19a2:	1f 92       	push	r1
    19a4:	1f 92       	push	r1
    19a6:	1f 92       	push	r1
    19a8:	1f 92       	push	r1
    19aa:	1f 92       	push	r1
    19ac:	1f 92       	push	r1
    19ae:	1f 92       	push	r1
    19b0:	1f 92       	push	r1
    19b2:	1f 92       	push	r1
    19b4:	92 e0       	ldi	r25, 0x02	; 2
    19b6:	9f 93       	push	r25
    19b8:	1f 92       	push	r1
    19ba:	8f 93       	push	r24
    19bc:	1f 92       	push	r1
    19be:	9f 93       	push	r25
    19c0:	1f 92       	push	r1
    19c2:	8f 93       	push	r24
    19c4:	1f 92       	push	r1
    19c6:	9f 93       	push	r25
    19c8:	1f 92       	push	r1
    19ca:	23 e0       	ldi	r18, 0x03	; 3
    19cc:	2f 93       	push	r18
    19ce:	1f 92       	push	r1
    19d0:	8f 93       	push	r24
    19d2:	1f 92       	push	r1
    19d4:	34 e0       	ldi	r19, 0x04	; 4
    19d6:	3f 93       	push	r19
    19d8:	1f 92       	push	r1
    19da:	9d e1       	ldi	r25, 0x1D	; 29
    19dc:	9f 93       	push	r25
    19de:	1f 92       	push	r1
    19e0:	9f 93       	push	r25
    19e2:	1f 92       	push	r1
    19e4:	9f 93       	push	r25
    19e6:	1f 92       	push	r1
    19e8:	9f 93       	push	r25
    19ea:	1f 92       	push	r1
    19ec:	1f 92       	push	r1
    19ee:	1f 92       	push	r1
    19f0:	1f 92       	push	r1
    19f2:	1f 92       	push	r1
    19f4:	1f 92       	push	r1
    19f6:	1f 92       	push	r1
    19f8:	3f 93       	push	r19
    19fa:	1f 92       	push	r1
    19fc:	9a e1       	ldi	r25, 0x1A	; 26
    19fe:	9f 93       	push	r25
    1a00:	1f 92       	push	r1
    1a02:	9b e1       	ldi	r25, 0x1B	; 27
    1a04:	9f 93       	push	r25
    1a06:	1f 92       	push	r1
    1a08:	90 e1       	ldi	r25, 0x10	; 16
    1a0a:	9f 93       	push	r25
    1a0c:	1f 92       	push	r1
    1a0e:	99 e1       	ldi	r25, 0x19	; 25
    1a10:	9f 93       	push	r25
    1a12:	1f 92       	push	r1
    1a14:	97 e0       	ldi	r25, 0x07	; 7
    1a16:	9f 93       	push	r25
    1a18:	1f 92       	push	r1
    1a1a:	9c e0       	ldi	r25, 0x0C	; 12
    1a1c:	9f 93       	push	r25
    1a1e:	1f 92       	push	r1
    1a20:	96 e0       	ldi	r25, 0x06	; 6
    1a22:	9f 93       	push	r25
    1a24:	1f 92       	push	r1
    1a26:	98 e0       	ldi	r25, 0x08	; 8
    1a28:	9f 93       	push	r25
    1a2a:	1f 92       	push	r1
    1a2c:	9f e7       	ldi	r25, 0x7F	; 127
    1a2e:	9f 93       	push	r25
    1a30:	1f 92       	push	r1
    1a32:	9c e7       	ldi	r25, 0x7C	; 124
    1a34:	9f 93       	push	r25
    1a36:	1f 92       	push	r1
    1a38:	95 e7       	ldi	r25, 0x75	; 117
    1a3a:	9f 93       	push	r25
    1a3c:	1f 92       	push	r1
    1a3e:	9c e6       	ldi	r25, 0x6C	; 108
    1a40:	9f 93       	push	r25
    1a42:	1f 92       	push	r1
    1a44:	1f 92       	push	r1
    1a46:	1f 92       	push	r1
    1a48:	2f 93       	push	r18
    1a4a:	1f 92       	push	r1
    1a4c:	8f 93       	push	r24
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	8f 93       	push	r24
    1a52:	8f 93       	push	r24
    1a54:	68 94       	set
    1a56:	88 24       	eor	r8, r8
    1a58:	81 f8       	bld	r8, 1
    1a5a:	91 2c       	mov	r9, r1
    1a5c:	68 94       	set
    1a5e:	aa 24       	eor	r10, r10
    1a60:	a1 f8       	bld	r10, 1
    1a62:	b1 2c       	mov	r11, r1
    1a64:	68 94       	set
    1a66:	cc 24       	eor	r12, r12
    1a68:	c1 f8       	bld	r12, 1
    1a6a:	d1 2c       	mov	r13, r1
    1a6c:	68 94       	set
    1a6e:	ee 24       	eor	r14, r14
    1a70:	e1 f8       	bld	r14, 1
    1a72:	f1 2c       	mov	r15, r1
    1a74:	02 e0       	ldi	r16, 0x02	; 2
    1a76:	10 e0       	ldi	r17, 0x00	; 0
    1a78:	25 e0       	ldi	r18, 0x05	; 5
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	42 e0       	ldi	r20, 0x02	; 2
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	65 e0       	ldi	r22, 0x05	; 5
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	85 e0       	ldi	r24, 0x05	; 5
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    1a8c:	8d b7       	in	r24, 0x3d	; 61
    1a8e:	9e b7       	in	r25, 0x3e	; 62
    1a90:	80 5b       	subi	r24, 0xB0	; 176
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	9e bf       	out	0x3e, r25	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	8d bf       	out	0x3d, r24	; 61
    1a9e:	d7 c3       	rjmp	.+1966   	; 0x224e <preset+0x1448>
		case 11:
			sprintf(ym.patchName,"%s","pan flute");
    1aa0:	8a e0       	ldi	r24, 0x0A	; 10
    1aa2:	e6 ee       	ldi	r30, 0xE6	; 230
    1aa4:	f3 e0       	ldi	r31, 0x03	; 3
    1aa6:	ac e2       	ldi	r26, 0x2C	; 44
    1aa8:	b6 e0       	ldi	r27, 0x06	; 6
    1aaa:	01 90       	ld	r0, Z+
    1aac:	0d 92       	st	X+, r0
    1aae:	8a 95       	dec	r24
    1ab0:	e1 f7       	brne	.-8      	; 0x1aaa <preset+0xca4>
			changeAllParams(4,6,3,2,3, 4,5,4,4, -3,3,-2,0, 117,114,117,127, 3,22,29,18, 16,28,23,20, 0,0,0,0, 29,29,29,29, 7,7,8,7, 1,1,1,1, 0,0,0,0, 0,1,0,0);
    1ab2:	1f 92       	push	r1
    1ab4:	1f 92       	push	r1
    1ab6:	1f 92       	push	r1
    1ab8:	1f 92       	push	r1
    1aba:	1f 92       	push	r1
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	8f 93       	push	r24
    1ac0:	1f 92       	push	r1
    1ac2:	1f 92       	push	r1
    1ac4:	1f 92       	push	r1
    1ac6:	1f 92       	push	r1
    1ac8:	1f 92       	push	r1
    1aca:	1f 92       	push	r1
    1acc:	1f 92       	push	r1
    1ace:	1f 92       	push	r1
    1ad0:	1f 92       	push	r1
    1ad2:	1f 92       	push	r1
    1ad4:	1f 92       	push	r1
    1ad6:	8f 93       	push	r24
    1ad8:	1f 92       	push	r1
    1ada:	8f 93       	push	r24
    1adc:	1f 92       	push	r1
    1ade:	8f 93       	push	r24
    1ae0:	1f 92       	push	r1
    1ae2:	8f 93       	push	r24
    1ae4:	1f 92       	push	r1
    1ae6:	87 e0       	ldi	r24, 0x07	; 7
    1ae8:	8f 93       	push	r24
    1aea:	1f 92       	push	r1
    1aec:	98 e0       	ldi	r25, 0x08	; 8
    1aee:	9f 93       	push	r25
    1af0:	1f 92       	push	r1
    1af2:	8f 93       	push	r24
    1af4:	1f 92       	push	r1
    1af6:	8f 93       	push	r24
    1af8:	1f 92       	push	r1
    1afa:	8d e1       	ldi	r24, 0x1D	; 29
    1afc:	8f 93       	push	r24
    1afe:	1f 92       	push	r1
    1b00:	8f 93       	push	r24
    1b02:	1f 92       	push	r1
    1b04:	8f 93       	push	r24
    1b06:	1f 92       	push	r1
    1b08:	8f 93       	push	r24
    1b0a:	1f 92       	push	r1
    1b0c:	1f 92       	push	r1
    1b0e:	1f 92       	push	r1
    1b10:	1f 92       	push	r1
    1b12:	1f 92       	push	r1
    1b14:	1f 92       	push	r1
    1b16:	1f 92       	push	r1
    1b18:	1f 92       	push	r1
    1b1a:	1f 92       	push	r1
    1b1c:	94 e1       	ldi	r25, 0x14	; 20
    1b1e:	9f 93       	push	r25
    1b20:	1f 92       	push	r1
    1b22:	97 e1       	ldi	r25, 0x17	; 23
    1b24:	9f 93       	push	r25
    1b26:	1f 92       	push	r1
    1b28:	9c e1       	ldi	r25, 0x1C	; 28
    1b2a:	9f 93       	push	r25
    1b2c:	1f 92       	push	r1
    1b2e:	90 e1       	ldi	r25, 0x10	; 16
    1b30:	9f 93       	push	r25
    1b32:	1f 92       	push	r1
    1b34:	92 e1       	ldi	r25, 0x12	; 18
    1b36:	9f 93       	push	r25
    1b38:	1f 92       	push	r1
    1b3a:	8f 93       	push	r24
    1b3c:	1f 92       	push	r1
    1b3e:	86 e1       	ldi	r24, 0x16	; 22
    1b40:	8f 93       	push	r24
    1b42:	1f 92       	push	r1
    1b44:	93 e0       	ldi	r25, 0x03	; 3
    1b46:	9f 93       	push	r25
    1b48:	1f 92       	push	r1
    1b4a:	8f e7       	ldi	r24, 0x7F	; 127
    1b4c:	8f 93       	push	r24
    1b4e:	1f 92       	push	r1
    1b50:	85 e7       	ldi	r24, 0x75	; 117
    1b52:	8f 93       	push	r24
    1b54:	1f 92       	push	r1
    1b56:	22 e7       	ldi	r18, 0x72	; 114
    1b58:	2f 93       	push	r18
    1b5a:	1f 92       	push	r1
    1b5c:	8f 93       	push	r24
    1b5e:	1f 92       	push	r1
    1b60:	1f 92       	push	r1
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	8f 93       	push	r24
    1b66:	2e ef       	ldi	r18, 0xFE	; 254
    1b68:	2f 93       	push	r18
    1b6a:	1f 92       	push	r1
    1b6c:	9f 93       	push	r25
    1b6e:	8f 93       	push	r24
    1b70:	8d ef       	ldi	r24, 0xFD	; 253
    1b72:	8f 93       	push	r24
    1b74:	68 94       	set
    1b76:	88 24       	eor	r8, r8
    1b78:	82 f8       	bld	r8, 2
    1b7a:	91 2c       	mov	r9, r1
    1b7c:	68 94       	set
    1b7e:	aa 24       	eor	r10, r10
    1b80:	a2 f8       	bld	r10, 2
    1b82:	b1 2c       	mov	r11, r1
    1b84:	0f 2e       	mov	r0, r31
    1b86:	f5 e0       	ldi	r31, 0x05	; 5
    1b88:	cf 2e       	mov	r12, r31
    1b8a:	d1 2c       	mov	r13, r1
    1b8c:	f0 2d       	mov	r31, r0
    1b8e:	68 94       	set
    1b90:	ee 24       	eor	r14, r14
    1b92:	e2 f8       	bld	r14, 2
    1b94:	f1 2c       	mov	r15, r1
    1b96:	03 e0       	ldi	r16, 0x03	; 3
    1b98:	10 e0       	ldi	r17, 0x00	; 0
    1b9a:	22 e0       	ldi	r18, 0x02	; 2
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	43 e0       	ldi	r20, 0x03	; 3
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	66 e0       	ldi	r22, 0x06	; 6
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	84 e0       	ldi	r24, 0x04	; 4
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    1bae:	8d b7       	in	r24, 0x3d	; 61
    1bb0:	9e b7       	in	r25, 0x3e	; 62
    1bb2:	80 5b       	subi	r24, 0xB0	; 176
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	9e bf       	out	0x3e, r25	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	8d bf       	out	0x3d, r24	; 61
    1bc0:	46 c3       	rjmp	.+1676   	; 0x224e <preset+0x1448>
		case 12:
			sprintf(ym.patchName,"%s","deceptive bass");
    1bc2:	8f e0       	ldi	r24, 0x0F	; 15
    1bc4:	e0 ef       	ldi	r30, 0xF0	; 240
    1bc6:	f3 e0       	ldi	r31, 0x03	; 3
    1bc8:	ac e2       	ldi	r26, 0x2C	; 44
    1bca:	b6 e0       	ldi	r27, 0x06	; 6
    1bcc:	01 90       	ld	r0, Z+
    1bce:	0d 92       	st	X+, r0
    1bd0:	8a 95       	dec	r24
    1bd2:	e1 f7       	brne	.-8      	; 0x1bcc <preset+0xdc6>
			changeAllParams(5,2,5,0,1, 2,2,10,6, 0,0,0,0, 127,104,118,127, 27,16,0,0, 25,19,19,21, 5,0,12,0, 31,31,31,31, 9,8,8,8, 2,2,1,1, 0,1,0,0, 0,0,1,0);
    1bd4:	1f 92       	push	r1
    1bd6:	1f 92       	push	r1
    1bd8:	1f 92       	push	r1
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	8f 93       	push	r24
    1bde:	1f 92       	push	r1
    1be0:	1f 92       	push	r1
    1be2:	1f 92       	push	r1
    1be4:	1f 92       	push	r1
    1be6:	1f 92       	push	r1
    1be8:	1f 92       	push	r1
    1bea:	1f 92       	push	r1
    1bec:	1f 92       	push	r1
    1bee:	1f 92       	push	r1
    1bf0:	8f 93       	push	r24
    1bf2:	1f 92       	push	r1
    1bf4:	1f 92       	push	r1
    1bf6:	1f 92       	push	r1
    1bf8:	8f 93       	push	r24
    1bfa:	1f 92       	push	r1
    1bfc:	8f 93       	push	r24
    1bfe:	1f 92       	push	r1
    1c00:	82 e0       	ldi	r24, 0x02	; 2
    1c02:	8f 93       	push	r24
    1c04:	1f 92       	push	r1
    1c06:	8f 93       	push	r24
    1c08:	1f 92       	push	r1
    1c0a:	88 e0       	ldi	r24, 0x08	; 8
    1c0c:	8f 93       	push	r24
    1c0e:	1f 92       	push	r1
    1c10:	8f 93       	push	r24
    1c12:	1f 92       	push	r1
    1c14:	8f 93       	push	r24
    1c16:	1f 92       	push	r1
    1c18:	89 e0       	ldi	r24, 0x09	; 9
    1c1a:	8f 93       	push	r24
    1c1c:	1f 92       	push	r1
    1c1e:	8f e1       	ldi	r24, 0x1F	; 31
    1c20:	8f 93       	push	r24
    1c22:	1f 92       	push	r1
    1c24:	8f 93       	push	r24
    1c26:	1f 92       	push	r1
    1c28:	8f 93       	push	r24
    1c2a:	1f 92       	push	r1
    1c2c:	8f 93       	push	r24
    1c2e:	1f 92       	push	r1
    1c30:	1f 92       	push	r1
    1c32:	1f 92       	push	r1
    1c34:	8c e0       	ldi	r24, 0x0C	; 12
    1c36:	8f 93       	push	r24
    1c38:	1f 92       	push	r1
    1c3a:	1f 92       	push	r1
    1c3c:	1f 92       	push	r1
    1c3e:	85 e0       	ldi	r24, 0x05	; 5
    1c40:	8f 93       	push	r24
    1c42:	1f 92       	push	r1
    1c44:	85 e1       	ldi	r24, 0x15	; 21
    1c46:	8f 93       	push	r24
    1c48:	1f 92       	push	r1
    1c4a:	83 e1       	ldi	r24, 0x13	; 19
    1c4c:	8f 93       	push	r24
    1c4e:	1f 92       	push	r1
    1c50:	8f 93       	push	r24
    1c52:	1f 92       	push	r1
    1c54:	89 e1       	ldi	r24, 0x19	; 25
    1c56:	8f 93       	push	r24
    1c58:	1f 92       	push	r1
    1c5a:	1f 92       	push	r1
    1c5c:	1f 92       	push	r1
    1c5e:	1f 92       	push	r1
    1c60:	1f 92       	push	r1
    1c62:	80 e1       	ldi	r24, 0x10	; 16
    1c64:	8f 93       	push	r24
    1c66:	1f 92       	push	r1
    1c68:	8b e1       	ldi	r24, 0x1B	; 27
    1c6a:	8f 93       	push	r24
    1c6c:	1f 92       	push	r1
    1c6e:	8f e7       	ldi	r24, 0x7F	; 127
    1c70:	8f 93       	push	r24
    1c72:	1f 92       	push	r1
    1c74:	96 e7       	ldi	r25, 0x76	; 118
    1c76:	9f 93       	push	r25
    1c78:	1f 92       	push	r1
    1c7a:	98 e6       	ldi	r25, 0x68	; 104
    1c7c:	9f 93       	push	r25
    1c7e:	1f 92       	push	r1
    1c80:	8f 93       	push	r24
    1c82:	1f 92       	push	r1
    1c84:	1f 92       	push	r1
    1c86:	1f 92       	push	r1
    1c88:	1f 92       	push	r1
    1c8a:	1f 92       	push	r1
    1c8c:	1f 92       	push	r1
    1c8e:	1f 92       	push	r1
    1c90:	1f 92       	push	r1
    1c92:	0f 2e       	mov	r0, r31
    1c94:	f6 e0       	ldi	r31, 0x06	; 6
    1c96:	8f 2e       	mov	r8, r31
    1c98:	91 2c       	mov	r9, r1
    1c9a:	f0 2d       	mov	r31, r0
    1c9c:	0f 2e       	mov	r0, r31
    1c9e:	fa e0       	ldi	r31, 0x0A	; 10
    1ca0:	af 2e       	mov	r10, r31
    1ca2:	b1 2c       	mov	r11, r1
    1ca4:	f0 2d       	mov	r31, r0
    1ca6:	68 94       	set
    1ca8:	cc 24       	eor	r12, r12
    1caa:	c1 f8       	bld	r12, 1
    1cac:	d1 2c       	mov	r13, r1
    1cae:	68 94       	set
    1cb0:	ee 24       	eor	r14, r14
    1cb2:	e1 f8       	bld	r14, 1
    1cb4:	f1 2c       	mov	r15, r1
    1cb6:	01 e0       	ldi	r16, 0x01	; 1
    1cb8:	10 e0       	ldi	r17, 0x00	; 0
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	45 e0       	ldi	r20, 0x05	; 5
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	62 e0       	ldi	r22, 0x02	; 2
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	85 e0       	ldi	r24, 0x05	; 5
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    1cce:	8d b7       	in	r24, 0x3d	; 61
    1cd0:	9e b7       	in	r25, 0x3e	; 62
    1cd2:	80 5b       	subi	r24, 0xB0	; 176
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	9e bf       	out	0x3e, r25	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	8d bf       	out	0x3d, r24	; 61
    1ce0:	b6 c2       	rjmp	.+1388   	; 0x224e <preset+0x1448>
		case 13:
			sprintf(ym.patchName,"%s","jagged EP");
    1ce2:	8a e0       	ldi	r24, 0x0A	; 10
    1ce4:	ef ef       	ldi	r30, 0xFF	; 255
    1ce6:	f3 e0       	ldi	r31, 0x03	; 3
    1ce8:	ac e2       	ldi	r26, 0x2C	; 44
    1cea:	b6 e0       	ldi	r27, 0x06	; 6
    1cec:	01 90       	ld	r0, Z+
    1cee:	0d 92       	st	X+, r0
    1cf0:	8a 95       	dec	r24
    1cf2:	e1 f7       	brne	.-8      	; 0x1cec <preset+0xee6>
			changeAllParams(6,5,2,0,2, 7,3,14,3, -3,-1,3,1, 113,120,125,118, 0,0,25,0, 22,23,22,23, 11,11,11,11, 31,31,31,31, 10,8,8,8, 1,1,1,1, 0,0,0,0, 0,0,1,0);
    1cf4:	1f 92       	push	r1
    1cf6:	1f 92       	push	r1
    1cf8:	1f 92       	push	r1
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	8f 93       	push	r24
    1cfe:	1f 92       	push	r1
    1d00:	1f 92       	push	r1
    1d02:	1f 92       	push	r1
    1d04:	1f 92       	push	r1
    1d06:	1f 92       	push	r1
    1d08:	1f 92       	push	r1
    1d0a:	1f 92       	push	r1
    1d0c:	1f 92       	push	r1
    1d0e:	1f 92       	push	r1
    1d10:	1f 92       	push	r1
    1d12:	1f 92       	push	r1
    1d14:	1f 92       	push	r1
    1d16:	1f 92       	push	r1
    1d18:	8f 93       	push	r24
    1d1a:	1f 92       	push	r1
    1d1c:	8f 93       	push	r24
    1d1e:	1f 92       	push	r1
    1d20:	8f 93       	push	r24
    1d22:	1f 92       	push	r1
    1d24:	8f 93       	push	r24
    1d26:	1f 92       	push	r1
    1d28:	98 e0       	ldi	r25, 0x08	; 8
    1d2a:	9f 93       	push	r25
    1d2c:	1f 92       	push	r1
    1d2e:	9f 93       	push	r25
    1d30:	1f 92       	push	r1
    1d32:	9f 93       	push	r25
    1d34:	1f 92       	push	r1
    1d36:	9a e0       	ldi	r25, 0x0A	; 10
    1d38:	9f 93       	push	r25
    1d3a:	1f 92       	push	r1
    1d3c:	9f e1       	ldi	r25, 0x1F	; 31
    1d3e:	9f 93       	push	r25
    1d40:	1f 92       	push	r1
    1d42:	9f 93       	push	r25
    1d44:	1f 92       	push	r1
    1d46:	9f 93       	push	r25
    1d48:	1f 92       	push	r1
    1d4a:	9f 93       	push	r25
    1d4c:	1f 92       	push	r1
    1d4e:	9b e0       	ldi	r25, 0x0B	; 11
    1d50:	9f 93       	push	r25
    1d52:	1f 92       	push	r1
    1d54:	9f 93       	push	r25
    1d56:	1f 92       	push	r1
    1d58:	9f 93       	push	r25
    1d5a:	1f 92       	push	r1
    1d5c:	9f 93       	push	r25
    1d5e:	1f 92       	push	r1
    1d60:	27 e1       	ldi	r18, 0x17	; 23
    1d62:	2f 93       	push	r18
    1d64:	1f 92       	push	r1
    1d66:	96 e1       	ldi	r25, 0x16	; 22
    1d68:	9f 93       	push	r25
    1d6a:	1f 92       	push	r1
    1d6c:	2f 93       	push	r18
    1d6e:	1f 92       	push	r1
    1d70:	9f 93       	push	r25
    1d72:	1f 92       	push	r1
    1d74:	1f 92       	push	r1
    1d76:	1f 92       	push	r1
    1d78:	99 e1       	ldi	r25, 0x19	; 25
    1d7a:	9f 93       	push	r25
    1d7c:	1f 92       	push	r1
    1d7e:	1f 92       	push	r1
    1d80:	1f 92       	push	r1
    1d82:	1f 92       	push	r1
    1d84:	1f 92       	push	r1
    1d86:	96 e7       	ldi	r25, 0x76	; 118
    1d88:	9f 93       	push	r25
    1d8a:	1f 92       	push	r1
    1d8c:	9d e7       	ldi	r25, 0x7D	; 125
    1d8e:	9f 93       	push	r25
    1d90:	1f 92       	push	r1
    1d92:	98 e7       	ldi	r25, 0x78	; 120
    1d94:	9f 93       	push	r25
    1d96:	1f 92       	push	r1
    1d98:	91 e7       	ldi	r25, 0x71	; 113
    1d9a:	9f 93       	push	r25
    1d9c:	1f 92       	push	r1
    1d9e:	8f 93       	push	r24
    1da0:	1f 92       	push	r1
    1da2:	83 e0       	ldi	r24, 0x03	; 3
    1da4:	8f 93       	push	r24
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	8f 93       	push	r24
    1daa:	8f 93       	push	r24
    1dac:	8f 93       	push	r24
    1dae:	8d ef       	ldi	r24, 0xFD	; 253
    1db0:	8f 93       	push	r24
    1db2:	0f 2e       	mov	r0, r31
    1db4:	f3 e0       	ldi	r31, 0x03	; 3
    1db6:	8f 2e       	mov	r8, r31
    1db8:	91 2c       	mov	r9, r1
    1dba:	f0 2d       	mov	r31, r0
    1dbc:	0f 2e       	mov	r0, r31
    1dbe:	fe e0       	ldi	r31, 0x0E	; 14
    1dc0:	af 2e       	mov	r10, r31
    1dc2:	b1 2c       	mov	r11, r1
    1dc4:	f0 2d       	mov	r31, r0
    1dc6:	0f 2e       	mov	r0, r31
    1dc8:	f3 e0       	ldi	r31, 0x03	; 3
    1dca:	cf 2e       	mov	r12, r31
    1dcc:	d1 2c       	mov	r13, r1
    1dce:	f0 2d       	mov	r31, r0
    1dd0:	0f 2e       	mov	r0, r31
    1dd2:	f7 e0       	ldi	r31, 0x07	; 7
    1dd4:	ef 2e       	mov	r14, r31
    1dd6:	f1 2c       	mov	r15, r1
    1dd8:	f0 2d       	mov	r31, r0
    1dda:	02 e0       	ldi	r16, 0x02	; 2
    1ddc:	10 e0       	ldi	r17, 0x00	; 0
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	42 e0       	ldi	r20, 0x02	; 2
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	65 e0       	ldi	r22, 0x05	; 5
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	86 e0       	ldi	r24, 0x06	; 6
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    1df2:	8d b7       	in	r24, 0x3d	; 61
    1df4:	9e b7       	in	r25, 0x3e	; 62
    1df6:	80 5b       	subi	r24, 0xB0	; 176
    1df8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	9e bf       	out	0x3e, r25	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	8d bf       	out	0x3d, r24	; 61
    1e04:	24 c2       	rjmp	.+1096   	; 0x224e <preset+0x1448>
		case 14:
			sprintf(ym.patchName,"%s","all consuming");
    1e06:	8e e0       	ldi	r24, 0x0E	; 14
    1e08:	e9 e0       	ldi	r30, 0x09	; 9
    1e0a:	f4 e0       	ldi	r31, 0x04	; 4
    1e0c:	ac e2       	ldi	r26, 0x2C	; 44
    1e0e:	b6 e0       	ldi	r27, 0x06	; 6
    1e10:	01 90       	ld	r0, Z+
    1e12:	0d 92       	st	X+, r0
    1e14:	8a 95       	dec	r24
    1e16:	e1 f7       	brne	.-8      	; 0x1e10 <preset+0x100a>
			changeAllParams(5,5,3,0,2, 1,1,4,2, 0,0,0,0, 120,120,120,127, 27,28,20,24, 30,26,8,28, 0,3,0,10, 7,31,31,31, 9,7,7,7, 1,1,1,1, 0,0,1,0, 0,1,0,0);
    1e18:	1f 92       	push	r1
    1e1a:	1f 92       	push	r1
    1e1c:	1f 92       	push	r1
    1e1e:	1f 92       	push	r1
    1e20:	1f 92       	push	r1
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	8f 93       	push	r24
    1e26:	1f 92       	push	r1
    1e28:	1f 92       	push	r1
    1e2a:	1f 92       	push	r1
    1e2c:	1f 92       	push	r1
    1e2e:	1f 92       	push	r1
    1e30:	8f 93       	push	r24
    1e32:	1f 92       	push	r1
    1e34:	1f 92       	push	r1
    1e36:	1f 92       	push	r1
    1e38:	1f 92       	push	r1
    1e3a:	1f 92       	push	r1
    1e3c:	8f 93       	push	r24
    1e3e:	1f 92       	push	r1
    1e40:	8f 93       	push	r24
    1e42:	1f 92       	push	r1
    1e44:	8f 93       	push	r24
    1e46:	1f 92       	push	r1
    1e48:	8f 93       	push	r24
    1e4a:	1f 92       	push	r1
    1e4c:	87 e0       	ldi	r24, 0x07	; 7
    1e4e:	8f 93       	push	r24
    1e50:	1f 92       	push	r1
    1e52:	8f 93       	push	r24
    1e54:	1f 92       	push	r1
    1e56:	8f 93       	push	r24
    1e58:	1f 92       	push	r1
    1e5a:	99 e0       	ldi	r25, 0x09	; 9
    1e5c:	9f 93       	push	r25
    1e5e:	1f 92       	push	r1
    1e60:	9f e1       	ldi	r25, 0x1F	; 31
    1e62:	9f 93       	push	r25
    1e64:	1f 92       	push	r1
    1e66:	9f 93       	push	r25
    1e68:	1f 92       	push	r1
    1e6a:	9f 93       	push	r25
    1e6c:	1f 92       	push	r1
    1e6e:	8f 93       	push	r24
    1e70:	1f 92       	push	r1
    1e72:	8a e0       	ldi	r24, 0x0A	; 10
    1e74:	8f 93       	push	r24
    1e76:	1f 92       	push	r1
    1e78:	1f 92       	push	r1
    1e7a:	1f 92       	push	r1
    1e7c:	83 e0       	ldi	r24, 0x03	; 3
    1e7e:	8f 93       	push	r24
    1e80:	1f 92       	push	r1
    1e82:	1f 92       	push	r1
    1e84:	1f 92       	push	r1
    1e86:	8c e1       	ldi	r24, 0x1C	; 28
    1e88:	8f 93       	push	r24
    1e8a:	1f 92       	push	r1
    1e8c:	98 e0       	ldi	r25, 0x08	; 8
    1e8e:	9f 93       	push	r25
    1e90:	1f 92       	push	r1
    1e92:	9a e1       	ldi	r25, 0x1A	; 26
    1e94:	9f 93       	push	r25
    1e96:	1f 92       	push	r1
    1e98:	9e e1       	ldi	r25, 0x1E	; 30
    1e9a:	9f 93       	push	r25
    1e9c:	1f 92       	push	r1
    1e9e:	98 e1       	ldi	r25, 0x18	; 24
    1ea0:	9f 93       	push	r25
    1ea2:	1f 92       	push	r1
    1ea4:	94 e1       	ldi	r25, 0x14	; 20
    1ea6:	9f 93       	push	r25
    1ea8:	1f 92       	push	r1
    1eaa:	8f 93       	push	r24
    1eac:	1f 92       	push	r1
    1eae:	8b e1       	ldi	r24, 0x1B	; 27
    1eb0:	8f 93       	push	r24
    1eb2:	1f 92       	push	r1
    1eb4:	8f e7       	ldi	r24, 0x7F	; 127
    1eb6:	8f 93       	push	r24
    1eb8:	1f 92       	push	r1
    1eba:	88 e7       	ldi	r24, 0x78	; 120
    1ebc:	8f 93       	push	r24
    1ebe:	1f 92       	push	r1
    1ec0:	8f 93       	push	r24
    1ec2:	1f 92       	push	r1
    1ec4:	8f 93       	push	r24
    1ec6:	1f 92       	push	r1
    1ec8:	1f 92       	push	r1
    1eca:	1f 92       	push	r1
    1ecc:	1f 92       	push	r1
    1ece:	1f 92       	push	r1
    1ed0:	1f 92       	push	r1
    1ed2:	1f 92       	push	r1
    1ed4:	1f 92       	push	r1
    1ed6:	68 94       	set
    1ed8:	88 24       	eor	r8, r8
    1eda:	81 f8       	bld	r8, 1
    1edc:	91 2c       	mov	r9, r1
    1ede:	68 94       	set
    1ee0:	aa 24       	eor	r10, r10
    1ee2:	a2 f8       	bld	r10, 2
    1ee4:	b1 2c       	mov	r11, r1
    1ee6:	cc 24       	eor	r12, r12
    1ee8:	c3 94       	inc	r12
    1eea:	d1 2c       	mov	r13, r1
    1eec:	ee 24       	eor	r14, r14
    1eee:	e3 94       	inc	r14
    1ef0:	f1 2c       	mov	r15, r1
    1ef2:	02 e0       	ldi	r16, 0x02	; 2
    1ef4:	10 e0       	ldi	r17, 0x00	; 0
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	43 e0       	ldi	r20, 0x03	; 3
    1efc:	50 e0       	ldi	r21, 0x00	; 0
    1efe:	65 e0       	ldi	r22, 0x05	; 5
    1f00:	70 e0       	ldi	r23, 0x00	; 0
    1f02:	85 e0       	ldi	r24, 0x05	; 5
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    1f0a:	8d b7       	in	r24, 0x3d	; 61
    1f0c:	9e b7       	in	r25, 0x3e	; 62
    1f0e:	80 5b       	subi	r24, 0xB0	; 176
    1f10:	9f 4f       	sbci	r25, 0xFF	; 255
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	9e bf       	out	0x3e, r25	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	8d bf       	out	0x3d, r24	; 61
    1f1c:	98 c1       	rjmp	.+816    	; 0x224e <preset+0x1448>
		case 15:
			sprintf(ym.patchName,"%s","one operator");
    1f1e:	8d e0       	ldi	r24, 0x0D	; 13
    1f20:	e7 e1       	ldi	r30, 0x17	; 23
    1f22:	f4 e0       	ldi	r31, 0x04	; 4
    1f24:	ac e2       	ldi	r26, 0x2C	; 44
    1f26:	b6 e0       	ldi	r27, 0x06	; 6
    1f28:	01 90       	ld	r0, Z+
    1f2a:	0d 92       	st	X+, r0
    1f2c:	8a 95       	dec	r24
    1f2e:	e1 f7       	brne	.-8      	; 0x1f28 <preset+0x1122>
			changeAllParams(7,0,0,0,0, 2,2,2,2, 0,0,0,0, 0,0,0,127, 0,0,0,0, 31,31,31,31, 15,15,15,15, 31,31,31,31, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0);
    1f30:	1f 92       	push	r1
    1f32:	1f 92       	push	r1
    1f34:	1f 92       	push	r1
    1f36:	1f 92       	push	r1
    1f38:	1f 92       	push	r1
    1f3a:	1f 92       	push	r1
    1f3c:	1f 92       	push	r1
    1f3e:	1f 92       	push	r1
    1f40:	1f 92       	push	r1
    1f42:	1f 92       	push	r1
    1f44:	1f 92       	push	r1
    1f46:	1f 92       	push	r1
    1f48:	1f 92       	push	r1
    1f4a:	1f 92       	push	r1
    1f4c:	1f 92       	push	r1
    1f4e:	1f 92       	push	r1
    1f50:	1f 92       	push	r1
    1f52:	1f 92       	push	r1
    1f54:	1f 92       	push	r1
    1f56:	1f 92       	push	r1
    1f58:	1f 92       	push	r1
    1f5a:	1f 92       	push	r1
    1f5c:	1f 92       	push	r1
    1f5e:	1f 92       	push	r1
    1f60:	1f 92       	push	r1
    1f62:	1f 92       	push	r1
    1f64:	1f 92       	push	r1
    1f66:	1f 92       	push	r1
    1f68:	1f 92       	push	r1
    1f6a:	1f 92       	push	r1
    1f6c:	1f 92       	push	r1
    1f6e:	1f 92       	push	r1
    1f70:	1f 92       	push	r1
    1f72:	8f e1       	ldi	r24, 0x1F	; 31
    1f74:	8f 93       	push	r24
    1f76:	1f 92       	push	r1
    1f78:	8f 93       	push	r24
    1f7a:	1f 92       	push	r1
    1f7c:	8f 93       	push	r24
    1f7e:	1f 92       	push	r1
    1f80:	8f 93       	push	r24
    1f82:	1f 92       	push	r1
    1f84:	9f e0       	ldi	r25, 0x0F	; 15
    1f86:	9f 93       	push	r25
    1f88:	1f 92       	push	r1
    1f8a:	9f 93       	push	r25
    1f8c:	1f 92       	push	r1
    1f8e:	9f 93       	push	r25
    1f90:	1f 92       	push	r1
    1f92:	9f 93       	push	r25
    1f94:	1f 92       	push	r1
    1f96:	8f 93       	push	r24
    1f98:	1f 92       	push	r1
    1f9a:	8f 93       	push	r24
    1f9c:	1f 92       	push	r1
    1f9e:	8f 93       	push	r24
    1fa0:	1f 92       	push	r1
    1fa2:	8f 93       	push	r24
    1fa4:	1f 92       	push	r1
    1fa6:	1f 92       	push	r1
    1fa8:	1f 92       	push	r1
    1faa:	1f 92       	push	r1
    1fac:	1f 92       	push	r1
    1fae:	1f 92       	push	r1
    1fb0:	1f 92       	push	r1
    1fb2:	1f 92       	push	r1
    1fb4:	1f 92       	push	r1
    1fb6:	8f e7       	ldi	r24, 0x7F	; 127
    1fb8:	8f 93       	push	r24
    1fba:	1f 92       	push	r1
    1fbc:	1f 92       	push	r1
    1fbe:	1f 92       	push	r1
    1fc0:	1f 92       	push	r1
    1fc2:	1f 92       	push	r1
    1fc4:	1f 92       	push	r1
    1fc6:	1f 92       	push	r1
    1fc8:	1f 92       	push	r1
    1fca:	1f 92       	push	r1
    1fcc:	1f 92       	push	r1
    1fce:	1f 92       	push	r1
    1fd0:	1f 92       	push	r1
    1fd2:	1f 92       	push	r1
    1fd4:	1f 92       	push	r1
    1fd6:	68 94       	set
    1fd8:	88 24       	eor	r8, r8
    1fda:	81 f8       	bld	r8, 1
    1fdc:	91 2c       	mov	r9, r1
    1fde:	68 94       	set
    1fe0:	aa 24       	eor	r10, r10
    1fe2:	a1 f8       	bld	r10, 1
    1fe4:	b1 2c       	mov	r11, r1
    1fe6:	68 94       	set
    1fe8:	cc 24       	eor	r12, r12
    1fea:	c1 f8       	bld	r12, 1
    1fec:	d1 2c       	mov	r13, r1
    1fee:	68 94       	set
    1ff0:	ee 24       	eor	r14, r14
    1ff2:	e1 f8       	bld	r14, 1
    1ff4:	f1 2c       	mov	r15, r1
    1ff6:	00 e0       	ldi	r16, 0x00	; 0
    1ff8:	10 e0       	ldi	r17, 0x00	; 0
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	70 e0       	ldi	r23, 0x00	; 0
    2006:	87 e0       	ldi	r24, 0x07	; 7
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    200e:	8d b7       	in	r24, 0x3d	; 61
    2010:	9e b7       	in	r25, 0x3e	; 62
    2012:	80 5b       	subi	r24, 0xB0	; 176
    2014:	9f 4f       	sbci	r25, 0xFF	; 255
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	9e bf       	out	0x3e, r25	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	8d bf       	out	0x3d, r24	; 61
    2020:	16 c1       	rjmp	.+556    	; 0x224e <preset+0x1448>
		case 16:
			sprintf(ym.patchName,"%s","squelchy");
    2022:	89 e0       	ldi	r24, 0x09	; 9
    2024:	e4 e2       	ldi	r30, 0x24	; 36
    2026:	f4 e0       	ldi	r31, 0x04	; 4
    2028:	ac e2       	ldi	r26, 0x2C	; 44
    202a:	b6 e0       	ldi	r27, 0x06	; 6
    202c:	01 90       	ld	r0, Z+
    202e:	0d 92       	st	X+, r0
    2030:	8a 95       	dec	r24
    2032:	e1 f7       	brne	.-8      	; 0x202c <preset+0x1226>
			changeAllParams(1,0,0,0,0, 10,8,4,2, -3,1,3,0, 27,112,112,127, 18,10,20,0, 16,0,29,25, 0,0,0,0, 29,29,29,29, 7,7,7,10, 1,2,1,2, 0,0,0,0, 0,0,0,0);
    2034:	1f 92       	push	r1
    2036:	1f 92       	push	r1
    2038:	1f 92       	push	r1
    203a:	1f 92       	push	r1
    203c:	1f 92       	push	r1
    203e:	1f 92       	push	r1
    2040:	1f 92       	push	r1
    2042:	1f 92       	push	r1
    2044:	1f 92       	push	r1
    2046:	1f 92       	push	r1
    2048:	1f 92       	push	r1
    204a:	1f 92       	push	r1
    204c:	1f 92       	push	r1
    204e:	1f 92       	push	r1
    2050:	1f 92       	push	r1
    2052:	1f 92       	push	r1
    2054:	1f 92       	push	r1
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	8f 93       	push	r24
    205a:	1f 92       	push	r1
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	9f 93       	push	r25
    2060:	1f 92       	push	r1
    2062:	8f 93       	push	r24
    2064:	1f 92       	push	r1
    2066:	9f 93       	push	r25
    2068:	1f 92       	push	r1
    206a:	2a e0       	ldi	r18, 0x0A	; 10
    206c:	2f 93       	push	r18
    206e:	1f 92       	push	r1
    2070:	87 e0       	ldi	r24, 0x07	; 7
    2072:	8f 93       	push	r24
    2074:	1f 92       	push	r1
    2076:	8f 93       	push	r24
    2078:	1f 92       	push	r1
    207a:	8f 93       	push	r24
    207c:	1f 92       	push	r1
    207e:	8d e1       	ldi	r24, 0x1D	; 29
    2080:	8f 93       	push	r24
    2082:	1f 92       	push	r1
    2084:	8f 93       	push	r24
    2086:	1f 92       	push	r1
    2088:	8f 93       	push	r24
    208a:	1f 92       	push	r1
    208c:	8f 93       	push	r24
    208e:	1f 92       	push	r1
    2090:	1f 92       	push	r1
    2092:	1f 92       	push	r1
    2094:	1f 92       	push	r1
    2096:	1f 92       	push	r1
    2098:	1f 92       	push	r1
    209a:	1f 92       	push	r1
    209c:	1f 92       	push	r1
    209e:	1f 92       	push	r1
    20a0:	39 e1       	ldi	r19, 0x19	; 25
    20a2:	3f 93       	push	r19
    20a4:	1f 92       	push	r1
    20a6:	8f 93       	push	r24
    20a8:	1f 92       	push	r1
    20aa:	1f 92       	push	r1
    20ac:	1f 92       	push	r1
    20ae:	80 e1       	ldi	r24, 0x10	; 16
    20b0:	8f 93       	push	r24
    20b2:	1f 92       	push	r1
    20b4:	1f 92       	push	r1
    20b6:	1f 92       	push	r1
    20b8:	84 e1       	ldi	r24, 0x14	; 20
    20ba:	8f 93       	push	r24
    20bc:	1f 92       	push	r1
    20be:	2f 93       	push	r18
    20c0:	1f 92       	push	r1
    20c2:	82 e1       	ldi	r24, 0x12	; 18
    20c4:	8f 93       	push	r24
    20c6:	1f 92       	push	r1
    20c8:	8f e7       	ldi	r24, 0x7F	; 127
    20ca:	8f 93       	push	r24
    20cc:	1f 92       	push	r1
    20ce:	80 e7       	ldi	r24, 0x70	; 112
    20d0:	8f 93       	push	r24
    20d2:	1f 92       	push	r1
    20d4:	8f 93       	push	r24
    20d6:	1f 92       	push	r1
    20d8:	8b e1       	ldi	r24, 0x1B	; 27
    20da:	8f 93       	push	r24
    20dc:	1f 92       	push	r1
    20de:	1f 92       	push	r1
    20e0:	1f 92       	push	r1
    20e2:	83 e0       	ldi	r24, 0x03	; 3
    20e4:	8f 93       	push	r24
    20e6:	1f 92       	push	r1
    20e8:	9f 93       	push	r25
    20ea:	8f ef       	ldi	r24, 0xFF	; 255
    20ec:	8f 93       	push	r24
    20ee:	8d ef       	ldi	r24, 0xFD	; 253
    20f0:	8f 93       	push	r24
    20f2:	68 94       	set
    20f4:	88 24       	eor	r8, r8
    20f6:	81 f8       	bld	r8, 1
    20f8:	91 2c       	mov	r9, r1
    20fa:	68 94       	set
    20fc:	aa 24       	eor	r10, r10
    20fe:	a2 f8       	bld	r10, 2
    2100:	b1 2c       	mov	r11, r1
    2102:	68 94       	set
    2104:	cc 24       	eor	r12, r12
    2106:	c3 f8       	bld	r12, 3
    2108:	d1 2c       	mov	r13, r1
    210a:	0f 2e       	mov	r0, r31
    210c:	fa e0       	ldi	r31, 0x0A	; 10
    210e:	ef 2e       	mov	r14, r31
    2110:	f1 2c       	mov	r15, r1
    2112:	f0 2d       	mov	r31, r0
    2114:	00 e0       	ldi	r16, 0x00	; 0
    2116:	10 e0       	ldi	r17, 0x00	; 0
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    212c:	8d b7       	in	r24, 0x3d	; 61
    212e:	9e b7       	in	r25, 0x3e	; 62
    2130:	80 5b       	subi	r24, 0xB0	; 176
    2132:	9f 4f       	sbci	r25, 0xFF	; 255
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	9e bf       	out	0x3e, r25	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	8d bf       	out	0x3d, r24	; 61
    213e:	87 c0       	rjmp	.+270    	; 0x224e <preset+0x1448>
		case 17:
			sprintf(ym.patchName,"%s","ugly bell");
    2140:	8a e0       	ldi	r24, 0x0A	; 10
    2142:	ed e2       	ldi	r30, 0x2D	; 45
    2144:	f4 e0       	ldi	r31, 0x04	; 4
    2146:	ac e2       	ldi	r26, 0x2C	; 44
    2148:	b6 e0       	ldi	r27, 0x06	; 6
    214a:	01 90       	ld	r0, Z+
    214c:	0d 92       	st	X+, r0
    214e:	8a 95       	dec	r24
    2150:	e1 f7       	brne	.-8      	; 0x214a <preset+0x1344>
			changeAllParams(6,4,0,0,0, 10,1,1,1, 0,0,0,0, 120,120,120,127, 0,0,0,0, 24,19,25,13, 0,0,0,0, 31,31,31,31, 8,8,6,9, 1,1,1,1, 0,0,0,0, 0,0,0,0);
    2152:	1f 92       	push	r1
    2154:	1f 92       	push	r1
    2156:	1f 92       	push	r1
    2158:	1f 92       	push	r1
    215a:	1f 92       	push	r1
    215c:	1f 92       	push	r1
    215e:	1f 92       	push	r1
    2160:	1f 92       	push	r1
    2162:	1f 92       	push	r1
    2164:	1f 92       	push	r1
    2166:	1f 92       	push	r1
    2168:	1f 92       	push	r1
    216a:	1f 92       	push	r1
    216c:	1f 92       	push	r1
    216e:	1f 92       	push	r1
    2170:	1f 92       	push	r1
    2172:	1f 92       	push	r1
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	8f 93       	push	r24
    2178:	1f 92       	push	r1
    217a:	8f 93       	push	r24
    217c:	1f 92       	push	r1
    217e:	8f 93       	push	r24
    2180:	1f 92       	push	r1
    2182:	8f 93       	push	r24
    2184:	1f 92       	push	r1
    2186:	89 e0       	ldi	r24, 0x09	; 9
    2188:	8f 93       	push	r24
    218a:	1f 92       	push	r1
    218c:	86 e0       	ldi	r24, 0x06	; 6
    218e:	8f 93       	push	r24
    2190:	1f 92       	push	r1
    2192:	88 e0       	ldi	r24, 0x08	; 8
    2194:	8f 93       	push	r24
    2196:	1f 92       	push	r1
    2198:	8f 93       	push	r24
    219a:	1f 92       	push	r1
    219c:	8f e1       	ldi	r24, 0x1F	; 31
    219e:	8f 93       	push	r24
    21a0:	1f 92       	push	r1
    21a2:	8f 93       	push	r24
    21a4:	1f 92       	push	r1
    21a6:	8f 93       	push	r24
    21a8:	1f 92       	push	r1
    21aa:	8f 93       	push	r24
    21ac:	1f 92       	push	r1
    21ae:	1f 92       	push	r1
    21b0:	1f 92       	push	r1
    21b2:	1f 92       	push	r1
    21b4:	1f 92       	push	r1
    21b6:	1f 92       	push	r1
    21b8:	1f 92       	push	r1
    21ba:	1f 92       	push	r1
    21bc:	1f 92       	push	r1
    21be:	8d e0       	ldi	r24, 0x0D	; 13
    21c0:	8f 93       	push	r24
    21c2:	1f 92       	push	r1
    21c4:	89 e1       	ldi	r24, 0x19	; 25
    21c6:	8f 93       	push	r24
    21c8:	1f 92       	push	r1
    21ca:	83 e1       	ldi	r24, 0x13	; 19
    21cc:	8f 93       	push	r24
    21ce:	1f 92       	push	r1
    21d0:	88 e1       	ldi	r24, 0x18	; 24
    21d2:	8f 93       	push	r24
    21d4:	1f 92       	push	r1
    21d6:	1f 92       	push	r1
    21d8:	1f 92       	push	r1
    21da:	1f 92       	push	r1
    21dc:	1f 92       	push	r1
    21de:	1f 92       	push	r1
    21e0:	1f 92       	push	r1
    21e2:	1f 92       	push	r1
    21e4:	1f 92       	push	r1
    21e6:	8f e7       	ldi	r24, 0x7F	; 127
    21e8:	8f 93       	push	r24
    21ea:	1f 92       	push	r1
    21ec:	88 e7       	ldi	r24, 0x78	; 120
    21ee:	8f 93       	push	r24
    21f0:	1f 92       	push	r1
    21f2:	8f 93       	push	r24
    21f4:	1f 92       	push	r1
    21f6:	8f 93       	push	r24
    21f8:	1f 92       	push	r1
    21fa:	1f 92       	push	r1
    21fc:	1f 92       	push	r1
    21fe:	1f 92       	push	r1
    2200:	1f 92       	push	r1
    2202:	1f 92       	push	r1
    2204:	1f 92       	push	r1
    2206:	1f 92       	push	r1
    2208:	88 24       	eor	r8, r8
    220a:	83 94       	inc	r8
    220c:	91 2c       	mov	r9, r1
    220e:	aa 24       	eor	r10, r10
    2210:	a3 94       	inc	r10
    2212:	b1 2c       	mov	r11, r1
    2214:	cc 24       	eor	r12, r12
    2216:	c3 94       	inc	r12
    2218:	d1 2c       	mov	r13, r1
    221a:	0f 2e       	mov	r0, r31
    221c:	fa e0       	ldi	r31, 0x0A	; 10
    221e:	ef 2e       	mov	r14, r31
    2220:	f1 2c       	mov	r15, r1
    2222:	f0 2d       	mov	r31, r0
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	10 e0       	ldi	r17, 0x00	; 0
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	64 e0       	ldi	r22, 0x04	; 4
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	86 e0       	ldi	r24, 0x06	; 6
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <changeAllParams>
			break;
    223c:	8d b7       	in	r24, 0x3d	; 61
    223e:	9e b7       	in	r25, 0x3e	; 62
    2240:	80 5b       	subi	r24, 0xB0	; 176
    2242:	9f 4f       	sbci	r25, 0xFF	; 255
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	9e bf       	out	0x3e, r25	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	8d bf       	out	0x3d, r24	; 61
	}
}
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	ff 90       	pop	r15
    2254:	ef 90       	pop	r14
    2256:	df 90       	pop	r13
    2258:	cf 90       	pop	r12
    225a:	bf 90       	pop	r11
    225c:	af 90       	pop	r10
    225e:	9f 90       	pop	r9
    2260:	8f 90       	pop	r8
    2262:	08 95       	ret

00002264 <changeGroup>:

// this and changeCurrent() are responsible for the structure of the interface
// if group is changed: restrict group number within 0-3, change currently selected param, print
// only needed for first element of each group
void changeGroup(){
	minMaxValue(&ym.group,0,3);
    2264:	43 e0       	ldi	r20, 0x03	; 3
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	96 e0       	ldi	r25, 0x06	; 6
    2270:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
	
	ym.current = 0; // display is at FIRST element of group when group is changed (possible TODO: have it go back to previously selected value)
    2274:	ee ef       	ldi	r30, 0xFE	; 254
    2276:	f5 e0       	ldi	r31, 0x05	; 5
    2278:	15 82       	std	Z+5, r1	; 0x05
    227a:	14 82       	std	Z+4, r1	; 0x04
	
	switch(ym.group){
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	91 05       	cpc	r25, r1
    2284:	b9 f0       	breq	.+46     	; 0x22b4 <changeGroup+0x50>
    2286:	1c f4       	brge	.+6      	; 0x228e <changeGroup+0x2a>
    2288:	89 2b       	or	r24, r25
    228a:	39 f0       	breq	.+14     	; 0x229a <changeGroup+0x36>
    228c:	08 95       	ret
    228e:	82 30       	cpi	r24, 0x02	; 2
    2290:	91 05       	cpc	r25, r1
    2292:	e9 f0       	breq	.+58     	; 0x22ce <changeGroup+0x6a>
    2294:	03 97       	sbiw	r24, 0x03	; 3
    2296:	61 f1       	breq	.+88     	; 0x22f0 <changeGroup+0x8c>
    2298:	08 95       	ret
		case 0:
			ym.value = &ym.patchNum;
    229a:	8a e2       	ldi	r24, 0x2A	; 42
    229c:	96 e0       	ldi	r25, 0x06	; 6
    229e:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <ym+0x7>
    22a2:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <ym+0x6>
			printToLCD("preset patch",7);
    22a6:	67 e0       	ldi	r22, 0x07	; 7
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	87 e3       	ldi	r24, 0x37	; 55
    22ac:	94 e0       	ldi	r25, 0x04	; 4
    22ae:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
			break;
    22b2:	08 95       	ret
		case 1:
			ym.value = &ym.algorithm;
    22b4:	8d e3       	ldi	r24, 0x3D	; 61
    22b6:	96 e0       	ldi	r25, 0x06	; 6
    22b8:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <ym+0x7>
    22bc:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <ym+0x6>
			printToLCD("algorithm",3);
    22c0:	63 e0       	ldi	r22, 0x03	; 3
    22c2:	70 e0       	ldi	r23, 0x00	; 0
    22c4:	84 e4       	ldi	r24, 0x44	; 68
    22c6:	94 e0       	ldi	r25, 0x04	; 4
    22c8:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
			break;
    22cc:	08 95       	ret
		case 2:
			ym.value = &ym.attack[ym.op];
    22ce:	ee ef       	ldi	r30, 0xFE	; 254
    22d0:	f5 e0       	ldi	r31, 0x05	; 5
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	87 5a       	subi	r24, 0xA7	; 167
    22dc:	99 4f       	sbci	r25, 0xF9	; 249
    22de:	97 83       	std	Z+7, r25	; 0x07
    22e0:	86 83       	std	Z+6, r24	; 0x06
			printToLCD("attack",1);
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	8e e4       	ldi	r24, 0x4E	; 78
    22e8:	94 e0       	ldi	r25, 0x04	; 4
    22ea:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
			break;
    22ee:	08 95       	ret
		case 3:
			ym.value = &ym.lfoFreq;
    22f0:	81 e9       	ldi	r24, 0x91	; 145
    22f2:	96 e0       	ldi	r25, 0x06	; 6
    22f4:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <ym+0x7>
    22f8:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <ym+0x6>
			printToLCD("LFO freq",5);
    22fc:	65 e0       	ldi	r22, 0x05	; 5
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	85 e5       	ldi	r24, 0x55	; 85
    2302:	94 e0       	ldi	r25, 0x04	; 4
    2304:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2308:	08 95       	ret

0000230a <main>:
ISR(USART_RX_vect); // midi data received

ISR(TIMER1_OVF_vect); // turn on/off scheduled notes

int main(void) {	
	stdout = &lcd_str; // printf prints to LCD
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	90 93 a2 06 	sts	0x06A2, r25	; 0x8006a2 <__iob+0x3>
    2312:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__iob+0x2>

	lcd_init(); // initialize lcd
    2316:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_init>
	
	// DDRs for SPI (B & C), LCD (B & C), and interface (D)
	// note that PB2 (LCD_E) is the uC's SS pin - since it's set as output it shouldn't affect the SPI's functioning
	DDRB |= (1<< LCD_RS) | (1<<LCD_E) | (1<<MOSI) | (1<<SCK) | (0<<MISO);
    231a:	84 b1       	in	r24, 0x04	; 4
    231c:	8e 62       	ori	r24, 0x2E	; 46
    231e:	84 b9       	out	0x04, r24	; 4
	
	// SS is PC5 
	DDRC |= (1<<LCD_D4) | (1<<LCD_D5) | (1<<LCD_D6) | (1<<LCD_D7) | (1<<SS);
    2320:	87 b1       	in	r24, 0x07	; 7
    2322:	8f 61       	ori	r24, 0x1F	; 31
    2324:	87 b9       	out	0x07, r24	; 7
	
	// interface + MIDI pins input
	DDRD &= ~((1<<MIDI_IN) | (1<<BTN_L) | (1<<BTN_R) | (1<<ENC_A) | (1<<ENC_B)); 
    2326:	8a b1       	in	r24, 0x0a	; 10
    2328:	80 7e       	andi	r24, 0xE0	; 224
    232a:	8a b9       	out	0x0a, r24	; 10
	
	// initialize SPI for sending messages to mega2 to be transmitted to YM2612
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR1); // SPI enable, master mode 
    232c:	82 e5       	ldi	r24, 0x52	; 82
    232e:	8c bd       	out	0x2c, r24	; 44
	
	// initialize USART for MIDI
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (0 << UCSZ02); // enable RX interrupt, enable interrupt (??????)
    2330:	80 e9       	ldi	r24, 0x90	; 144
    2332:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8 bits per character
    2336:	86 e0       	ldi	r24, 0x06	; 6
    2338:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = (F_CPU / 16 / MIDI_BAUD) - 1; // midi baud rate 31250
    233c:	8f e1       	ldi	r24, 0x1F	; 31
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    2344:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// enable pin change interrupts for D1 - D4 (PCINT17 - 20)
	PCMSK2 = (1<<PCINT17) | (1<<PCINT19) | (1<<PCINT20) | (1<<PCINT18);
    2348:	8e e1       	ldi	r24, 0x1E	; 30
    234a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	PCICR = (1<<PCIE2); // enable pin change interrupts for PORTD (for buttons)
    234e:	84 e0       	ldi	r24, 0x04	; 4
    2350:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	
	PORTC |= (1<<SS); // SS pin high by default, low when transmitting data
    2354:	88 b1       	in	r24, 0x08	; 8
    2356:	80 61       	ori	r24, 0x10	; 16
    2358:	88 b9       	out	0x08, r24	; 8
	
	// initialize timer1
	TCCR1A = 0; // no PWM, no compare, just counting up to 0xFFFF in "normal" mode
    235a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS10); // prescale
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 |= (1<<TOIE1); // enable timer1 overflow interrupt
    2364:	ef e6       	ldi	r30, 0x6F	; 111
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	81 60       	ori	r24, 0x01	; 1
    236c:	80 83       	st	Z, r24
	
	TCNT1 = 0;
    236e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    2372:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	// initialize stored interface pin values
	glb.RPGpinOld = PIND & ((1<<ENC_A) | (1<<ENC_B));
    2376:	89 b1       	in	r24, 0x09	; 9
    2378:	88 71       	andi	r24, 0x18	; 24
    237a:	e3 ef       	ldi	r30, 0xF3	; 243
    237c:	f4 e0       	ldi	r31, 0x04	; 4
    237e:	82 83       	std	Z+2, r24	; 0x02
	glb.RPGold[0] = (glb.RPGpinOld & (1<<ENC_A))>>ENC_A;
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	88 70       	andi	r24, 0x08	; 8
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	95 95       	asr	r25
    2388:	87 95       	ror	r24
    238a:	95 95       	asr	r25
    238c:	87 95       	ror	r24
    238e:	95 95       	asr	r25
    2390:	87 95       	ror	r24
    2392:	80 83       	st	Z, r24
	glb.RPGold[1] = (glb.RPGpinOld & (1<<ENC_B))>>ENC_B;
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	80 71       	andi	r24, 0x10	; 16
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	95 95       	asr	r25
    239c:	87 95       	ror	r24
    239e:	95 95       	asr	r25
    23a0:	87 95       	ror	r24
    23a2:	95 95       	asr	r25
    23a4:	87 95       	ror	r24
    23a6:	95 95       	asr	r25
    23a8:	87 95       	ror	r24
    23aa:	81 83       	std	Z+1, r24	; 0x01
	glb.BTN_L_old = (PIND & (1<<BTN_L))>>BTN_L;
    23ac:	89 b1       	in	r24, 0x09	; 9
    23ae:	82 70       	andi	r24, 0x02	; 2
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	95 95       	asr	r25
    23b4:	87 95       	ror	r24
    23b6:	83 83       	std	Z+3, r24	; 0x03
	glb.BTN_R_old = (PIND & (1<<BTN_R))>>BTN_R;
    23b8:	89 b1       	in	r24, 0x09	; 9
    23ba:	84 70       	andi	r24, 0x04	; 4
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	95 95       	asr	r25
    23c0:	87 95       	ror	r24
    23c2:	95 95       	asr	r25
    23c4:	87 95       	ror	r24
    23c6:	84 83       	std	Z+4, r24	; 0x04
	
	// initialize ym values
	ym.op = 0;
    23c8:	ee ef       	ldi	r30, 0xFE	; 254
    23ca:	f5 e0       	ldi	r31, 0x05	; 5
    23cc:	11 82       	std	Z+1, r1	; 0x01
    23ce:	10 82       	st	Z, r1
	ym.group = 0;
    23d0:	13 82       	std	Z+3, r1	; 0x03
    23d2:	12 82       	std	Z+2, r1	; 0x02
	ym.current = 0;
    23d4:	15 82       	std	Z+5, r1	; 0x05
    23d6:	14 82       	std	Z+4, r1	; 0x04
	ym.patchNum = 15; // "one operator" patch
    23d8:	8f e0       	ldi	r24, 0x0F	; 15
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	95 a7       	std	Z+45, r25	; 0x2d
    23de:	84 a7       	std	Z+44, r24	; 0x2c
	ym.value = &ym.patchNum;
    23e0:	8a e2       	ldi	r24, 0x2A	; 42
    23e2:	96 e0       	ldi	r25, 0x06	; 6
    23e4:	97 83       	std	Z+7, r25	; 0x07
    23e6:	86 83       	std	Z+6, r24	; 0x06
	
	// initialize MIDI buffer situation
	glb.midiIndex = 0;
    23e8:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <glb+0x107>
    23ec:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <glb+0x106>
	glb.msgStart = 0;
    23f0:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <glb+0x108>
	
	// i'm cool
	printf("Boney Circuitry\n  megamega2612");
    23f4:	8e e5       	ldi	r24, 0x5E	; 94
    23f6:	94 e0       	ldi	r25, 0x04	; 4
    23f8:	9f 93       	push	r25
    23fa:	8f 93       	push	r24
    23fc:	0e 94 1c 1b 	call	0x3638	; 0x3638 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2400:	2f ef       	ldi	r18, 0xFF	; 255
    2402:	83 ed       	ldi	r24, 0xD3	; 211
    2404:	90 e3       	ldi	r25, 0x30	; 48
    2406:	21 50       	subi	r18, 0x01	; 1
    2408:	80 40       	sbci	r24, 0x00	; 0
    240a:	90 40       	sbci	r25, 0x00	; 0
    240c:	e1 f7       	brne	.-8      	; 0x2406 <main+0xfc>
    240e:	00 c0       	rjmp	.+0      	; 0x2410 <main+0x106>
    2410:	00 00       	nop
	_delay_ms(1000);
	
	// show preset patch on startup
	preset();
    2412:	0e 94 03 07 	call	0xe06	; 0xe06 <preset>
	changeGroup();
    2416:	0e 94 32 11 	call	0x2264	; 0x2264 <changeGroup>
	
	sei(); // lets goooooooooo
    241a:	78 94       	sei
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	ff cf       	rjmp	.-2      	; 0x2420 <main+0x116>

00002422 <changeCurrent>:
}

// this and changeGroup() are responsible for the structure of the interface
// if currently selected param is changed: restrict op within 0-4, restrict value of 'current' within the values allowed within each group,
// change 'value' to the parameter at that slot within group, print
void changeCurrent(){
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
	minMaxValue(&ym.op,0,3); // this is called when op is changed, so restrict op from 0-3 (ops 1-4)
    2426:	43 e0       	ldi	r20, 0x03	; 3
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	70 e0       	ldi	r23, 0x00	; 0
    242e:	8e ef       	ldi	r24, 0xFE	; 254
    2430:	95 e0       	ldi	r25, 0x05	; 5
    2432:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
	
	uint8_t op = ym.op;
    2436:	ee ef       	ldi	r30, 0xFE	; 254
    2438:	f5 e0       	ldi	r31, 0x05	; 5
    243a:	c0 81       	ld	r28, Z
    243c:	d1 81       	ldd	r29, Z+1	; 0x01
	
	if(ym.group == 0){ // more will be added here eventually
    243e:	82 81       	ldd	r24, Z+2	; 0x02
    2440:	93 81       	ldd	r25, Z+3	; 0x03
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	79 f4       	brne	.+30     	; 0x2464 <changeCurrent+0x42>
		minMaxValue(&ym.current,0,0);
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	96 e0       	ldi	r25, 0x06	; 6
    2452:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		printToLCD("preset patch",7);
    2456:	67 e0       	ldi	r22, 0x07	; 7
    2458:	70 e0       	ldi	r23, 0x00	; 0
    245a:	87 e3       	ldi	r24, 0x37	; 55
    245c:	94 e0       	ldi	r25, 0x04	; 4
    245e:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2462:	43 c1       	rjmp	.+646    	; 0x26ea <changeCurrent+0x2c8>
		
	} else if(ym.group == 1){
    2464:	81 30       	cpi	r24, 0x01	; 1
    2466:	91 05       	cpc	r25, r1
    2468:	09 f0       	breq	.+2      	; 0x246c <changeCurrent+0x4a>
    246a:	65 c0       	rjmp	.+202    	; 0x2536 <changeCurrent+0x114>
		minMaxValue(&ym.current,0,4);
    246c:	44 e0       	ldi	r20, 0x04	; 4
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	96 e0       	ldi	r25, 0x06	; 6
    2478:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		switch(ym.current){
    247c:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <ym+0x4>
    2480:	90 91 03 06 	lds	r25, 0x0603	; 0x800603 <ym+0x5>
    2484:	82 30       	cpi	r24, 0x02	; 2
    2486:	91 05       	cpc	r25, r1
    2488:	31 f1       	breq	.+76     	; 0x24d6 <changeCurrent+0xb4>
    248a:	2c f4       	brge	.+10     	; 0x2496 <changeCurrent+0x74>
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	49 f0       	breq	.+18     	; 0x24a2 <changeCurrent+0x80>
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	a1 f0       	breq	.+40     	; 0x24bc <changeCurrent+0x9a>
    2494:	2a c1       	rjmp	.+596    	; 0x26ea <changeCurrent+0x2c8>
    2496:	83 30       	cpi	r24, 0x03	; 3
    2498:	91 05       	cpc	r25, r1
    249a:	69 f1       	breq	.+90     	; 0x24f6 <changeCurrent+0xd4>
    249c:	04 97       	sbiw	r24, 0x04	; 4
    249e:	d9 f1       	breq	.+118    	; 0x2516 <changeCurrent+0xf4>
    24a0:	24 c1       	rjmp	.+584    	; 0x26ea <changeCurrent+0x2c8>
			case 0: // algorithm
				ym.value = &ym.algorithm;
    24a2:	8d e3       	ldi	r24, 0x3D	; 61
    24a4:	96 e0       	ldi	r25, 0x06	; 6
    24a6:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <ym+0x7>
    24aa:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <ym+0x6>
				printToLCD("algorithm",3);
    24ae:	63 e0       	ldi	r22, 0x03	; 3
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	84 e4       	ldi	r24, 0x44	; 68
    24b4:	94 e0       	ldi	r25, 0x04	; 4
    24b6:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    24ba:	17 c1       	rjmp	.+558    	; 0x26ea <changeCurrent+0x2c8>
			case 1: // feedback
				ym.value = &ym.feedback;
    24bc:	8f e3       	ldi	r24, 0x3F	; 63
    24be:	96 e0       	ldi	r25, 0x06	; 6
    24c0:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <ym+0x7>
    24c4:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <ym+0x6>
				printToLCD("feedback",0);
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	8d e7       	ldi	r24, 0x7D	; 125
    24ce:	94 e0       	ldi	r25, 0x04	; 4
    24d0:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    24d4:	0a c1       	rjmp	.+532    	; 0x26ea <changeCurrent+0x2c8>
			case 2: // multiple
				ym.value = &ym.multiple[op];
    24d6:	dd 27       	eor	r29, r29
    24d8:	cc 0f       	add	r28, r28
    24da:	dd 1f       	adc	r29, r29
    24dc:	c7 5b       	subi	r28, 0xB7	; 183
    24de:	d9 4f       	sbci	r29, 0xF9	; 249
    24e0:	d0 93 05 06 	sts	0x0605, r29	; 0x800605 <ym+0x7>
    24e4:	c0 93 04 06 	sts	0x0604, r28	; 0x800604 <ym+0x6>
				printToLCD("freq mult",2);
    24e8:	62 e0       	ldi	r22, 0x02	; 2
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	86 e8       	ldi	r24, 0x86	; 134
    24ee:	94 e0       	ldi	r25, 0x04	; 4
    24f0:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    24f4:	fa c0       	rjmp	.+500    	; 0x26ea <changeCurrent+0x2c8>
			case 3: // detune
				ym.value = &ym.detune[op];
    24f6:	dd 27       	eor	r29, r29
    24f8:	cc 0f       	add	r28, r28
    24fa:	dd 1f       	adc	r29, r29
    24fc:	cf 5b       	subi	r28, 0xBF	; 191
    24fe:	d9 4f       	sbci	r29, 0xF9	; 249
    2500:	d0 93 05 06 	sts	0x0605, r29	; 0x800605 <ym+0x7>
    2504:	c0 93 04 06 	sts	0x0604, r28	; 0x800604 <ym+0x6>
				printToLCD("detune",1);
    2508:	61 e0       	ldi	r22, 0x01	; 1
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	80 e9       	ldi	r24, 0x90	; 144
    250e:	94 e0       	ldi	r25, 0x04	; 4
    2510:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    2514:	ea c0       	rjmp	.+468    	; 0x26ea <changeCurrent+0x2c8>
			case 4: // total level
				ym.value = &ym.totalLvl[op];
    2516:	dd 27       	eor	r29, r29
    2518:	cc 0f       	add	r28, r28
    251a:	dd 1f       	adc	r29, r29
    251c:	cf 5a       	subi	r28, 0xAF	; 175
    251e:	d9 4f       	sbci	r29, 0xF9	; 249
    2520:	d0 93 05 06 	sts	0x0605, r29	; 0x800605 <ym+0x7>
    2524:	c0 93 04 06 	sts	0x0604, r28	; 0x800604 <ym+0x6>
				printToLCD("level",1);
    2528:	61 e0       	ldi	r22, 0x01	; 1
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	87 e9       	ldi	r24, 0x97	; 151
    252e:	94 e0       	ldi	r25, 0x04	; 4
    2530:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    2534:	da c0       	rjmp	.+436    	; 0x26ea <changeCurrent+0x2c8>
		}
	} else if(ym.group == 2){
    2536:	82 30       	cpi	r24, 0x02	; 2
    2538:	91 05       	cpc	r25, r1
    253a:	09 f0       	breq	.+2      	; 0x253e <changeCurrent+0x11c>
    253c:	84 c0       	rjmp	.+264    	; 0x2646 <changeCurrent+0x224>
		minMaxValue(&ym.current,0,6);
    253e:	46 e0       	ldi	r20, 0x06	; 6
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	60 e0       	ldi	r22, 0x00	; 0
    2544:	70 e0       	ldi	r23, 0x00	; 0
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	96 e0       	ldi	r25, 0x06	; 6
    254a:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		switch(ym.current){
    254e:	e0 91 02 06 	lds	r30, 0x0602	; 0x800602 <ym+0x4>
    2552:	f0 91 03 06 	lds	r31, 0x0603	; 0x800603 <ym+0x5>
    2556:	e7 30       	cpi	r30, 0x07	; 7
    2558:	f1 05       	cpc	r31, r1
    255a:	08 f0       	brcs	.+2      	; 0x255e <changeCurrent+0x13c>
    255c:	c6 c0       	rjmp	.+396    	; 0x26ea <changeCurrent+0x2c8>
    255e:	e8 5a       	subi	r30, 0xA8	; 168
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__tablejump2__>
			case 0: // attack
				ym.value = &ym.attack[op];
    2566:	dd 27       	eor	r29, r29
    2568:	cc 0f       	add	r28, r28
    256a:	dd 1f       	adc	r29, r29
    256c:	c7 5a       	subi	r28, 0xA7	; 167
    256e:	d9 4f       	sbci	r29, 0xF9	; 249
    2570:	d0 93 05 06 	sts	0x0605, r29	; 0x800605 <ym+0x7>
    2574:	c0 93 04 06 	sts	0x0604, r28	; 0x800604 <ym+0x6>
				printToLCD("attack",1);
    2578:	61 e0       	ldi	r22, 0x01	; 1
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	8e e4       	ldi	r24, 0x4E	; 78
    257e:	94 e0       	ldi	r25, 0x04	; 4
    2580:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    2584:	b2 c0       	rjmp	.+356    	; 0x26ea <changeCurrent+0x2c8>
			case 1: // decay
				ym.value = &ym.decay[op];
    2586:	dd 27       	eor	r29, r29
    2588:	cc 0f       	add	r28, r28
    258a:	dd 1f       	adc	r29, r29
    258c:	cf 59       	subi	r28, 0x9F	; 159
    258e:	d9 4f       	sbci	r29, 0xF9	; 249
    2590:	d0 93 05 06 	sts	0x0605, r29	; 0x800605 <ym+0x7>
    2594:	c0 93 04 06 	sts	0x0604, r28	; 0x800604 <ym+0x6>
				printToLCD("decay",1);
    2598:	61 e0       	ldi	r22, 0x01	; 1
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	8d e9       	ldi	r24, 0x9D	; 157
    259e:	94 e0       	ldi	r25, 0x04	; 4
    25a0:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    25a4:	a2 c0       	rjmp	.+324    	; 0x26ea <changeCurrent+0x2c8>
			case 2: // susLvl
				ym.value = &ym.susLvl[op];
    25a6:	dd 27       	eor	r29, r29
    25a8:	cc 0f       	add	r28, r28
    25aa:	dd 1f       	adc	r29, r29
    25ac:	c7 59       	subi	r28, 0x97	; 151
    25ae:	d9 4f       	sbci	r29, 0xF9	; 249
    25b0:	d0 93 05 06 	sts	0x0605, r29	; 0x800605 <ym+0x7>
    25b4:	c0 93 04 06 	sts	0x0604, r28	; 0x800604 <ym+0x6>
				printToLCD("sustain",1);
    25b8:	61 e0       	ldi	r22, 0x01	; 1
    25ba:	70 e0       	ldi	r23, 0x00	; 0
    25bc:	83 ea       	ldi	r24, 0xA3	; 163
    25be:	94 e0       	ldi	r25, 0x04	; 4
    25c0:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    25c4:	92 c0       	rjmp	.+292    	; 0x26ea <changeCurrent+0x2c8>
			case 3: // susRate
				ym.value = &ym.susRate[op];
    25c6:	dd 27       	eor	r29, r29
    25c8:	cc 0f       	add	r28, r28
    25ca:	dd 1f       	adc	r29, r29
    25cc:	cf 58       	subi	r28, 0x8F	; 143
    25ce:	d9 4f       	sbci	r29, 0xF9	; 249
    25d0:	d0 93 05 06 	sts	0x0605, r29	; 0x800605 <ym+0x7>
    25d4:	c0 93 04 06 	sts	0x0604, r28	; 0x800604 <ym+0x6>
				printToLCD("sust rate",1);
    25d8:	61 e0       	ldi	r22, 0x01	; 1
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	8b ea       	ldi	r24, 0xAB	; 171
    25de:	94 e0       	ldi	r25, 0x04	; 4
    25e0:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    25e4:	82 c0       	rjmp	.+260    	; 0x26ea <changeCurrent+0x2c8>
			case 4: // release
				ym.value = &ym.release[op];
    25e6:	dd 27       	eor	r29, r29
    25e8:	cc 0f       	add	r28, r28
    25ea:	dd 1f       	adc	r29, r29
    25ec:	c7 58       	subi	r28, 0x87	; 135
    25ee:	d9 4f       	sbci	r29, 0xF9	; 249
    25f0:	d0 93 05 06 	sts	0x0605, r29	; 0x800605 <ym+0x7>
    25f4:	c0 93 04 06 	sts	0x0604, r28	; 0x800604 <ym+0x6>
				printToLCD("release",1);
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	85 eb       	ldi	r24, 0xB5	; 181
    25fe:	94 e0       	ldi	r25, 0x04	; 4
    2600:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    2604:	72 c0       	rjmp	.+228    	; 0x26ea <changeCurrent+0x2c8>
			case 5: // rateScl
				ym.value = &ym.rateScl[op];
    2606:	dd 27       	eor	r29, r29
    2608:	cc 0f       	add	r28, r28
    260a:	dd 1f       	adc	r29, r29
    260c:	cf 57       	subi	r28, 0x7F	; 127
    260e:	d9 4f       	sbci	r29, 0xF9	; 249
    2610:	d0 93 05 06 	sts	0x0605, r29	; 0x800605 <ym+0x7>
    2614:	c0 93 04 06 	sts	0x0604, r28	; 0x800604 <ym+0x6>
				printToLCD("rate scale",1);
    2618:	61 e0       	ldi	r22, 0x01	; 1
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	8d eb       	ldi	r24, 0xBD	; 189
    261e:	94 e0       	ldi	r25, 0x04	; 4
    2620:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    2624:	62 c0       	rjmp	.+196    	; 0x26ea <changeCurrent+0x2c8>
			case 6: // ssgeg
				ym.value = &ym.ssgeg[op];
    2626:	dd 27       	eor	r29, r29
    2628:	cc 0f       	add	r28, r28
    262a:	dd 1f       	adc	r29, r29
    262c:	c7 57       	subi	r28, 0x77	; 119
    262e:	d9 4f       	sbci	r29, 0xF9	; 249
    2630:	d0 93 05 06 	sts	0x0605, r29	; 0x800605 <ym+0x7>
    2634:	c0 93 04 06 	sts	0x0604, r28	; 0x800604 <ym+0x6>
				printToLCD("SSGEG",6);
    2638:	66 e0       	ldi	r22, 0x06	; 6
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	88 ec       	ldi	r24, 0xC8	; 200
    263e:	94 e0       	ldi	r25, 0x04	; 4
    2640:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    2644:	52 c0       	rjmp	.+164    	; 0x26ea <changeCurrent+0x2c8>
		}
	} else if(ym.group == 3){
    2646:	03 97       	sbiw	r24, 0x03	; 3
    2648:	09 f0       	breq	.+2      	; 0x264c <changeCurrent+0x22a>
    264a:	4f c0       	rjmp	.+158    	; 0x26ea <changeCurrent+0x2c8>
		minMaxValue(&ym.current,0,3);
    264c:	43 e0       	ldi	r20, 0x03	; 3
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	82 e0       	ldi	r24, 0x02	; 2
    2656:	96 e0       	ldi	r25, 0x06	; 6
    2658:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		switch(ym.current){
    265c:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <ym+0x4>
    2660:	90 91 03 06 	lds	r25, 0x0603	; 0x800603 <ym+0x5>
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	91 05       	cpc	r25, r1
    2668:	b9 f0       	breq	.+46     	; 0x2698 <changeCurrent+0x276>
    266a:	1c f4       	brge	.+6      	; 0x2672 <changeCurrent+0x250>
    266c:	89 2b       	or	r24, r25
    266e:	39 f0       	breq	.+14     	; 0x267e <changeCurrent+0x25c>
    2670:	3c c0       	rjmp	.+120    	; 0x26ea <changeCurrent+0x2c8>
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	91 05       	cpc	r25, r1
    2676:	e9 f0       	breq	.+58     	; 0x26b2 <changeCurrent+0x290>
    2678:	03 97       	sbiw	r24, 0x03	; 3
    267a:	41 f1       	breq	.+80     	; 0x26cc <changeCurrent+0x2aa>
    267c:	36 c0       	rjmp	.+108    	; 0x26ea <changeCurrent+0x2c8>
			case 0: // lfoFreq
				ym.value = &ym.lfoFreq;
    267e:	81 e9       	ldi	r24, 0x91	; 145
    2680:	96 e0       	ldi	r25, 0x06	; 6
    2682:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <ym+0x7>
    2686:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <ym+0x6>
				printToLCD("LFO freq",5);
    268a:	65 e0       	ldi	r22, 0x05	; 5
    268c:	70 e0       	ldi	r23, 0x00	; 0
    268e:	85 e5       	ldi	r24, 0x55	; 85
    2690:	94 e0       	ldi	r25, 0x04	; 4
    2692:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    2696:	29 c0       	rjmp	.+82     	; 0x26ea <changeCurrent+0x2c8>
			case 1: // vibrato
				ym.value = &ym.vibrato;
    2698:	83 e9       	ldi	r24, 0x93	; 147
    269a:	96 e0       	ldi	r25, 0x06	; 6
    269c:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <ym+0x7>
    26a0:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <ym+0x6>
				printToLCD("vibrato",0);
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	70 e0       	ldi	r23, 0x00	; 0
    26a8:	8e ec       	ldi	r24, 0xCE	; 206
    26aa:	94 e0       	ldi	r25, 0x04	; 4
    26ac:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    26b0:	1c c0       	rjmp	.+56     	; 0x26ea <changeCurrent+0x2c8>
			case 2: // tremolo
				ym.value = &ym.tremolo;
    26b2:	85 e9       	ldi	r24, 0x95	; 149
    26b4:	96 e0       	ldi	r25, 0x06	; 6
    26b6:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <ym+0x7>
    26ba:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <ym+0x6>
				printToLCD("AM sensitivity",0);
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	70 e0       	ldi	r23, 0x00	; 0
    26c2:	86 ed       	ldi	r24, 0xD6	; 214
    26c4:	94 e0       	ldi	r25, 0x04	; 4
    26c6:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
    26ca:	0f c0       	rjmp	.+30     	; 0x26ea <changeCurrent+0x2c8>
			case 3: // am
				ym.value = &ym.amOn[op];
    26cc:	dd 27       	eor	r29, r29
    26ce:	cc 0f       	add	r28, r28
    26d0:	dd 1f       	adc	r29, r29
    26d2:	c9 56       	subi	r28, 0x69	; 105
    26d4:	d9 4f       	sbci	r29, 0xF9	; 249
    26d6:	d0 93 05 06 	sts	0x0605, r29	; 0x800605 <ym+0x7>
    26da:	c0 93 04 06 	sts	0x0604, r28	; 0x800604 <ym+0x6>
				printToLCD("AM",4);
    26de:	64 e0       	ldi	r22, 0x04	; 4
    26e0:	70 e0       	ldi	r23, 0x00	; 0
    26e2:	85 ee       	ldi	r24, 0xE5	; 229
    26e4:	94 e0       	ldi	r25, 0x04	; 4
    26e6:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
				break;
		}
	}
}
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	08 95       	ret

000026f0 <changeValue>:

// value of currently selected param has been changed: restrict parameter value within max/min limits, write to YM2612, and update LCD
void changeValue(){
    26f0:	8f 92       	push	r8
    26f2:	af 92       	push	r10
    26f4:	cf 92       	push	r12
    26f6:	ef 92       	push	r14
    26f8:	0f 93       	push	r16
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
	int* val = ym.value;
    26fe:	ee ef       	ldi	r30, 0xFE	; 254
    2700:	f5 e0       	ldi	r31, 0x05	; 5
    2702:	26 81       	ldd	r18, Z+6	; 0x06
    2704:	37 81       	ldd	r19, Z+7	; 0x07
	int op = ym.op;
    2706:	c0 81       	ld	r28, Z
    2708:	d1 81       	ldd	r29, Z+1	; 0x01
	
	// group 0
	if(val == &ym.patchNum){
    270a:	86 e0       	ldi	r24, 0x06	; 6
    270c:	2a 32       	cpi	r18, 0x2A	; 42
    270e:	38 07       	cpc	r19, r24
    2710:	89 f4       	brne	.+34     	; 0x2734 <changeValue+0x44>
		minMaxValue(&ym.patchNum,0,17);
    2712:	41 e1       	ldi	r20, 0x11	; 17
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	70 e0       	ldi	r23, 0x00	; 0
    271a:	8a e2       	ldi	r24, 0x2A	; 42
    271c:	96 e0       	ldi	r25, 0x06	; 6
    271e:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		preset();
    2722:	0e 94 03 07 	call	0xe06	; 0xe06 <preset>
		printToLCD("preset patch",7);
    2726:	67 e0       	ldi	r22, 0x07	; 7
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	87 e3       	ldi	r24, 0x37	; 55
    272c:	94 e0       	ldi	r25, 0x04	; 4
    272e:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2732:	1e c3       	rjmp	.+1596   	; 0x2d70 <changeValue+0x680>
		
	// group 1
	} else if(val == &ym.algorithm){
    2734:	86 e0       	ldi	r24, 0x06	; 6
    2736:	2d 33       	cpi	r18, 0x3D	; 61
    2738:	38 07       	cpc	r19, r24
    273a:	21 f5       	brne	.+72     	; 0x2784 <changeValue+0x94>
		minMaxValue(&ym.algorithm,0,7);
    273c:	47 e0       	ldi	r20, 0x07	; 7
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	8d e3       	ldi	r24, 0x3D	; 61
    2746:	96 e0       	ldi	r25, 0x06	; 6
    2748:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.algorithm,ym.feedback,0xB0,0,3,0,1,0,0,0);
    274c:	40 91 3f 06 	lds	r20, 0x063F	; 0x80063f <ym+0x41>
    2750:	60 91 3d 06 	lds	r22, 0x063D	; 0x80063d <ym+0x3f>
    2754:	1f 92       	push	r1
    2756:	1f 92       	push	r1
    2758:	81 2c       	mov	r8, r1
    275a:	aa 24       	eor	r10, r10
    275c:	a3 94       	inc	r10
    275e:	c1 2c       	mov	r12, r1
    2760:	0f 2e       	mov	r0, r31
    2762:	f3 e0       	ldi	r31, 0x03	; 3
    2764:	ef 2e       	mov	r14, r31
    2766:	f0 2d       	mov	r31, r0
    2768:	00 e0       	ldi	r16, 0x00	; 0
    276a:	20 eb       	ldi	r18, 0xB0	; 176
    276c:	8c 2f       	mov	r24, r28
    276e:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("algorithm",3);
    2772:	63 e0       	ldi	r22, 0x03	; 3
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	84 e4       	ldi	r24, 0x44	; 68
    2778:	94 e0       	ldi	r25, 0x04	; 4
    277a:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	f6 c2       	rjmp	.+1516   	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.feedback){
    2784:	86 e0       	ldi	r24, 0x06	; 6
    2786:	2f 33       	cpi	r18, 0x3F	; 63
    2788:	38 07       	cpc	r19, r24
    278a:	09 f5       	brne	.+66     	; 0x27ce <changeValue+0xde>
		minMaxValue(&ym.feedback,0,7);
    278c:	47 e0       	ldi	r20, 0x07	; 7
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	70 e0       	ldi	r23, 0x00	; 0
    2794:	8f e3       	ldi	r24, 0x3F	; 63
    2796:	96 e0       	ldi	r25, 0x06	; 6
    2798:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.feedback,ym.algorithm,0xB0,3,0,0,1,0,0,0);
    279c:	40 91 3d 06 	lds	r20, 0x063D	; 0x80063d <ym+0x3f>
    27a0:	60 91 3f 06 	lds	r22, 0x063F	; 0x80063f <ym+0x41>
    27a4:	1f 92       	push	r1
    27a6:	1f 92       	push	r1
    27a8:	81 2c       	mov	r8, r1
    27aa:	aa 24       	eor	r10, r10
    27ac:	a3 94       	inc	r10
    27ae:	c1 2c       	mov	r12, r1
    27b0:	e1 2c       	mov	r14, r1
    27b2:	03 e0       	ldi	r16, 0x03	; 3
    27b4:	20 eb       	ldi	r18, 0xB0	; 176
    27b6:	8c 2f       	mov	r24, r28
    27b8:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("feedback",0);
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	70 e0       	ldi	r23, 0x00	; 0
    27c0:	8d e7       	ldi	r24, 0x7D	; 125
    27c2:	94 e0       	ldi	r25, 0x04	; 4
    27c4:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	d1 c2       	rjmp	.+1442   	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.multiple[op]){
    27ce:	ce 01       	movw	r24, r28
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	87 5b       	subi	r24, 0xB7	; 183
    27d6:	99 4f       	sbci	r25, 0xF9	; 249
    27d8:	28 17       	cp	r18, r24
    27da:	39 07       	cpc	r19, r25
    27dc:	61 f5       	brne	.+88     	; 0x2836 <changeValue+0x146>
		minMaxValue(&ym.multiple[op],0,15);
    27de:	4f e0       	ldi	r20, 0x0F	; 15
    27e0:	50 e0       	ldi	r21, 0x00	; 0
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.multiple[op],ym.detune[op],0x30,0,4,1,1,6,0,0);
    27ea:	ce 01       	movw	r24, r28
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	82 50       	subi	r24, 0x02	; 2
    27f2:	9a 4f       	sbci	r25, 0xFA	; 250
    27f4:	fc 01       	movw	r30, r24
    27f6:	ed 5b       	subi	r30, 0xBD	; 189
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	40 81       	ld	r20, Z
    27fc:	38 96       	adiw	r30, 0x08	; 8
    27fe:	60 81       	ld	r22, Z
    2800:	1f 92       	push	r1
    2802:	1f 92       	push	r1
    2804:	0f 2e       	mov	r0, r31
    2806:	f6 e0       	ldi	r31, 0x06	; 6
    2808:	8f 2e       	mov	r8, r31
    280a:	f0 2d       	mov	r31, r0
    280c:	aa 24       	eor	r10, r10
    280e:	a3 94       	inc	r10
    2810:	cc 24       	eor	r12, r12
    2812:	c3 94       	inc	r12
    2814:	68 94       	set
    2816:	ee 24       	eor	r14, r14
    2818:	e2 f8       	bld	r14, 2
    281a:	00 e0       	ldi	r16, 0x00	; 0
    281c:	20 e3       	ldi	r18, 0x30	; 48
    281e:	8c 2f       	mov	r24, r28
    2820:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("freq mult",2);
    2824:	62 e0       	ldi	r22, 0x02	; 2
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	86 e8       	ldi	r24, 0x86	; 134
    282a:	94 e0       	ldi	r25, 0x04	; 4
    282c:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	9d c2       	rjmp	.+1338   	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.detune[op]){
    2836:	ce 01       	movw	r24, r28
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	8f 5b       	subi	r24, 0xBF	; 191
    283e:	99 4f       	sbci	r25, 0xF9	; 249
    2840:	28 17       	cp	r18, r24
    2842:	39 07       	cpc	r19, r25
    2844:	51 f5       	brne	.+84     	; 0x289a <changeValue+0x1aa>
		minMaxValue(&ym.detune[op],-3,3);
    2846:	43 e0       	ldi	r20, 0x03	; 3
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	6d ef       	ldi	r22, 0xFD	; 253
    284c:	7f ef       	ldi	r23, 0xFF	; 255
    284e:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.detune[op],ym.multiple[op],0x30,4,0,1,1,5,0,0);
    2852:	ce 01       	movw	r24, r28
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	82 50       	subi	r24, 0x02	; 2
    285a:	9a 4f       	sbci	r25, 0xFA	; 250
    285c:	fc 01       	movw	r30, r24
    285e:	e5 5b       	subi	r30, 0xB5	; 181
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	40 81       	ld	r20, Z
    2864:	38 97       	sbiw	r30, 0x08	; 8
    2866:	60 81       	ld	r22, Z
    2868:	1f 92       	push	r1
    286a:	1f 92       	push	r1
    286c:	0f 2e       	mov	r0, r31
    286e:	f5 e0       	ldi	r31, 0x05	; 5
    2870:	8f 2e       	mov	r8, r31
    2872:	f0 2d       	mov	r31, r0
    2874:	aa 24       	eor	r10, r10
    2876:	a3 94       	inc	r10
    2878:	cc 24       	eor	r12, r12
    287a:	c3 94       	inc	r12
    287c:	e1 2c       	mov	r14, r1
    287e:	04 e0       	ldi	r16, 0x04	; 4
    2880:	20 e3       	ldi	r18, 0x30	; 48
    2882:	8c 2f       	mov	r24, r28
    2884:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("detune",1);
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	70 e0       	ldi	r23, 0x00	; 0
    288c:	80 e9       	ldi	r24, 0x90	; 144
    288e:	94 e0       	ldi	r25, 0x04	; 4
    2890:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	6b c2       	rjmp	.+1238   	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.totalLvl[op]){
    289a:	ce 01       	movw	r24, r28
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	8f 5a       	subi	r24, 0xAF	; 175
    28a2:	99 4f       	sbci	r25, 0xF9	; 249
    28a4:	28 17       	cp	r18, r24
    28a6:	39 07       	cpc	r19, r25
    28a8:	39 f5       	brne	.+78     	; 0x28f8 <changeValue+0x208>
		minMaxValue(&ym.totalLvl[op],0,127);
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	70 e0       	ldi	r23, 0x00	; 0
    28b2:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.totalLvl[op],0,0x40,0,0,1,1,9,127,0);
    28b6:	fe 01       	movw	r30, r28
    28b8:	ee 0f       	add	r30, r30
    28ba:	ff 1f       	adc	r31, r31
    28bc:	ef 5a       	subi	r30, 0xAF	; 175
    28be:	f9 4f       	sbci	r31, 0xF9	; 249
    28c0:	60 81       	ld	r22, Z
    28c2:	1f 92       	push	r1
    28c4:	8f e7       	ldi	r24, 0x7F	; 127
    28c6:	8f 93       	push	r24
    28c8:	0f 2e       	mov	r0, r31
    28ca:	f9 e0       	ldi	r31, 0x09	; 9
    28cc:	8f 2e       	mov	r8, r31
    28ce:	f0 2d       	mov	r31, r0
    28d0:	aa 24       	eor	r10, r10
    28d2:	a3 94       	inc	r10
    28d4:	cc 24       	eor	r12, r12
    28d6:	c3 94       	inc	r12
    28d8:	e1 2c       	mov	r14, r1
    28da:	00 e0       	ldi	r16, 0x00	; 0
    28dc:	20 e4       	ldi	r18, 0x40	; 64
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	8c 2f       	mov	r24, r28
    28e2:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("level",1);
    28e6:	61 e0       	ldi	r22, 0x01	; 1
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	87 e9       	ldi	r24, 0x97	; 151
    28ec:	94 e0       	ldi	r25, 0x04	; 4
    28ee:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	3c c2       	rjmp	.+1144   	; 0x2d70 <changeValue+0x680>
		
	// group 2
	} else if(val == &ym.attack[op]){
    28f8:	ce 01       	movw	r24, r28
    28fa:	88 0f       	add	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	87 5a       	subi	r24, 0xA7	; 167
    2900:	99 4f       	sbci	r25, 0xF9	; 249
    2902:	28 17       	cp	r18, r24
    2904:	39 07       	cpc	r19, r25
    2906:	61 f5       	brne	.+88     	; 0x2960 <changeValue+0x270>
		minMaxValue(&ym.attack[op],0,31);
    2908:	4f e1       	ldi	r20, 0x1F	; 31
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	70 e0       	ldi	r23, 0x00	; 0
    2910:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.attack[op],ym.rateScl[op],0x50,0,6,1,1,1,31,0);
    2914:	ce 01       	movw	r24, r28
    2916:	88 0f       	add	r24, r24
    2918:	99 1f       	adc	r25, r25
    291a:	82 50       	subi	r24, 0x02	; 2
    291c:	9a 4f       	sbci	r25, 0xFA	; 250
    291e:	fc 01       	movw	r30, r24
    2920:	ed 57       	subi	r30, 0x7D	; 125
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	40 81       	ld	r20, Z
    2926:	b8 97       	sbiw	r30, 0x28	; 40
    2928:	60 81       	ld	r22, Z
    292a:	1f 92       	push	r1
    292c:	8f e1       	ldi	r24, 0x1F	; 31
    292e:	8f 93       	push	r24
    2930:	88 24       	eor	r8, r8
    2932:	83 94       	inc	r8
    2934:	aa 24       	eor	r10, r10
    2936:	a3 94       	inc	r10
    2938:	cc 24       	eor	r12, r12
    293a:	c3 94       	inc	r12
    293c:	0f 2e       	mov	r0, r31
    293e:	f6 e0       	ldi	r31, 0x06	; 6
    2940:	ef 2e       	mov	r14, r31
    2942:	f0 2d       	mov	r31, r0
    2944:	00 e0       	ldi	r16, 0x00	; 0
    2946:	20 e5       	ldi	r18, 0x50	; 80
    2948:	8c 2f       	mov	r24, r28
    294a:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("attack",1);
    294e:	61 e0       	ldi	r22, 0x01	; 1
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	8e e4       	ldi	r24, 0x4E	; 78
    2954:	94 e0       	ldi	r25, 0x04	; 4
    2956:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	08 c2       	rjmp	.+1040   	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.decay[op]){
    2960:	ce 01       	movw	r24, r28
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	8f 59       	subi	r24, 0x9F	; 159
    2968:	99 4f       	sbci	r25, 0xF9	; 249
    296a:	28 17       	cp	r18, r24
    296c:	39 07       	cpc	r19, r25
    296e:	61 f5       	brne	.+88     	; 0x29c8 <changeValue+0x2d8>
		minMaxValue(&ym.decay[op],0,31);
    2970:	4f e1       	ldi	r20, 0x1F	; 31
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.decay[op],ym.amOn[op],0x60,0,7,1,1,1,31,0);
    297c:	ce 01       	movw	r24, r28
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	82 50       	subi	r24, 0x02	; 2
    2984:	9a 4f       	sbci	r25, 0xFA	; 250
    2986:	fc 01       	movw	r30, r24
    2988:	e7 56       	subi	r30, 0x67	; 103
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	40 81       	ld	r20, Z
    298e:	f6 97       	sbiw	r30, 0x36	; 54
    2990:	60 81       	ld	r22, Z
    2992:	1f 92       	push	r1
    2994:	8f e1       	ldi	r24, 0x1F	; 31
    2996:	8f 93       	push	r24
    2998:	88 24       	eor	r8, r8
    299a:	83 94       	inc	r8
    299c:	aa 24       	eor	r10, r10
    299e:	a3 94       	inc	r10
    29a0:	cc 24       	eor	r12, r12
    29a2:	c3 94       	inc	r12
    29a4:	0f 2e       	mov	r0, r31
    29a6:	f7 e0       	ldi	r31, 0x07	; 7
    29a8:	ef 2e       	mov	r14, r31
    29aa:	f0 2d       	mov	r31, r0
    29ac:	00 e0       	ldi	r16, 0x00	; 0
    29ae:	20 e6       	ldi	r18, 0x60	; 96
    29b0:	8c 2f       	mov	r24, r28
    29b2:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("decay",1);
    29b6:	61 e0       	ldi	r22, 0x01	; 1
    29b8:	70 e0       	ldi	r23, 0x00	; 0
    29ba:	8d e9       	ldi	r24, 0x9D	; 157
    29bc:	94 e0       	ldi	r25, 0x04	; 4
    29be:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	d4 c1       	rjmp	.+936    	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.susLvl[op]){
    29c8:	ce 01       	movw	r24, r28
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	87 59       	subi	r24, 0x97	; 151
    29d0:	99 4f       	sbci	r25, 0xF9	; 249
    29d2:	28 17       	cp	r18, r24
    29d4:	39 07       	cpc	r19, r25
    29d6:	59 f5       	brne	.+86     	; 0x2a2e <changeValue+0x33e>
		minMaxValue(&ym.susLvl[op],0,15);
    29d8:	4f e0       	ldi	r20, 0x0F	; 15
    29da:	50 e0       	ldi	r21, 0x00	; 0
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.susLvl[op],ym.release[op],0x80,4,0,1,1,3,15,15);
    29e4:	ce 01       	movw	r24, r28
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	82 50       	subi	r24, 0x02	; 2
    29ec:	9a 4f       	sbci	r25, 0xFA	; 250
    29ee:	fc 01       	movw	r30, r24
    29f0:	e5 58       	subi	r30, 0x85	; 133
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	40 81       	ld	r20, Z
    29f6:	70 97       	sbiw	r30, 0x10	; 16
    29f8:	60 81       	ld	r22, Z
    29fa:	8f e0       	ldi	r24, 0x0F	; 15
    29fc:	8f 93       	push	r24
    29fe:	8f 93       	push	r24
    2a00:	0f 2e       	mov	r0, r31
    2a02:	f3 e0       	ldi	r31, 0x03	; 3
    2a04:	8f 2e       	mov	r8, r31
    2a06:	f0 2d       	mov	r31, r0
    2a08:	aa 24       	eor	r10, r10
    2a0a:	a3 94       	inc	r10
    2a0c:	cc 24       	eor	r12, r12
    2a0e:	c3 94       	inc	r12
    2a10:	e1 2c       	mov	r14, r1
    2a12:	04 e0       	ldi	r16, 0x04	; 4
    2a14:	20 e8       	ldi	r18, 0x80	; 128
    2a16:	8c 2f       	mov	r24, r28
    2a18:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("sustain",1);
    2a1c:	61 e0       	ldi	r22, 0x01	; 1
    2a1e:	70 e0       	ldi	r23, 0x00	; 0
    2a20:	83 ea       	ldi	r24, 0xA3	; 163
    2a22:	94 e0       	ldi	r25, 0x04	; 4
    2a24:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	a1 c1       	rjmp	.+834    	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.susRate[op]){
    2a2e:	ce 01       	movw	r24, r28
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	8f 58       	subi	r24, 0x8F	; 143
    2a36:	99 4f       	sbci	r25, 0xF9	; 249
    2a38:	28 17       	cp	r18, r24
    2a3a:	39 07       	cpc	r19, r25
    2a3c:	39 f5       	brne	.+78     	; 0x2a8c <changeValue+0x39c>
		minMaxValue(&ym.susRate[op],0,31);
    2a3e:	4f e1       	ldi	r20, 0x1F	; 31
    2a40:	50 e0       	ldi	r21, 0x00	; 0
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.susRate[op],0,0x70,0,0,1,1,7,31,0); // case 7
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ee 0f       	add	r30, r30
    2a4e:	ff 1f       	adc	r31, r31
    2a50:	ef 58       	subi	r30, 0x8F	; 143
    2a52:	f9 4f       	sbci	r31, 0xF9	; 249
    2a54:	60 81       	ld	r22, Z
    2a56:	1f 92       	push	r1
    2a58:	8f e1       	ldi	r24, 0x1F	; 31
    2a5a:	8f 93       	push	r24
    2a5c:	0f 2e       	mov	r0, r31
    2a5e:	f7 e0       	ldi	r31, 0x07	; 7
    2a60:	8f 2e       	mov	r8, r31
    2a62:	f0 2d       	mov	r31, r0
    2a64:	aa 24       	eor	r10, r10
    2a66:	a3 94       	inc	r10
    2a68:	cc 24       	eor	r12, r12
    2a6a:	c3 94       	inc	r12
    2a6c:	e1 2c       	mov	r14, r1
    2a6e:	00 e0       	ldi	r16, 0x00	; 0
    2a70:	20 e7       	ldi	r18, 0x70	; 112
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	8c 2f       	mov	r24, r28
    2a76:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("sust rate",1);
    2a7a:	61 e0       	ldi	r22, 0x01	; 1
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	8b ea       	ldi	r24, 0xAB	; 171
    2a80:	94 e0       	ldi	r25, 0x04	; 4
    2a82:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	72 c1       	rjmp	.+740    	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.release[op]){
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	88 0f       	add	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	87 58       	subi	r24, 0x87	; 135
    2a94:	99 4f       	sbci	r25, 0xF9	; 249
    2a96:	28 17       	cp	r18, r24
    2a98:	39 07       	cpc	r19, r25
    2a9a:	69 f5       	brne	.+90     	; 0x2af6 <changeValue+0x406>
		minMaxValue(&ym.release[op],0,15);
    2a9c:	4f e0       	ldi	r20, 0x0F	; 15
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.release[op],ym.susLvl[op],0x80,0,4,1,1,3,15,15); // case 3
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	88 0f       	add	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	82 50       	subi	r24, 0x02	; 2
    2ab0:	9a 4f       	sbci	r25, 0xFA	; 250
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	e5 59       	subi	r30, 0x95	; 149
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	40 81       	ld	r20, Z
    2aba:	70 96       	adiw	r30, 0x10	; 16
    2abc:	60 81       	ld	r22, Z
    2abe:	8f e0       	ldi	r24, 0x0F	; 15
    2ac0:	8f 93       	push	r24
    2ac2:	8f 93       	push	r24
    2ac4:	0f 2e       	mov	r0, r31
    2ac6:	f3 e0       	ldi	r31, 0x03	; 3
    2ac8:	8f 2e       	mov	r8, r31
    2aca:	f0 2d       	mov	r31, r0
    2acc:	aa 24       	eor	r10, r10
    2ace:	a3 94       	inc	r10
    2ad0:	cc 24       	eor	r12, r12
    2ad2:	c3 94       	inc	r12
    2ad4:	68 94       	set
    2ad6:	ee 24       	eor	r14, r14
    2ad8:	e2 f8       	bld	r14, 2
    2ada:	00 e0       	ldi	r16, 0x00	; 0
    2adc:	20 e8       	ldi	r18, 0x80	; 128
    2ade:	8c 2f       	mov	r24, r28
    2ae0:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("release",1);
    2ae4:	61 e0       	ldi	r22, 0x01	; 1
    2ae6:	70 e0       	ldi	r23, 0x00	; 0
    2ae8:	85 eb       	ldi	r24, 0xB5	; 181
    2aea:	94 e0       	ldi	r25, 0x04	; 4
    2aec:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	3d c1       	rjmp	.+634    	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.rateScl[op]){
    2af6:	ce 01       	movw	r24, r28
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	8f 57       	subi	r24, 0x7F	; 127
    2afe:	99 4f       	sbci	r25, 0xF9	; 249
    2b00:	28 17       	cp	r18, r24
    2b02:	39 07       	cpc	r19, r25
    2b04:	51 f5       	brne	.+84     	; 0x2b5a <changeValue+0x46a>
		minMaxValue(&ym.rateScl[op],0,3);
    2b06:	43 e0       	ldi	r20, 0x03	; 3
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.rateScl[op],ym.attack[op],0x50,6,0,1,1,2,0,31); // case 2
    2b12:	ce 01       	movw	r24, r28
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	82 50       	subi	r24, 0x02	; 2
    2b1a:	9a 4f       	sbci	r25, 0xFA	; 250
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	e5 5a       	subi	r30, 0xA5	; 165
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	40 81       	ld	r20, Z
    2b24:	b8 96       	adiw	r30, 0x28	; 40
    2b26:	60 81       	ld	r22, Z
    2b28:	8f e1       	ldi	r24, 0x1F	; 31
    2b2a:	8f 93       	push	r24
    2b2c:	1f 92       	push	r1
    2b2e:	68 94       	set
    2b30:	88 24       	eor	r8, r8
    2b32:	81 f8       	bld	r8, 1
    2b34:	aa 24       	eor	r10, r10
    2b36:	a3 94       	inc	r10
    2b38:	cc 24       	eor	r12, r12
    2b3a:	c3 94       	inc	r12
    2b3c:	e1 2c       	mov	r14, r1
    2b3e:	06 e0       	ldi	r16, 0x06	; 6
    2b40:	20 e5       	ldi	r18, 0x50	; 80
    2b42:	8c 2f       	mov	r24, r28
    2b44:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("rate scale",1);
    2b48:	61 e0       	ldi	r22, 0x01	; 1
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	8d eb       	ldi	r24, 0xBD	; 189
    2b4e:	94 e0       	ldi	r25, 0x04	; 4
    2b50:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	0b c1       	rjmp	.+534    	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.ssgeg[op]){ // special case
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	87 57       	subi	r24, 0x77	; 119
    2b62:	99 4f       	sbci	r25, 0xF9	; 249
    2b64:	28 17       	cp	r18, r24
    2b66:	39 07       	cpc	r19, r25
    2b68:	09 f0       	breq	.+2      	; 0x2b6c <changeValue+0x47c>
    2b6a:	42 c0       	rjmp	.+132    	; 0x2bf0 <changeValue+0x500>
		minMaxValue(&ym.ssgeg[op],0,8);
    2b6c:	48 e0       	ldi	r20, 0x08	; 8
    2b6e:	50 e0       	ldi	r21, 0x00	; 0
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		if(ym.ssgeg[op] == 0){
    2b78:	fe 01       	movw	r30, r28
    2b7a:	ee 0f       	add	r30, r30
    2b7c:	ff 1f       	adc	r31, r31
    2b7e:	e7 57       	subi	r30, 0x77	; 119
    2b80:	f9 4f       	sbci	r31, 0xF9	; 249
    2b82:	60 81       	ld	r22, Z
    2b84:	71 81       	ldd	r23, Z+1	; 0x01
    2b86:	61 15       	cp	r22, r1
    2b88:	71 05       	cpc	r23, r1
    2b8a:	b9 f4       	brne	.+46     	; 0x2bba <changeValue+0x4ca>
			writeToYM(op,0,0,0x90,0,3,1,1,4,0,0);
    2b8c:	1f 92       	push	r1
    2b8e:	1f 92       	push	r1
    2b90:	68 94       	set
    2b92:	88 24       	eor	r8, r8
    2b94:	82 f8       	bld	r8, 2
    2b96:	aa 24       	eor	r10, r10
    2b98:	a3 94       	inc	r10
    2b9a:	cc 24       	eor	r12, r12
    2b9c:	c3 94       	inc	r12
    2b9e:	0f 2e       	mov	r0, r31
    2ba0:	f3 e0       	ldi	r31, 0x03	; 3
    2ba2:	ef 2e       	mov	r14, r31
    2ba4:	f0 2d       	mov	r31, r0
    2ba6:	00 e0       	ldi	r16, 0x00	; 0
    2ba8:	20 e9       	ldi	r18, 0x90	; 144
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	60 e0       	ldi	r22, 0x00	; 0
    2bae:	8c 2f       	mov	r24, r28
    2bb0:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	14 c0       	rjmp	.+40     	; 0x2be2 <changeValue+0x4f2>
		} else {
			writeToYM(op,ym.ssgeg[op]-1,1,0x90,0,3,1,1,0,0,0);
    2bba:	61 50       	subi	r22, 0x01	; 1
    2bbc:	1f 92       	push	r1
    2bbe:	1f 92       	push	r1
    2bc0:	81 2c       	mov	r8, r1
    2bc2:	aa 24       	eor	r10, r10
    2bc4:	a3 94       	inc	r10
    2bc6:	cc 24       	eor	r12, r12
    2bc8:	c3 94       	inc	r12
    2bca:	0f 2e       	mov	r0, r31
    2bcc:	f3 e0       	ldi	r31, 0x03	; 3
    2bce:	ef 2e       	mov	r14, r31
    2bd0:	f0 2d       	mov	r31, r0
    2bd2:	00 e0       	ldi	r16, 0x00	; 0
    2bd4:	20 e9       	ldi	r18, 0x90	; 144
    2bd6:	41 e0       	ldi	r20, 0x01	; 1
    2bd8:	8c 2f       	mov	r24, r28
    2bda:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
		}
		printToLCD("SSGEG",6);
    2be2:	66 e0       	ldi	r22, 0x06	; 6
    2be4:	70 e0       	ldi	r23, 0x00	; 0
    2be6:	88 ec       	ldi	r24, 0xC8	; 200
    2be8:	94 e0       	ldi	r25, 0x04	; 4
    2bea:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2bee:	c0 c0       	rjmp	.+384    	; 0x2d70 <changeValue+0x680>
		
	// group 3
	} else if(val == &ym.lfoFreq){ // special case
    2bf0:	86 e0       	ldi	r24, 0x06	; 6
    2bf2:	21 39       	cpi	r18, 0x91	; 145
    2bf4:	38 07       	cpc	r19, r24
    2bf6:	d9 f5       	brne	.+118    	; 0x2c6e <changeValue+0x57e>
		minMaxValue(&ym.lfoFreq,0,8);
    2bf8:	48 e0       	ldi	r20, 0x08	; 8
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	60 e0       	ldi	r22, 0x00	; 0
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	81 e9       	ldi	r24, 0x91	; 145
    2c02:	96 e0       	ldi	r25, 0x06	; 6
    2c04:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		if(ym.lfoFreq == 0){
    2c08:	60 91 91 06 	lds	r22, 0x0691	; 0x800691 <ym+0x93>
    2c0c:	70 91 92 06 	lds	r23, 0x0692	; 0x800692 <ym+0x94>
    2c10:	61 15       	cp	r22, r1
    2c12:	71 05       	cpc	r23, r1
    2c14:	99 f4       	brne	.+38     	; 0x2c3c <changeValue+0x54c>
			writeToYM(op,0,0,0x22,0,3,0,0,0,0,0);
    2c16:	1f 92       	push	r1
    2c18:	1f 92       	push	r1
    2c1a:	81 2c       	mov	r8, r1
    2c1c:	a1 2c       	mov	r10, r1
    2c1e:	c1 2c       	mov	r12, r1
    2c20:	0f 2e       	mov	r0, r31
    2c22:	f3 e0       	ldi	r31, 0x03	; 3
    2c24:	ef 2e       	mov	r14, r31
    2c26:	f0 2d       	mov	r31, r0
    2c28:	00 e0       	ldi	r16, 0x00	; 0
    2c2a:	22 e2       	ldi	r18, 0x22	; 34
    2c2c:	40 e0       	ldi	r20, 0x00	; 0
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	8c 2f       	mov	r24, r28
    2c32:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	12 c0       	rjmp	.+36     	; 0x2c60 <changeValue+0x570>
		} else {
			writeToYM(op,ym.lfoFreq-1,1,0x22,0,3,0,0,0,0,0);
    2c3c:	61 50       	subi	r22, 0x01	; 1
    2c3e:	1f 92       	push	r1
    2c40:	1f 92       	push	r1
    2c42:	81 2c       	mov	r8, r1
    2c44:	a1 2c       	mov	r10, r1
    2c46:	c1 2c       	mov	r12, r1
    2c48:	0f 2e       	mov	r0, r31
    2c4a:	f3 e0       	ldi	r31, 0x03	; 3
    2c4c:	ef 2e       	mov	r14, r31
    2c4e:	f0 2d       	mov	r31, r0
    2c50:	00 e0       	ldi	r16, 0x00	; 0
    2c52:	22 e2       	ldi	r18, 0x22	; 34
    2c54:	41 e0       	ldi	r20, 0x01	; 1
    2c56:	8c 2f       	mov	r24, r28
    2c58:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
		}
		printToLCD("LFO freq",5);
    2c60:	65 e0       	ldi	r22, 0x05	; 5
    2c62:	70 e0       	ldi	r23, 0x00	; 0
    2c64:	85 e5       	ldi	r24, 0x55	; 85
    2c66:	94 e0       	ldi	r25, 0x04	; 4
    2c68:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2c6c:	81 c0       	rjmp	.+258    	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.vibrato){
    2c6e:	86 e0       	ldi	r24, 0x06	; 6
    2c70:	23 39       	cpi	r18, 0x93	; 147
    2c72:	38 07       	cpc	r19, r24
    2c74:	29 f5       	brne	.+74     	; 0x2cc0 <changeValue+0x5d0>
		minMaxValue(&ym.vibrato,0,7);
    2c76:	47 e0       	ldi	r20, 0x07	; 7
    2c78:	50 e0       	ldi	r21, 0x00	; 0
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	83 e9       	ldi	r24, 0x93	; 147
    2c80:	96 e0       	ldi	r25, 0x06	; 6
    2c82:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.vibrato,ym.tremolo,0xB4,0,4,0,1,8,0,0); // case 8
    2c86:	40 91 95 06 	lds	r20, 0x0695	; 0x800695 <ym+0x97>
    2c8a:	60 91 93 06 	lds	r22, 0x0693	; 0x800693 <ym+0x95>
    2c8e:	1f 92       	push	r1
    2c90:	1f 92       	push	r1
    2c92:	68 94       	set
    2c94:	88 24       	eor	r8, r8
    2c96:	83 f8       	bld	r8, 3
    2c98:	aa 24       	eor	r10, r10
    2c9a:	a3 94       	inc	r10
    2c9c:	c1 2c       	mov	r12, r1
    2c9e:	68 94       	set
    2ca0:	ee 24       	eor	r14, r14
    2ca2:	e2 f8       	bld	r14, 2
    2ca4:	00 e0       	ldi	r16, 0x00	; 0
    2ca6:	24 eb       	ldi	r18, 0xB4	; 180
    2ca8:	8c 2f       	mov	r24, r28
    2caa:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("vibrato",0);
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	70 e0       	ldi	r23, 0x00	; 0
    2cb2:	8e ec       	ldi	r24, 0xCE	; 206
    2cb4:	94 e0       	ldi	r25, 0x04	; 4
    2cb6:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	58 c0       	rjmp	.+176    	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.tremolo){
    2cc0:	86 e0       	ldi	r24, 0x06	; 6
    2cc2:	25 39       	cpi	r18, 0x95	; 149
    2cc4:	38 07       	cpc	r19, r24
    2cc6:	19 f5       	brne	.+70     	; 0x2d0e <changeValue+0x61e>
		minMaxValue(&ym.tremolo,0,3);
    2cc8:	43 e0       	ldi	r20, 0x03	; 3
    2cca:	50 e0       	ldi	r21, 0x00	; 0
    2ccc:	60 e0       	ldi	r22, 0x00	; 0
    2cce:	70 e0       	ldi	r23, 0x00	; 0
    2cd0:	85 e9       	ldi	r24, 0x95	; 149
    2cd2:	96 e0       	ldi	r25, 0x06	; 6
    2cd4:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.tremolo,ym.vibrato,0xB4,4,0,0,1,8,0,0); // case 8
    2cd8:	40 91 93 06 	lds	r20, 0x0693	; 0x800693 <ym+0x95>
    2cdc:	60 91 95 06 	lds	r22, 0x0695	; 0x800695 <ym+0x97>
    2ce0:	1f 92       	push	r1
    2ce2:	1f 92       	push	r1
    2ce4:	68 94       	set
    2ce6:	88 24       	eor	r8, r8
    2ce8:	83 f8       	bld	r8, 3
    2cea:	aa 24       	eor	r10, r10
    2cec:	a3 94       	inc	r10
    2cee:	c1 2c       	mov	r12, r1
    2cf0:	e1 2c       	mov	r14, r1
    2cf2:	04 e0       	ldi	r16, 0x04	; 4
    2cf4:	24 eb       	ldi	r18, 0xB4	; 180
    2cf6:	8c 2f       	mov	r24, r28
    2cf8:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("AM sensitivity",0);
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	70 e0       	ldi	r23, 0x00	; 0
    2d00:	86 ed       	ldi	r24, 0xD6	; 214
    2d02:	94 e0       	ldi	r25, 0x04	; 4
    2d04:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	31 c0       	rjmp	.+98     	; 0x2d70 <changeValue+0x680>
		
	} else if(val == &ym.amOn[op]){
    2d0e:	ce 01       	movw	r24, r28
    2d10:	88 0f       	add	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	89 56       	subi	r24, 0x69	; 105
    2d16:	99 4f       	sbci	r25, 0xF9	; 249
    2d18:	28 17       	cp	r18, r24
    2d1a:	39 07       	cpc	r19, r25
    2d1c:	49 f5       	brne	.+82     	; 0x2d70 <changeValue+0x680>
		minMaxValue(&ym.amOn[op],0,1);
    2d1e:	41 e0       	ldi	r20, 0x01	; 1
    2d20:	50 e0       	ldi	r21, 0x00	; 0
    2d22:	60 e0       	ldi	r22, 0x00	; 0
    2d24:	70 e0       	ldi	r23, 0x00	; 0
    2d26:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		writeToYM(op,ym.amOn[op],ym.decay[op],0x60,7,0,1,1,2,0,31); // case 2
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	82 50       	subi	r24, 0x02	; 2
    2d32:	9a 4f       	sbci	r25, 0xFA	; 250
    2d34:	fc 01       	movw	r30, r24
    2d36:	ed 59       	subi	r30, 0x9D	; 157
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	40 81       	ld	r20, Z
    2d3c:	f6 96       	adiw	r30, 0x36	; 54
    2d3e:	60 81       	ld	r22, Z
    2d40:	8f e1       	ldi	r24, 0x1F	; 31
    2d42:	8f 93       	push	r24
    2d44:	1f 92       	push	r1
    2d46:	68 94       	set
    2d48:	88 24       	eor	r8, r8
    2d4a:	81 f8       	bld	r8, 1
    2d4c:	aa 24       	eor	r10, r10
    2d4e:	a3 94       	inc	r10
    2d50:	cc 24       	eor	r12, r12
    2d52:	c3 94       	inc	r12
    2d54:	e1 2c       	mov	r14, r1
    2d56:	07 e0       	ldi	r16, 0x07	; 7
    2d58:	20 e6       	ldi	r18, 0x60	; 96
    2d5a:	8c 2f       	mov	r24, r28
    2d5c:	0e 94 83 01 	call	0x306	; 0x306 <writeToYM>
		printToLCD("AM",4);
    2d60:	64 e0       	ldi	r22, 0x04	; 4
    2d62:	70 e0       	ldi	r23, 0x00	; 0
    2d64:	85 ee       	ldi	r24, 0xE5	; 229
    2d66:	94 e0       	ldi	r25, 0x04	; 4
    2d68:	0e 94 77 02 	call	0x4ee	; 0x4ee <printToLCD>
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
	}
}
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	0f 91       	pop	r16
    2d76:	ef 90       	pop	r14
    2d78:	cf 90       	pop	r12
    2d7a:	af 90       	pop	r10
    2d7c:	8f 90       	pop	r8
    2d7e:	08 95       	ret

00002d80 <note>:

// schedule notes to be turned off or on, format data to be written to YM2612 registers A0c(freq low) and A4 (freq high + block (octave))
void note(uint8_t noteIn, uint8_t velocity, bool on){
    2d80:	df 92       	push	r13
    2d82:	ef 92       	push	r14
    2d84:	ff 92       	push	r15
    2d86:	0f 93       	push	r16
    2d88:	1f 93       	push	r17
    2d8a:	cf 93       	push	r28
    2d8c:	df 93       	push	r29
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	6a 97       	sbiw	r28, 0x1a	; 26
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	f8 2e       	mov	r15, r24
    2da0:	d6 2e       	mov	r13, r22
    2da2:	04 2f       	mov	r16, r20
	cli();
    2da4:	f8 94       	cli
	
	uint16_t noteOut;
	int oct;
	
	oct = noteIn / 12 - 1; // middle C is octave 5 - make it octave 4
    2da6:	1b ea       	ldi	r17, 0xAB	; 171
    2da8:	81 9f       	mul	r24, r17
    2daa:	11 2d       	mov	r17, r1
    2dac:	11 24       	eor	r1, r1
    2dae:	16 95       	lsr	r17
    2db0:	16 95       	lsr	r17
    2db2:	16 95       	lsr	r17
    2db4:	81 2f       	mov	r24, r17
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	9a 83       	std	Y+2, r25	; 0x02
    2dbc:	89 83       	std	Y+1, r24	; 0x01
	
	minMaxValue(&oct, 0, 7); // 'block' can be 0-7 (8 octaves)
    2dbe:	47 e0       	ldi	r20, 0x07	; 7
    2dc0:	50 e0       	ldi	r21, 0x00	; 0
    2dc2:	60 e0       	ldi	r22, 0x00	; 0
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		oct = 0;
	}
	*/
	
	// note frequencies within 1 octave
	uint16_t notes[] = {311, 329, 349, 370, 392, 415, 440, 466, 493, 523, 554, 586};
    2dce:	88 e1       	ldi	r24, 0x18	; 24
    2dd0:	ea ee       	ldi	r30, 0xEA	; 234
    2dd2:	f2 e0       	ldi	r31, 0x02	; 2
    2dd4:	de 01       	movw	r26, r28
    2dd6:	13 96       	adiw	r26, 0x03	; 3
    2dd8:	01 90       	ld	r0, Z+
    2dda:	0d 92       	st	X+, r0
    2ddc:	8a 95       	dec	r24
    2dde:	e1 f7       	brne	.-8      	; 0x2dd8 <note+0x58>
	
	noteOut = notes[noteIn % 12]; // ex. 63 is D# - 63 % 12 = 3 - freq will be 370
    2de0:	81 2f       	mov	r24, r17
    2de2:	88 0f       	add	r24, r24
    2de4:	18 0f       	add	r17, r24
    2de6:	81 2f       	mov	r24, r17
    2de8:	88 0f       	add	r24, r24
    2dea:	88 0f       	add	r24, r24
    2dec:	ef 2d       	mov	r30, r15
    2dee:	e8 1b       	sub	r30, r24
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	ee 0f       	add	r30, r30
    2df4:	ff 1f       	adc	r31, r31
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	8c 0f       	add	r24, r28
    2dfc:	9d 1f       	adc	r25, r29
    2dfe:	e8 0f       	add	r30, r24
    2e00:	f9 1f       	adc	r31, r25
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	93 81       	ldd	r25, Z+3	; 0x03
	
	uint8_t chanGrp; // flag to be written for channels
		
	if(on){ // note on message has been received
    2e06:	01 11       	cpse	r16, r1
    2e08:	8e c0       	rjmp	.+284    	; 0x2f26 <note+0x1a6>
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	be c0       	rjmp	.+380    	; 0x2f8a <note+0x20a>
		for(int i = 0; i < 6; i++){
			chanGrp = (i > 2); // 0 or 1, depending on value of i
    2e0e:	21 e0       	ldi	r18, 0x01	; 1
    2e10:	03 30       	cpi	r16, 0x03	; 3
    2e12:	11 05       	cpc	r17, r1
    2e14:	0c f4       	brge	.+2      	; 0x2e18 <note+0x98>
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	e2 2e       	mov	r14, r18
			
			// channel is not on and is not waiting to be turned on
			if(!ym.notesOn[i][1] && !ym.notesOn[i][2]){
    2e1a:	f8 01       	movw	r30, r16
    2e1c:	ee 0f       	add	r30, r30
    2e1e:	ff 1f       	adc	r31, r31
    2e20:	e0 0f       	add	r30, r16
    2e22:	f1 1f       	adc	r31, r17
    2e24:	e2 50       	subi	r30, 0x02	; 2
    2e26:	fa 4f       	sbci	r31, 0xFA	; 250
    2e28:	23 8d       	ldd	r18, Z+27	; 0x1b
    2e2a:	21 11       	cpse	r18, r1
    2e2c:	2d c0       	rjmp	.+90     	; 0x2e88 <note+0x108>
    2e2e:	f8 01       	movw	r30, r16
    2e30:	ee 0f       	add	r30, r30
    2e32:	ff 1f       	adc	r31, r31
    2e34:	e0 0f       	add	r30, r16
    2e36:	f1 1f       	adc	r31, r17
    2e38:	e2 50       	subi	r30, 0x02	; 2
    2e3a:	fa 4f       	sbci	r31, 0xFA	; 250
    2e3c:	24 8d       	ldd	r18, Z+28	; 0x1c
    2e3e:	21 11       	cpse	r18, r1
    2e40:	23 c0       	rjmp	.+70     	; 0x2e88 <note+0x108>
				ym.vel[i] = velocity; // currently not in use
    2e42:	f8 01       	movw	r30, r16
    2e44:	e2 50       	subi	r30, 0x02	; 2
    2e46:	fa 4f       	sbci	r31, 0xFA	; 250
    2e48:	d4 8a       	std	Z+20, r13	; 0x14
				// format pitch to be written to YM2612
				ym.freq[i][0] = (oct<<3) | ((noteOut & 0x0700)>>8); // top 3 bits of freq, next 3 bits are octave
    2e4a:	9c 01       	movw	r18, r24
    2e4c:	22 27       	eor	r18, r18
    2e4e:	37 70       	andi	r19, 0x07	; 7
    2e50:	99 81       	ldd	r25, Y+1	; 0x01
    2e52:	99 0f       	add	r25, r25
    2e54:	99 0f       	add	r25, r25
    2e56:	99 0f       	add	r25, r25
    2e58:	93 2b       	or	r25, r19
    2e5a:	f8 01       	movw	r30, r16
    2e5c:	34 96       	adiw	r30, 0x04	; 4
    2e5e:	ee 0f       	add	r30, r30
    2e60:	ff 1f       	adc	r31, r31
    2e62:	e2 50       	subi	r30, 0x02	; 2
    2e64:	fa 4f       	sbci	r31, 0xFA	; 250
    2e66:	90 83       	st	Z, r25
				ym.freq[i][1] = (noteOut & 0x00FF); // lower 8 bits of freq
    2e68:	f8 01       	movw	r30, r16
    2e6a:	ee 0f       	add	r30, r30
    2e6c:	ff 1f       	adc	r31, r31
    2e6e:	df 01       	movw	r26, r30
    2e70:	a2 50       	subi	r26, 0x02	; 2
    2e72:	ba 4f       	sbci	r27, 0xFA	; 250
    2e74:	19 96       	adiw	r26, 0x09	; 9
    2e76:	8c 93       	st	X, r24
				ym.notesOn[i][0] = noteIn; 
    2e78:	e0 0f       	add	r30, r16
    2e7a:	f1 1f       	adc	r31, r17
    2e7c:	e2 50       	subi	r30, 0x02	; 2
    2e7e:	fa 4f       	sbci	r31, 0xFA	; 250
    2e80:	f2 8e       	std	Z+26, r15	; 0x1a
				ym.notesOn[i][1] = 1; // schedule note to be turned on
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	83 8f       	std	Z+27, r24	; 0x1b
				break; // only loop until finding first available channel
    2e86:	83 c0       	rjmp	.+262    	; 0x2f8e <note+0x20e>
				
			// if it is already on but the note is the same value, turn channel off and then on again
			} else if(ym.notesOn[i][1] && ym.notesOn[i][2] && ym.notesOn[i][0] == noteIn){
    2e88:	f8 01       	movw	r30, r16
    2e8a:	ee 0f       	add	r30, r30
    2e8c:	ff 1f       	adc	r31, r31
    2e8e:	e0 0f       	add	r30, r16
    2e90:	f1 1f       	adc	r31, r17
    2e92:	e2 50       	subi	r30, 0x02	; 2
    2e94:	fa 4f       	sbci	r31, 0xFA	; 250
    2e96:	23 8d       	ldd	r18, Z+27	; 0x1b
    2e98:	22 23       	and	r18, r18
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <note+0x11e>
    2e9c:	41 c0       	rjmp	.+130    	; 0x2f20 <note+0x1a0>
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	ee 0f       	add	r30, r30
    2ea2:	ff 1f       	adc	r31, r31
    2ea4:	e0 0f       	add	r30, r16
    2ea6:	f1 1f       	adc	r31, r17
    2ea8:	e2 50       	subi	r30, 0x02	; 2
    2eaa:	fa 4f       	sbci	r31, 0xFA	; 250
    2eac:	24 8d       	ldd	r18, Z+28	; 0x1c
    2eae:	22 23       	and	r18, r18
    2eb0:	b9 f1       	breq	.+110    	; 0x2f20 <note+0x1a0>
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	ee 0f       	add	r30, r30
    2eb6:	ff 1f       	adc	r31, r31
    2eb8:	e0 0f       	add	r30, r16
    2eba:	f1 1f       	adc	r31, r17
    2ebc:	e2 50       	subi	r30, 0x02	; 2
    2ebe:	fa 4f       	sbci	r31, 0xFA	; 250
    2ec0:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ec2:	f2 12       	cpse	r15, r18
    2ec4:	2d c0       	rjmp	.+90     	; 0x2f20 <note+0x1a0>
				sendreg(0, 0x28, 0x00+chan[i]);
    2ec6:	f8 01       	movw	r30, r16
    2ec8:	e4 51       	subi	r30, 0x14	; 20
    2eca:	fb 4f       	sbci	r31, 0xFB	; 251
    2ecc:	f0 80       	ld	r15, Z
    2ece:	4f 2d       	mov	r20, r15
    2ed0:	68 e2       	ldi	r22, 0x28	; 40
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
				
				sendreg(chanGrp, 0xA4+i%3, ym.freq[i][0]);
    2ed8:	f8 01       	movw	r30, r16
    2eda:	34 96       	adiw	r30, 0x04	; 4
    2edc:	ee 0f       	add	r30, r30
    2ede:	ff 1f       	adc	r31, r31
    2ee0:	e2 50       	subi	r30, 0x02	; 2
    2ee2:	fa 4f       	sbci	r31, 0xFA	; 250
    2ee4:	40 81       	ld	r20, Z
    2ee6:	c8 01       	movw	r24, r16
    2ee8:	63 e0       	ldi	r22, 0x03	; 3
    2eea:	70 e0       	ldi	r23, 0x00	; 0
    2eec:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divmodhi4>
    2ef0:	d8 2e       	mov	r13, r24
    2ef2:	64 ea       	ldi	r22, 0xA4	; 164
    2ef4:	68 0f       	add	r22, r24
    2ef6:	8e 2d       	mov	r24, r14
    2ef8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
				sendreg(chanGrp, 0xA0+i%3, ym.freq[i][1]);
    2efc:	00 0f       	add	r16, r16
    2efe:	11 1f       	adc	r17, r17
    2f00:	f8 01       	movw	r30, r16
    2f02:	e2 50       	subi	r30, 0x02	; 2
    2f04:	fa 4f       	sbci	r31, 0xFA	; 250
    2f06:	41 85       	ldd	r20, Z+9	; 0x09
    2f08:	60 ea       	ldi	r22, 0xA0	; 160
    2f0a:	6d 0d       	add	r22, r13
    2f0c:	8e 2d       	mov	r24, r14
    2f0e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
				
				sendreg(0, 0x28, 0xF0+chan[i]);
    2f12:	40 ef       	ldi	r20, 0xF0	; 240
    2f14:	4f 0d       	add	r20, r15
    2f16:	68 e2       	ldi	r22, 0x28	; 40
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
				
				break;
    2f1e:	37 c0       	rjmp	.+110    	; 0x2f8e <note+0x20e>
	noteOut = notes[noteIn % 12]; // ex. 63 is D# - 63 % 12 = 3 - freq will be 370
	
	uint8_t chanGrp; // flag to be written for channels
		
	if(on){ // note on message has been received
		for(int i = 0; i < 6; i++){
    2f20:	0f 5f       	subi	r16, 0xFF	; 255
    2f22:	1f 4f       	sbci	r17, 0xFF	; 255
    2f24:	02 c0       	rjmp	.+4      	; 0x2f2a <note+0x1aa>
    2f26:	00 e0       	ldi	r16, 0x00	; 0
    2f28:	10 e0       	ldi	r17, 0x00	; 0
    2f2a:	06 30       	cpi	r16, 0x06	; 6
    2f2c:	11 05       	cpc	r17, r1
    2f2e:	0c f4       	brge	.+2      	; 0x2f32 <note+0x1b2>
    2f30:	6e cf       	rjmp	.-292    	; 0x2e0e <note+0x8e>
    2f32:	2d c0       	rjmp	.+90     	; 0x2f8e <note+0x20e>
			}
		}
	} else { // key is released
		for(uint8_t i = 0; i < 6; ++i){
			// find matching key in notesOn, only turn off if it is not waiting to be turned off
			if(ym.notesOn[i][1] && ym.notesOn[i][2] && ym.notesOn[i][0] == noteIn){
    2f34:	82 2f       	mov	r24, r18
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	fc 01       	movw	r30, r24
    2f3a:	ee 0f       	add	r30, r30
    2f3c:	ff 1f       	adc	r31, r31
    2f3e:	e8 0f       	add	r30, r24
    2f40:	f9 1f       	adc	r31, r25
    2f42:	e2 50       	subi	r30, 0x02	; 2
    2f44:	fa 4f       	sbci	r31, 0xFA	; 250
    2f46:	33 8d       	ldd	r19, Z+27	; 0x1b
    2f48:	33 23       	and	r19, r19
    2f4a:	f1 f0       	breq	.+60     	; 0x2f88 <note+0x208>
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	ee 0f       	add	r30, r30
    2f50:	ff 1f       	adc	r31, r31
    2f52:	e8 0f       	add	r30, r24
    2f54:	f9 1f       	adc	r31, r25
    2f56:	e2 50       	subi	r30, 0x02	; 2
    2f58:	fa 4f       	sbci	r31, 0xFA	; 250
    2f5a:	34 8d       	ldd	r19, Z+28	; 0x1c
    2f5c:	33 23       	and	r19, r19
    2f5e:	a1 f0       	breq	.+40     	; 0x2f88 <note+0x208>
    2f60:	fc 01       	movw	r30, r24
    2f62:	ee 0f       	add	r30, r30
    2f64:	ff 1f       	adc	r31, r31
    2f66:	e8 0f       	add	r30, r24
    2f68:	f9 1f       	adc	r31, r25
    2f6a:	e2 50       	subi	r30, 0x02	; 2
    2f6c:	fa 4f       	sbci	r31, 0xFA	; 250
    2f6e:	32 8d       	ldd	r19, Z+26	; 0x1a
    2f70:	f3 12       	cpse	r15, r19
    2f72:	0a c0       	rjmp	.+20     	; 0x2f88 <note+0x208>
				
				ym.notesOn[i][1] = 0; // schedule corresponding channel to be turned off
    2f74:	fc 01       	movw	r30, r24
    2f76:	ee 0f       	add	r30, r30
    2f78:	ff 1f       	adc	r31, r31
    2f7a:	8e 0f       	add	r24, r30
    2f7c:	9f 1f       	adc	r25, r31
    2f7e:	fc 01       	movw	r30, r24
    2f80:	e2 50       	subi	r30, 0x02	; 2
    2f82:	fa 4f       	sbci	r31, 0xFA	; 250
    2f84:	13 8e       	std	Z+27, r1	; 0x1b
				
				break;
    2f86:	03 c0       	rjmp	.+6      	; 0x2f8e <note+0x20e>
				
				break;
			}
		}
	} else { // key is released
		for(uint8_t i = 0; i < 6; ++i){
    2f88:	2f 5f       	subi	r18, 0xFF	; 255
    2f8a:	26 30       	cpi	r18, 0x06	; 6
    2f8c:	98 f2       	brcs	.-90     	; 0x2f34 <note+0x1b4>
				break;
			}
		}
	}
	
	sei();
    2f8e:	78 94       	sei
}
    2f90:	6a 96       	adiw	r28, 0x1a	; 26
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	ff 90       	pop	r15
    2fa6:	ef 90       	pop	r14
    2fa8:	df 90       	pop	r13
    2faa:	08 95       	ret

00002fac <__vector_5>:

// everything related to encoder and buttons happens here
ISR(PCINT2_vect){	
    2fac:	1f 92       	push	r1
    2fae:	0f 92       	push	r0
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	0f 92       	push	r0
    2fb4:	11 24       	eor	r1, r1
    2fb6:	af 92       	push	r10
    2fb8:	bf 92       	push	r11
    2fba:	cf 92       	push	r12
    2fbc:	df 92       	push	r13
    2fbe:	ef 92       	push	r14
    2fc0:	ff 92       	push	r15
    2fc2:	0f 93       	push	r16
    2fc4:	1f 93       	push	r17
    2fc6:	2f 93       	push	r18
    2fc8:	3f 93       	push	r19
    2fca:	4f 93       	push	r20
    2fcc:	5f 93       	push	r21
    2fce:	6f 93       	push	r22
    2fd0:	7f 93       	push	r23
    2fd2:	8f 93       	push	r24
    2fd4:	9f 93       	push	r25
    2fd6:	af 93       	push	r26
    2fd8:	bf 93       	push	r27
    2fda:	cf 93       	push	r28
    2fdc:	df 93       	push	r29
    2fde:	ef 93       	push	r30
    2fe0:	ff 93       	push	r31
	glb.sreg = SREG;
    2fe2:	8f b7       	in	r24, 0x3f	; 63
    2fe4:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <glb+0x10a>
	cli();
    2fe8:	f8 94       	cli
	
	// get current pin values
	uint8_t RPG[] = {(PIND & (1<<ENC_A))>>ENC_A, (PIND & (1<<ENC_B))>>ENC_B}; // current pin values for individual encoder pins
    2fea:	89 b1       	in	r24, 0x09	; 9
    2fec:	88 70       	andi	r24, 0x08	; 8
    2fee:	c8 2e       	mov	r12, r24
    2ff0:	d1 2c       	mov	r13, r1
    2ff2:	d5 94       	asr	r13
    2ff4:	c7 94       	ror	r12
    2ff6:	d5 94       	asr	r13
    2ff8:	c7 94       	ror	r12
    2ffa:	d5 94       	asr	r13
    2ffc:	c7 94       	ror	r12
    2ffe:	3c 2d       	mov	r19, r12
    3000:	89 b1       	in	r24, 0x09	; 9
    3002:	80 71       	andi	r24, 0x10	; 16
    3004:	e8 2e       	mov	r14, r24
    3006:	f1 2c       	mov	r15, r1
    3008:	f5 94       	asr	r15
    300a:	e7 94       	ror	r14
    300c:	f5 94       	asr	r15
    300e:	e7 94       	ror	r14
    3010:	f5 94       	asr	r15
    3012:	e7 94       	ror	r14
    3014:	f5 94       	asr	r15
    3016:	e7 94       	ror	r14
    3018:	2e 2d       	mov	r18, r14
	uint8_t RPGpin = PIND & ((1<<ENC_A) | (1<<ENC_B)); // current overall encoder status
    301a:	89 b1       	in	r24, 0x09	; 9
    301c:	88 71       	andi	r24, 0x18	; 24
    301e:	b8 2e       	mov	r11, r24
	
	uint8_t BTN_L_status = (PIND & (1<<BTN_L))>>BTN_L; // current value for left button pin
    3020:	09 b1       	in	r16, 0x09	; 9
    3022:	02 70       	andi	r16, 0x02	; 2
    3024:	10 e0       	ldi	r17, 0x00	; 0
    3026:	15 95       	asr	r17
    3028:	07 95       	ror	r16
    302a:	80 2f       	mov	r24, r16
	uint8_t BTN_R_status = (PIND & (1<<BTN_R))>>BTN_R; // right button pin
    302c:	c9 b1       	in	r28, 0x09	; 9
    302e:	c4 70       	andi	r28, 0x04	; 4
    3030:	d0 e0       	ldi	r29, 0x00	; 0
    3032:	d5 95       	asr	r29
    3034:	c7 95       	ror	r28
    3036:	d5 95       	asr	r29
    3038:	c7 95       	ror	r28
    303a:	ac 2e       	mov	r10, r28

	
	// if the thing that caused the interrupt was either button going low, cleared to change group
	if(!BTN_L_status || !BTN_R_status) glb.chgGrp = true;
    303c:	00 23       	and	r16, r16
    303e:	11 f0       	breq	.+4      	; 0x3044 <__vector_5+0x98>
    3040:	c1 11       	cpse	r28, r1
    3042:	03 c0       	rjmp	.+6      	; 0x304a <__vector_5+0x9e>
    3044:	91 e0       	ldi	r25, 0x01	; 1
    3046:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <glb+0x5>
	
	if(glb.RPGpinOld == RPGpin){
    304a:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <glb+0x2>
    304e:	b9 12       	cpse	r11, r25
    3050:	27 c0       	rjmp	.+78     	; 0x30a0 <__vector_5+0xf4>
		// if interrupt was caused by button change and not RPG:
		if(glb.chgGrp){
    3052:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <glb+0x5>
    3056:	99 23       	and	r25, r25
    3058:	f1 f0       	breq	.+60     	; 0x3096 <__vector_5+0xea>
			if(BTN_L_status && !glb.BTN_L_old){ // button has just been released
    305a:	88 23       	and	r24, r24
    305c:	69 f0       	breq	.+26     	; 0x3078 <__vector_5+0xcc>
    305e:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <glb+0x3>
    3062:	81 11       	cpse	r24, r1
    3064:	09 c0       	rjmp	.+18     	; 0x3078 <__vector_5+0xcc>
				--ym.group;
    3066:	ee ef       	ldi	r30, 0xFE	; 254
    3068:	f5 e0       	ldi	r31, 0x05	; 5
    306a:	82 81       	ldd	r24, Z+2	; 0x02
    306c:	93 81       	ldd	r25, Z+3	; 0x03
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	93 83       	std	Z+3, r25	; 0x03
    3072:	82 83       	std	Z+2, r24	; 0x02
				changeGroup();
    3074:	0e 94 32 11 	call	0x2264	; 0x2264 <changeGroup>
			}
			if(BTN_R_status && !glb.BTN_R_old){
    3078:	aa 20       	and	r10, r10
    307a:	69 f0       	breq	.+26     	; 0x3096 <__vector_5+0xea>
    307c:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <glb+0x4>
    3080:	81 11       	cpse	r24, r1
    3082:	09 c0       	rjmp	.+18     	; 0x3096 <__vector_5+0xea>
				++ym.group;
    3084:	ee ef       	ldi	r30, 0xFE	; 254
    3086:	f5 e0       	ldi	r31, 0x05	; 5
    3088:	82 81       	ldd	r24, Z+2	; 0x02
    308a:	93 81       	ldd	r25, Z+3	; 0x03
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	93 83       	std	Z+3, r25	; 0x03
    3090:	82 83       	std	Z+2, r24	; 0x02
				changeGroup();
    3092:	0e 94 32 11 	call	0x2264	; 0x2264 <changeGroup>
			}
		}
		// store pin values
		glb.BTN_L_old = BTN_L_status;
    3096:	e3 ef       	ldi	r30, 0xF3	; 243
    3098:	f4 e0       	ldi	r31, 0x04	; 4
    309a:	03 83       	std	Z+3, r16	; 0x03
		glb.BTN_R_old = BTN_R_status;
    309c:	c4 83       	std	Z+4, r28	; 0x04
    309e:	6d c0       	rjmp	.+218    	; 0x317a <__vector_5+0x1ce>
		
	} else {
		glb.chgGrp = false; // if the interrupt was caused by a change in the RPG (while a button was held), if a button is released the group won't be changed
    30a0:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <glb+0x5>
		if(RPG[1] && !RPG[0]){ // limit number of cases so that value only changes once per turn (as opposed to 4 times)
    30a4:	22 23       	and	r18, r18
    30a6:	09 f4       	brne	.+2      	; 0x30aa <__vector_5+0xfe>
    30a8:	61 c0       	rjmp	.+194    	; 0x316c <__vector_5+0x1c0>
    30aa:	31 11       	cpse	r19, r1
    30ac:	5f c0       	rjmp	.+190    	; 0x316c <__vector_5+0x1c0>
			//if (!RPG[0] && (glb.RPGold[1] == RPG[0]) && (glb.RPGold[0] != RPG[1])){
			if ((glb.RPGold[1] == RPG[0]) && (glb.RPGold[0] != RPG[1])){ // encoder turned counterclockwise
    30ae:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <glb+0x1>
    30b2:	39 13       	cpse	r19, r25
    30b4:	2c c0       	rjmp	.+88     	; 0x310e <__vector_5+0x162>
    30b6:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <glb>
    30ba:	29 17       	cp	r18, r25
    30bc:	41 f1       	breq	.+80     	; 0x310e <__vector_5+0x162>
				if(!BTN_L_status){ // if encoder button is held
    30be:	81 11       	cpse	r24, r1
    30c0:	0a c0       	rjmp	.+20     	; 0x30d6 <__vector_5+0x12a>
					--ym.current; // change currently selected parameter (decrement)
    30c2:	ee ef       	ldi	r30, 0xFE	; 254
    30c4:	f5 e0       	ldi	r31, 0x05	; 5
    30c6:	84 81       	ldd	r24, Z+4	; 0x04
    30c8:	95 81       	ldd	r25, Z+5	; 0x05
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	95 83       	std	Z+5, r25	; 0x05
    30ce:	84 83       	std	Z+4, r24	; 0x04
					changeCurrent();
    30d0:	0e 94 11 12 	call	0x2422	; 0x2422 <changeCurrent>
    30d4:	4b c0       	rjmp	.+150    	; 0x316c <__vector_5+0x1c0>
				} else if(!BTN_R_status){ // other button is held
    30d6:	a1 10       	cpse	r10, r1
    30d8:	0a c0       	rjmp	.+20     	; 0x30ee <__vector_5+0x142>
					--ym.op; // change currently selected operator
    30da:	ee ef       	ldi	r30, 0xFE	; 254
    30dc:	f5 e0       	ldi	r31, 0x05	; 5
    30de:	80 81       	ld	r24, Z
    30e0:	91 81       	ldd	r25, Z+1	; 0x01
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	91 83       	std	Z+1, r25	; 0x01
    30e6:	80 83       	st	Z, r24
					changeCurrent();
    30e8:	0e 94 11 12 	call	0x2422	; 0x2422 <changeCurrent>
    30ec:	3f c0       	rjmp	.+126    	; 0x316c <__vector_5+0x1c0>
				} else if(BTN_L_status && BTN_R_status){ // neither button is held
    30ee:	88 23       	and	r24, r24
    30f0:	e9 f1       	breq	.+122    	; 0x316c <__vector_5+0x1c0>
    30f2:	aa 20       	and	r10, r10
    30f4:	d9 f1       	breq	.+118    	; 0x316c <__vector_5+0x1c0>
					--*ym.value; // change value of currently selected parameter
    30f6:	e0 91 04 06 	lds	r30, 0x0604	; 0x800604 <ym+0x6>
    30fa:	f0 91 05 06 	lds	r31, 0x0605	; 0x800605 <ym+0x7>
    30fe:	80 81       	ld	r24, Z
    3100:	91 81       	ldd	r25, Z+1	; 0x01
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	80 83       	st	Z, r24
					changeValue();
    3108:	0e 94 78 13 	call	0x26f0	; 0x26f0 <changeValue>
    310c:	2f c0       	rjmp	.+94     	; 0x316c <__vector_5+0x1c0>
				}
			//} else if (!RPG[0] && (glb.RPGold[0] == RPG[1]) && (glb.RPGold[1] != RPG[0])){
			} else if ((glb.RPGold[0] == RPG[1]) && (glb.RPGold[1] != RPG[0])){ // encoder turned clockwise
    310e:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <glb>
    3112:	29 13       	cpse	r18, r25
    3114:	2b c0       	rjmp	.+86     	; 0x316c <__vector_5+0x1c0>
    3116:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <glb+0x1>
    311a:	39 17       	cp	r19, r25
    311c:	39 f1       	breq	.+78     	; 0x316c <__vector_5+0x1c0>
				if(!BTN_L_status){
    311e:	81 11       	cpse	r24, r1
    3120:	0a c0       	rjmp	.+20     	; 0x3136 <__vector_5+0x18a>
					++ym.current;
    3122:	ee ef       	ldi	r30, 0xFE	; 254
    3124:	f5 e0       	ldi	r31, 0x05	; 5
    3126:	84 81       	ldd	r24, Z+4	; 0x04
    3128:	95 81       	ldd	r25, Z+5	; 0x05
    312a:	01 96       	adiw	r24, 0x01	; 1
    312c:	95 83       	std	Z+5, r25	; 0x05
    312e:	84 83       	std	Z+4, r24	; 0x04
					changeCurrent();
    3130:	0e 94 11 12 	call	0x2422	; 0x2422 <changeCurrent>
    3134:	1b c0       	rjmp	.+54     	; 0x316c <__vector_5+0x1c0>
				} else if(!BTN_R_status){
    3136:	a1 10       	cpse	r10, r1
    3138:	0a c0       	rjmp	.+20     	; 0x314e <__vector_5+0x1a2>
					++ym.op;
    313a:	ee ef       	ldi	r30, 0xFE	; 254
    313c:	f5 e0       	ldi	r31, 0x05	; 5
    313e:	80 81       	ld	r24, Z
    3140:	91 81       	ldd	r25, Z+1	; 0x01
    3142:	01 96       	adiw	r24, 0x01	; 1
    3144:	91 83       	std	Z+1, r25	; 0x01
    3146:	80 83       	st	Z, r24
					changeCurrent();
    3148:	0e 94 11 12 	call	0x2422	; 0x2422 <changeCurrent>
    314c:	0f c0       	rjmp	.+30     	; 0x316c <__vector_5+0x1c0>
				} else if(BTN_L_status && BTN_R_status){
    314e:	88 23       	and	r24, r24
    3150:	69 f0       	breq	.+26     	; 0x316c <__vector_5+0x1c0>
    3152:	aa 20       	and	r10, r10
    3154:	59 f0       	breq	.+22     	; 0x316c <__vector_5+0x1c0>
					++*ym.value;
    3156:	e0 91 04 06 	lds	r30, 0x0604	; 0x800604 <ym+0x6>
    315a:	f0 91 05 06 	lds	r31, 0x0605	; 0x800605 <ym+0x7>
    315e:	80 81       	ld	r24, Z
    3160:	91 81       	ldd	r25, Z+1	; 0x01
    3162:	01 96       	adiw	r24, 0x01	; 1
    3164:	91 83       	std	Z+1, r25	; 0x01
    3166:	80 83       	st	Z, r24
					changeValue();
    3168:	0e 94 78 13 	call	0x26f0	; 0x26f0 <changeValue>
				}
			}
		}
		// set stored values for all interface pins
		glb.RPGold[0] = RPG[0];
    316c:	e3 ef       	ldi	r30, 0xF3	; 243
    316e:	f4 e0       	ldi	r31, 0x04	; 4
    3170:	c0 82       	st	Z, r12
		glb.RPGold[1] = RPG[1];
    3172:	e1 82       	std	Z+1, r14	; 0x01
		glb.RPGpinOld = RPGpin;
    3174:	b2 82       	std	Z+2, r11	; 0x02
		
		glb.BTN_L_old = BTN_L_status;
    3176:	03 83       	std	Z+3, r16	; 0x03
		glb.BTN_R_old = BTN_R_status;
    3178:	c4 83       	std	Z+4, r28	; 0x04
	}
	
	SREG = glb.sreg;
    317a:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <glb+0x10a>
    317e:	8f bf       	out	0x3f, r24	; 63
}
    3180:	ff 91       	pop	r31
    3182:	ef 91       	pop	r30
    3184:	df 91       	pop	r29
    3186:	cf 91       	pop	r28
    3188:	bf 91       	pop	r27
    318a:	af 91       	pop	r26
    318c:	9f 91       	pop	r25
    318e:	8f 91       	pop	r24
    3190:	7f 91       	pop	r23
    3192:	6f 91       	pop	r22
    3194:	5f 91       	pop	r21
    3196:	4f 91       	pop	r20
    3198:	3f 91       	pop	r19
    319a:	2f 91       	pop	r18
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	ff 90       	pop	r15
    31a2:	ef 90       	pop	r14
    31a4:	df 90       	pop	r13
    31a6:	cf 90       	pop	r12
    31a8:	bf 90       	pop	r11
    31aa:	af 90       	pop	r10
    31ac:	0f 90       	pop	r0
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	0f 90       	pop	r0
    31b2:	1f 90       	pop	r1
    31b4:	18 95       	reti

000031b6 <__vector_18>:

// receive MIDI messages and translate (note on, note off, pitch, modulation, etc)
ISR(USART_RX_vect){
    31b6:	1f 92       	push	r1
    31b8:	0f 92       	push	r0
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	0f 92       	push	r0
    31be:	11 24       	eor	r1, r1
    31c0:	ef 92       	push	r14
    31c2:	ff 92       	push	r15
    31c4:	0f 93       	push	r16
    31c6:	1f 93       	push	r17
    31c8:	2f 93       	push	r18
    31ca:	3f 93       	push	r19
    31cc:	4f 93       	push	r20
    31ce:	5f 93       	push	r21
    31d0:	6f 93       	push	r22
    31d2:	7f 93       	push	r23
    31d4:	8f 93       	push	r24
    31d6:	9f 93       	push	r25
    31d8:	af 93       	push	r26
    31da:	bf 93       	push	r27
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	ef 93       	push	r30
    31e2:	ff 93       	push	r31
	glb.sreg = SREG;
    31e4:	8f b7       	in	r24, 0x3f	; 63
    31e6:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <glb+0x10a>
	cli();
    31ea:	f8 94       	cli
	
	int data = UDR0; // data coming into RX pin
    31ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    31f0:	48 2f       	mov	r20, r24
    31f2:	50 e0       	ldi	r21, 0x00	; 0
	
	// the 2 data bytes after the status message (sometimes only 1 is used)
	int data1;
	int data2;
	
	if(data < 0xF8){ // >= 0xF8 - system control messages, not used
    31f4:	48 3f       	cpi	r20, 0xF8	; 248
    31f6:	51 05       	cpc	r21, r1
    31f8:	0c f5       	brge	.+66     	; 0x323c <__vector_18+0x86>
		glb.midiBuf[glb.midiIndex] = data;
    31fa:	20 91 f9 05 	lds	r18, 0x05F9	; 0x8005f9 <glb+0x106>
    31fe:	30 91 fa 05 	lds	r19, 0x05FA	; 0x8005fa <glb+0x107>
    3202:	f9 01       	movw	r30, r18
    3204:	33 96       	adiw	r30, 0x03	; 3
    3206:	ee 0f       	add	r30, r30
    3208:	ff 1f       	adc	r31, r31
    320a:	ed 50       	subi	r30, 0x0D	; 13
    320c:	fb 4f       	sbci	r31, 0xFB	; 251
    320e:	51 83       	std	Z+1, r21	; 0x01
    3210:	40 83       	st	Z, r20
		
		// status messages start 1XXX XXXX, all others 0XXX XXXX
		if((data & 0xF0) >= 0x80) glb.msgStart = glb.midiIndex;
    3212:	80 7f       	andi	r24, 0xF0	; 240
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	80 38       	cpi	r24, 0x80	; 128
    3218:	91 05       	cpc	r25, r1
    321a:	14 f0       	brlt	.+4      	; 0x3220 <__vector_18+0x6a>
    321c:	20 93 fb 05 	sts	0x05FB, r18	; 0x8005fb <glb+0x108>
		
		glb.midiIndex++; // move forward in midi data buffer
    3220:	2f 5f       	subi	r18, 0xFF	; 255
    3222:	3f 4f       	sbci	r19, 0xFF	; 255
    3224:	30 93 fa 05 	sts	0x05FA, r19	; 0x8005fa <glb+0x107>
    3228:	20 93 f9 05 	sts	0x05F9, r18	; 0x8005f9 <glb+0x106>
		
		minMaxValue(&glb.midiIndex, 0, 127);
    322c:	4f e7       	ldi	r20, 0x7F	; 127
    322e:	50 e0       	ldi	r21, 0x00	; 0
    3230:	60 e0       	ldi	r22, 0x00	; 0
    3232:	70 e0       	ldi	r23, 0x00	; 0
    3234:	89 ef       	ldi	r24, 0xF9	; 249
    3236:	95 e0       	ldi	r25, 0x05	; 5
    3238:	0e 94 cc 03 	call	0x798	; 0x798 <minMaxValue>
		
	bool case1 = 0;
	bool case2 = 0;
	
	// my way of creating a ring buffer, since midi messages are up to 3 bytes long
	if(glb.msgStart == 127){
    323c:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <glb+0x108>
    3240:	8f 37       	cpi	r24, 0x7F	; 127
    3242:	49 f4       	brne	.+18     	; 0x3256 <__vector_18+0xa0>
		data1 = glb.midiBuf[0];
    3244:	e3 ef       	ldi	r30, 0xF3	; 243
    3246:	f4 e0       	ldi	r31, 0x04	; 4
    3248:	c6 81       	ldd	r28, Z+6	; 0x06
    324a:	d7 81       	ldd	r29, Z+7	; 0x07
		data2 = glb.midiBuf[1];
    324c:	60 85       	ldd	r22, Z+8	; 0x08
    324e:	71 85       	ldd	r23, Z+9	; 0x09
		
		minMaxValue(&glb.midiIndex, 0, 127);
	}
		
	bool case1 = 0;
	bool case2 = 0;
    3250:	40 e0       	ldi	r20, 0x00	; 0
	
	// my way of creating a ring buffer, since midi messages are up to 3 bytes long
	if(glb.msgStart == 127){
		data1 = glb.midiBuf[0];
		data2 = glb.midiBuf[1];
		case1 = 1;
    3252:	51 e0       	ldi	r21, 0x01	; 1
    3254:	25 c0       	rjmp	.+74     	; 0x32a0 <__vector_18+0xea>
	} else if(glb.msgStart == 126){
    3256:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <glb+0x108>
    325a:	8e 37       	cpi	r24, 0x7E	; 126
    325c:	59 f4       	brne	.+22     	; 0x3274 <__vector_18+0xbe>
		data1 = glb.midiBuf[127];
    325e:	c0 91 f7 05 	lds	r28, 0x05F7	; 0x8005f7 <glb+0x104>
    3262:	d0 91 f8 05 	lds	r29, 0x05F8	; 0x8005f8 <glb+0x105>
		data2 = glb.midiBuf[0];
    3266:	60 91 f9 04 	lds	r22, 0x04F9	; 0x8004f9 <glb+0x6>
    326a:	70 91 fa 04 	lds	r23, 0x04FA	; 0x8004fa <glb+0x7>
		case2 = 1;
    326e:	41 e0       	ldi	r20, 0x01	; 1
		glb.midiIndex++; // move forward in midi data buffer
		
		minMaxValue(&glb.midiIndex, 0, 127);
	}
		
	bool case1 = 0;
    3270:	50 e0       	ldi	r21, 0x00	; 0
    3272:	16 c0       	rjmp	.+44     	; 0x32a0 <__vector_18+0xea>
	} else if(glb.msgStart == 126){
		data1 = glb.midiBuf[127];
		data2 = glb.midiBuf[0];
		case2 = 1;
	} else {
		data1 = glb.midiBuf[glb.msgStart+1];
    3274:	ab ef       	ldi	r26, 0xFB	; 251
    3276:	b5 e0       	ldi	r27, 0x05	; 5
    3278:	ec 91       	ld	r30, X
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	34 96       	adiw	r30, 0x04	; 4
    327e:	ee 0f       	add	r30, r30
    3280:	ff 1f       	adc	r31, r31
    3282:	ed 50       	subi	r30, 0x0D	; 13
    3284:	fb 4f       	sbci	r31, 0xFB	; 251
    3286:	c0 81       	ld	r28, Z
    3288:	d1 81       	ldd	r29, Z+1	; 0x01
		data2 = glb.midiBuf[glb.msgStart+2];
    328a:	ec 91       	ld	r30, X
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	35 96       	adiw	r30, 0x05	; 5
    3290:	ee 0f       	add	r30, r30
    3292:	ff 1f       	adc	r31, r31
    3294:	ed 50       	subi	r30, 0x0D	; 13
    3296:	fb 4f       	sbci	r31, 0xFB	; 251
    3298:	60 81       	ld	r22, Z
    329a:	71 81       	ldd	r23, Z+1	; 0x01
		
		minMaxValue(&glb.midiIndex, 0, 127);
	}
		
	bool case1 = 0;
	bool case2 = 0;
    329c:	40 e0       	ldi	r20, 0x00	; 0
		glb.midiIndex++; // move forward in midi data buffer
		
		minMaxValue(&glb.midiIndex, 0, 127);
	}
		
	bool case1 = 0;
    329e:	50 e0       	ldi	r21, 0x00	; 0
		data1 = glb.midiBuf[glb.msgStart+1];
		data2 = glb.midiBuf[glb.msgStart+2];
	}
	
	// if message is 3 bytes long (note on/off, controller, etc)
	if((glb.midiIndex - glb.msgStart == 3) || (glb.midiIndex == 2 && case1) || (glb.midiIndex == 1 && case2)){
    32a0:	20 91 f9 05 	lds	r18, 0x05F9	; 0x8005f9 <glb+0x106>
    32a4:	30 91 fa 05 	lds	r19, 0x05FA	; 0x8005fa <glb+0x107>
    32a8:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <glb+0x108>
    32ac:	f9 01       	movw	r30, r18
    32ae:	e8 1b       	sub	r30, r24
    32b0:	f1 09       	sbc	r31, r1
    32b2:	33 97       	sbiw	r30, 0x03	; 3
    32b4:	61 f0       	breq	.+24     	; 0x32ce <__vector_18+0x118>
    32b6:	22 30       	cpi	r18, 0x02	; 2
    32b8:	31 05       	cpc	r19, r1
    32ba:	11 f4       	brne	.+4      	; 0x32c0 <__vector_18+0x10a>
    32bc:	51 11       	cpse	r21, r1
    32be:	07 c0       	rjmp	.+14     	; 0x32ce <__vector_18+0x118>
    32c0:	21 30       	cpi	r18, 0x01	; 1
    32c2:	31 05       	cpc	r19, r1
    32c4:	09 f0       	breq	.+2      	; 0x32c8 <__vector_18+0x112>
    32c6:	49 c0       	rjmp	.+146    	; 0x335a <__vector_18+0x1a4>
    32c8:	44 23       	and	r20, r20
    32ca:	09 f4       	brne	.+2      	; 0x32ce <__vector_18+0x118>
    32cc:	46 c0       	rjmp	.+140    	; 0x335a <__vector_18+0x1a4>
		switch(glb.midiBuf[glb.msgStart] & 0xF0){ // upper nibble of status byte is status message, lower nibble is midi channel (not currently used)
    32ce:	e0 91 fb 05 	lds	r30, 0x05FB	; 0x8005fb <glb+0x108>
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	33 96       	adiw	r30, 0x03	; 3
    32d6:	ee 0f       	add	r30, r30
    32d8:	ff 1f       	adc	r31, r31
    32da:	ed 50       	subi	r30, 0x0D	; 13
    32dc:	fb 4f       	sbci	r31, 0xFB	; 251
    32de:	20 81       	ld	r18, Z
    32e0:	31 81       	ldd	r19, Z+1	; 0x01
    32e2:	20 7f       	andi	r18, 0xF0	; 240
    32e4:	33 27       	eor	r19, r19
    32e6:	20 39       	cpi	r18, 0x90	; 144
    32e8:	31 05       	cpc	r19, r1
    32ea:	41 f0       	breq	.+16     	; 0x32fc <__vector_18+0x146>
    32ec:	20 3b       	cpi	r18, 0xB0	; 176
    32ee:	31 05       	cpc	r19, r1
    32f0:	79 f0       	breq	.+30     	; 0x3310 <__vector_18+0x15a>
    32f2:	20 38       	cpi	r18, 0x80	; 128
    32f4:	31 05       	cpc	r19, r1
    32f6:	09 f0       	breq	.+2      	; 0x32fa <__vector_18+0x144>
    32f8:	ab c0       	rjmp	.+342    	; 0x3450 <__vector_18+0x29a>
    32fa:	05 c0       	rjmp	.+10     	; 0x3306 <__vector_18+0x150>
			case 0x90: // note on: status byte - note number - velocity	
				note(data1,data2,1);
    32fc:	41 e0       	ldi	r20, 0x01	; 1
    32fe:	8c 2f       	mov	r24, r28
    3300:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <note>
				break;
    3304:	a5 c0       	rjmp	.+330    	; 0x3450 <__vector_18+0x29a>
			case 0x80: // note off: status byte - note number - note off velocity	
				note(data1,data2,0);
    3306:	40 e0       	ldi	r20, 0x00	; 0
    3308:	8c 2f       	mov	r24, r28
    330a:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <note>
				break;
    330e:	a0 c0       	rjmp	.+320    	; 0x3450 <__vector_18+0x29a>
			case 0xA0: // poly AT
				// unused
				break;
			case 0xB0: // controllers (mod wheel etc): status byte - controller number - data
				if(data1 == 1){ // mod wheel is controller 1, currently only used for LFO frequency
    3310:	21 97       	sbiw	r28, 0x01	; 1
    3312:	09 f0       	breq	.+2      	; 0x3316 <__vector_18+0x160>
    3314:	9d c0       	rjmp	.+314    	; 0x3450 <__vector_18+0x29a>
					if(data2 == 0){ // reset to original LFO value when mod wheel is not in use
    3316:	61 15       	cp	r22, r1
    3318:	71 05       	cpc	r23, r1
    331a:	99 f4       	brne	.+38     	; 0x3342 <__vector_18+0x18c>
						if(ym.lfoFreq == 0){
    331c:	40 91 91 06 	lds	r20, 0x0691	; 0x800691 <ym+0x93>
    3320:	50 91 92 06 	lds	r21, 0x0692	; 0x800692 <ym+0x94>
    3324:	41 15       	cp	r20, r1
    3326:	51 05       	cpc	r21, r1
    3328:	31 f4       	brne	.+12     	; 0x3336 <__vector_18+0x180>
							sendreg(0,0x22,0);
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	62 e2       	ldi	r22, 0x22	; 34
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
    3334:	8d c0       	rjmp	.+282    	; 0x3450 <__vector_18+0x29a>
						} else {
							sendreg(0,0x22,0x08+ym.lfoFreq-1);
    3336:	49 5f       	subi	r20, 0xF9	; 249
    3338:	62 e2       	ldi	r22, 0x22	; 34
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
    3340:	87 c0       	rjmp	.+270    	; 0x3450 <__vector_18+0x29a>
						}
					} else { // 127 / 8 = 18
						sendreg(0,0x22,0x08+(data2/18));
    3342:	cb 01       	movw	r24, r22
    3344:	62 e1       	ldi	r22, 0x12	; 18
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divmodhi4>
    334c:	48 e0       	ldi	r20, 0x08	; 8
    334e:	46 0f       	add	r20, r22
    3350:	62 e2       	ldi	r22, 0x22	; 34
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
    3358:	7b c0       	rjmp	.+246    	; 0x3450 <__vector_18+0x29a>
				//
				break;
		}
		
	// message is 2 bytes (aftertouch, pitch bend)
	} else if((glb.midiIndex - glb.msgStart == 2) || (glb.midiIndex == 1 && case1) || (glb.midiIndex == 0 && case2)){
    335a:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <glb+0x108>
    335e:	b9 01       	movw	r22, r18
    3360:	68 1b       	sub	r22, r24
    3362:	71 09       	sbc	r23, r1
    3364:	62 30       	cpi	r22, 0x02	; 2
    3366:	71 05       	cpc	r23, r1
    3368:	59 f0       	breq	.+22     	; 0x3380 <__vector_18+0x1ca>
    336a:	21 30       	cpi	r18, 0x01	; 1
    336c:	31 05       	cpc	r19, r1
    336e:	11 f4       	brne	.+4      	; 0x3374 <__vector_18+0x1be>
    3370:	51 11       	cpse	r21, r1
    3372:	06 c0       	rjmp	.+12     	; 0x3380 <__vector_18+0x1ca>
    3374:	23 2b       	or	r18, r19
    3376:	09 f0       	breq	.+2      	; 0x337a <__vector_18+0x1c4>
    3378:	6b c0       	rjmp	.+214    	; 0x3450 <__vector_18+0x29a>
    337a:	44 23       	and	r20, r20
    337c:	09 f4       	brne	.+2      	; 0x3380 <__vector_18+0x1ca>
    337e:	68 c0       	rjmp	.+208    	; 0x3450 <__vector_18+0x29a>
		switch(glb.midiBuf[glb.msgStart] & 0xF0){
    3380:	e0 91 fb 05 	lds	r30, 0x05FB	; 0x8005fb <glb+0x108>
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	33 96       	adiw	r30, 0x03	; 3
    3388:	ee 0f       	add	r30, r30
    338a:	ff 1f       	adc	r31, r31
    338c:	ed 50       	subi	r30, 0x0D	; 13
    338e:	fb 4f       	sbci	r31, 0xFB	; 251
    3390:	80 81       	ld	r24, Z
    3392:	91 81       	ldd	r25, Z+1	; 0x01
    3394:	80 7f       	andi	r24, 0xF0	; 240
    3396:	99 27       	eor	r25, r25
    3398:	80 3d       	cpi	r24, 0xD0	; 208
    339a:	91 05       	cpc	r25, r1
    339c:	29 f0       	breq	.+10     	; 0x33a8 <__vector_18+0x1f2>
    339e:	80 3e       	cpi	r24, 0xE0	; 224
    33a0:	91 05       	cpc	r25, r1
    33a2:	09 f4       	brne	.+2      	; 0x33a6 <__vector_18+0x1f0>
    33a4:	50 c0       	rjmp	.+160    	; 0x3446 <__vector_18+0x290>
    33a6:	54 c0       	rjmp	.+168    	; 0x3450 <__vector_18+0x29a>
			case 0xD0: // aftertouch, currently only used for vibrato
				if(data1 == 0){ // if 0, restore old values
    33a8:	20 97       	sbiw	r28, 0x00	; 0
    33aa:	d9 f0       	breq	.+54     	; 0x33e2 <__vector_18+0x22c>
    33ac:	e1 2c       	mov	r14, r1
    33ae:	f1 2c       	mov	r15, r1
    33b0:	3b c0       	rjmp	.+118    	; 0x3428 <__vector_18+0x272>
					for(int i = 0; i < 3; i++){ // write to all 6 channels
						for(int j = 0; j < 2; j++){
							sendreg(j, 0xB4+i, 0xC0 + (ym.tremolo<<4) + ym.vibrato); // register is shared with tremolo and panning 
    33b2:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <ym+0x97>
    33b6:	40 91 93 06 	lds	r20, 0x0693	; 0x800693 <ym+0x95>
    33ba:	70 e1       	ldi	r23, 0x10	; 16
    33bc:	87 9f       	mul	r24, r23
    33be:	40 0d       	add	r20, r0
    33c0:	11 24       	eor	r1, r1
    33c2:	40 54       	subi	r20, 0x40	; 64
    33c4:	64 eb       	ldi	r22, 0xB4	; 180
    33c6:	60 0f       	add	r22, r16
    33c8:	8c 2f       	mov	r24, r28
    33ca:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
	} else if((glb.midiIndex - glb.msgStart == 2) || (glb.midiIndex == 1 && case1) || (glb.midiIndex == 0 && case2)){
		switch(glb.midiBuf[glb.msgStart] & 0xF0){
			case 0xD0: // aftertouch, currently only used for vibrato
				if(data1 == 0){ // if 0, restore old values
					for(int i = 0; i < 3; i++){ // write to all 6 channels
						for(int j = 0; j < 2; j++){
    33ce:	21 96       	adiw	r28, 0x01	; 1
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <__vector_18+0x220>
    33d2:	c0 e0       	ldi	r28, 0x00	; 0
    33d4:	d0 e0       	ldi	r29, 0x00	; 0
    33d6:	c2 30       	cpi	r28, 0x02	; 2
    33d8:	d1 05       	cpc	r29, r1
    33da:	5c f3       	brlt	.-42     	; 0x33b2 <__vector_18+0x1fc>
	// message is 2 bytes (aftertouch, pitch bend)
	} else if((glb.midiIndex - glb.msgStart == 2) || (glb.midiIndex == 1 && case1) || (glb.midiIndex == 0 && case2)){
		switch(glb.midiBuf[glb.msgStart] & 0xF0){
			case 0xD0: // aftertouch, currently only used for vibrato
				if(data1 == 0){ // if 0, restore old values
					for(int i = 0; i < 3; i++){ // write to all 6 channels
    33dc:	0f 5f       	subi	r16, 0xFF	; 255
    33de:	1f 4f       	sbci	r17, 0xFF	; 255
    33e0:	02 c0       	rjmp	.+4      	; 0x33e6 <__vector_18+0x230>
    33e2:	00 e0       	ldi	r16, 0x00	; 0
    33e4:	10 e0       	ldi	r17, 0x00	; 0
    33e6:	03 30       	cpi	r16, 0x03	; 3
    33e8:	11 05       	cpc	r17, r1
    33ea:	9c f3       	brlt	.-26     	; 0x33d2 <__vector_18+0x21c>
    33ec:	31 c0       	rjmp	.+98     	; 0x3450 <__vector_18+0x29a>
						}
					}
				} else {
					for(int i = 0; i < 3; i++){
						for(int j = 0; j < 2; j++){
							sendreg(j, 0xB4+i, 0xC0 + (ym.tremolo<<4) + data1/18);
    33ee:	20 91 95 06 	lds	r18, 0x0695	; 0x800695 <ym+0x97>
    33f2:	ce 01       	movw	r24, r28
    33f4:	62 e1       	ldi	r22, 0x12	; 18
    33f6:	70 e0       	ldi	r23, 0x00	; 0
    33f8:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divmodhi4>
    33fc:	46 2f       	mov	r20, r22
    33fe:	80 e1       	ldi	r24, 0x10	; 16
    3400:	28 9f       	mul	r18, r24
    3402:	40 0d       	add	r20, r0
    3404:	11 24       	eor	r1, r1
    3406:	40 54       	subi	r20, 0x40	; 64
    3408:	64 eb       	ldi	r22, 0xB4	; 180
    340a:	6e 0d       	add	r22, r14
    340c:	80 2f       	mov	r24, r16
    340e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
							sendreg(j, 0xB4+i, 0xC0 + (ym.tremolo<<4) + ym.vibrato); // register is shared with tremolo and panning 
						}
					}
				} else {
					for(int i = 0; i < 3; i++){
						for(int j = 0; j < 2; j++){
    3412:	0f 5f       	subi	r16, 0xFF	; 255
    3414:	1f 4f       	sbci	r17, 0xFF	; 255
    3416:	02 c0       	rjmp	.+4      	; 0x341c <__vector_18+0x266>
    3418:	00 e0       	ldi	r16, 0x00	; 0
    341a:	10 e0       	ldi	r17, 0x00	; 0
    341c:	02 30       	cpi	r16, 0x02	; 2
    341e:	11 05       	cpc	r17, r1
    3420:	34 f3       	brlt	.-52     	; 0x33ee <__vector_18+0x238>
						for(int j = 0; j < 2; j++){
							sendreg(j, 0xB4+i, 0xC0 + (ym.tremolo<<4) + ym.vibrato); // register is shared with tremolo and panning 
						}
					}
				} else {
					for(int i = 0; i < 3; i++){
    3422:	9f ef       	ldi	r25, 0xFF	; 255
    3424:	e9 1a       	sub	r14, r25
    3426:	f9 0a       	sbc	r15, r25
    3428:	e3 e0       	ldi	r30, 0x03	; 3
    342a:	ee 16       	cp	r14, r30
    342c:	f1 04       	cpc	r15, r1
    342e:	a4 f3       	brlt	.-24     	; 0x3418 <__vector_18+0x262>
    3430:	0f c0       	rjmp	.+30     	; 0x3450 <__vector_18+0x29a>
				}
				break;
				
			case 0xE0: // pitch bend (kinda wonky, use it to turn all notes off instead for now)
				for(int i = 0; i < 6; i++){
					sendreg(0, 0x28, 0x00+chan[i]);
    3432:	fe 01       	movw	r30, r28
    3434:	e4 51       	subi	r30, 0x14	; 20
    3436:	fb 4f       	sbci	r31, 0xFB	; 251
    3438:	40 81       	ld	r20, Z
    343a:	68 e2       	ldi	r22, 0x28	; 40
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
					}
				}
				break;
				
			case 0xE0: // pitch bend (kinda wonky, use it to turn all notes off instead for now)
				for(int i = 0; i < 6; i++){
    3442:	21 96       	adiw	r28, 0x01	; 1
    3444:	02 c0       	rjmp	.+4      	; 0x344a <__vector_18+0x294>
				break;
		}
		
	// message is 2 bytes (aftertouch, pitch bend)
	} else if((glb.midiIndex - glb.msgStart == 2) || (glb.midiIndex == 1 && case1) || (glb.midiIndex == 0 && case2)){
		switch(glb.midiBuf[glb.msgStart] & 0xF0){
    3446:	c0 e0       	ldi	r28, 0x00	; 0
    3448:	d0 e0       	ldi	r29, 0x00	; 0
					}
				}
				break;
				
			case 0xE0: // pitch bend (kinda wonky, use it to turn all notes off instead for now)
				for(int i = 0; i < 6; i++){
    344a:	c6 30       	cpi	r28, 0x06	; 6
    344c:	d1 05       	cpc	r29, r1
    344e:	8c f3       	brlt	.-30     	; 0x3432 <__vector_18+0x27c>
					*/
				break;
		}
	}
	
	SREG = glb.sreg;
    3450:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <glb+0x10a>
    3454:	8f bf       	out	0x3f, r24	; 63
}
    3456:	ff 91       	pop	r31
    3458:	ef 91       	pop	r30
    345a:	df 91       	pop	r29
    345c:	cf 91       	pop	r28
    345e:	bf 91       	pop	r27
    3460:	af 91       	pop	r26
    3462:	9f 91       	pop	r25
    3464:	8f 91       	pop	r24
    3466:	7f 91       	pop	r23
    3468:	6f 91       	pop	r22
    346a:	5f 91       	pop	r21
    346c:	4f 91       	pop	r20
    346e:	3f 91       	pop	r19
    3470:	2f 91       	pop	r18
    3472:	1f 91       	pop	r17
    3474:	0f 91       	pop	r16
    3476:	ff 90       	pop	r15
    3478:	ef 90       	pop	r14
    347a:	0f 90       	pop	r0
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	0f 90       	pop	r0
    3480:	1f 90       	pop	r1
    3482:	18 95       	reti

00003484 <__vector_13>:

// when the timer overflows, turn on or off any notes (channels) that are waiting to be turned off or on
ISR(TIMER1_OVF_vect){
    3484:	1f 92       	push	r1
    3486:	0f 92       	push	r0
    3488:	0f b6       	in	r0, 0x3f	; 63
    348a:	0f 92       	push	r0
    348c:	11 24       	eor	r1, r1
    348e:	ef 92       	push	r14
    3490:	ff 92       	push	r15
    3492:	0f 93       	push	r16
    3494:	1f 93       	push	r17
    3496:	2f 93       	push	r18
    3498:	3f 93       	push	r19
    349a:	4f 93       	push	r20
    349c:	5f 93       	push	r21
    349e:	6f 93       	push	r22
    34a0:	7f 93       	push	r23
    34a2:	8f 93       	push	r24
    34a4:	9f 93       	push	r25
    34a6:	af 93       	push	r26
    34a8:	bf 93       	push	r27
    34aa:	cf 93       	push	r28
    34ac:	df 93       	push	r29
    34ae:	ef 93       	push	r30
    34b0:	ff 93       	push	r31
	glb.sreg = SREG;
    34b2:	8f b7       	in	r24, 0x3f	; 63
    34b4:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <glb+0x10a>
	cli();
    34b8:	f8 94       	cli
	
	uint8_t chanGrp;
	
	for(int i = 0; i < 6; i++){
    34ba:	c0 e0       	ldi	r28, 0x00	; 0
    34bc:	d0 e0       	ldi	r29, 0x00	; 0
    34be:	70 c0       	rjmp	.+224    	; 0x35a0 <__vector_13+0x11c>
		chanGrp = (i > 2);
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	c3 30       	cpi	r28, 0x03	; 3
    34c4:	d1 05       	cpc	r29, r1
    34c6:	0c f4       	brge	.+2      	; 0x34ca <__vector_13+0x46>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	18 2f       	mov	r17, r24
		
		// turn notes on 
		if(ym.notesOn[i][1] && !ym.notesOn[i][2]){ // note is currently off but should be on
    34cc:	fe 01       	movw	r30, r28
    34ce:	ee 0f       	add	r30, r30
    34d0:	ff 1f       	adc	r31, r31
    34d2:	ec 0f       	add	r30, r28
    34d4:	fd 1f       	adc	r31, r29
    34d6:	e2 50       	subi	r30, 0x02	; 2
    34d8:	fa 4f       	sbci	r31, 0xFA	; 250
    34da:	83 8d       	ldd	r24, Z+27	; 0x1b
    34dc:	88 23       	and	r24, r24
    34de:	c9 f1       	breq	.+114    	; 0x3552 <__vector_13+0xce>
    34e0:	fe 01       	movw	r30, r28
    34e2:	ee 0f       	add	r30, r30
    34e4:	ff 1f       	adc	r31, r31
    34e6:	ec 0f       	add	r30, r28
    34e8:	fd 1f       	adc	r31, r29
    34ea:	e2 50       	subi	r30, 0x02	; 2
    34ec:	fa 4f       	sbci	r31, 0xFA	; 250
    34ee:	84 8d       	ldd	r24, Z+28	; 0x1c
    34f0:	81 11       	cpse	r24, r1
    34f2:	2f c0       	rjmp	.+94     	; 0x3552 <__vector_13+0xce>
				sendreg(chanGrp, 0x40+n%3+opOffset[o], 127 - ym.vel[n]);
			}
			*/
			
			// set frequency high/low registers
			sendreg(chanGrp, 0xA4+i%3, ym.freq[i][0]);
    34f4:	fe 01       	movw	r30, r28
    34f6:	34 96       	adiw	r30, 0x04	; 4
    34f8:	ee 0f       	add	r30, r30
    34fa:	ff 1f       	adc	r31, r31
    34fc:	e2 50       	subi	r30, 0x02	; 2
    34fe:	fa 4f       	sbci	r31, 0xFA	; 250
    3500:	40 81       	ld	r20, Z
    3502:	ce 01       	movw	r24, r28
    3504:	63 e0       	ldi	r22, 0x03	; 3
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divmodhi4>
    350c:	08 2f       	mov	r16, r24
    350e:	64 ea       	ldi	r22, 0xA4	; 164
    3510:	68 0f       	add	r22, r24
    3512:	81 2f       	mov	r24, r17
    3514:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
			sendreg(chanGrp, 0xA0+i%3, ym.freq[i][1]);
    3518:	7e 01       	movw	r14, r28
    351a:	ee 0c       	add	r14, r14
    351c:	ff 1c       	adc	r15, r15
    351e:	f7 01       	movw	r30, r14
    3520:	e2 50       	subi	r30, 0x02	; 2
    3522:	fa 4f       	sbci	r31, 0xFA	; 250
    3524:	41 85       	ldd	r20, Z+9	; 0x09
    3526:	60 ea       	ldi	r22, 0xA0	; 160
    3528:	60 0f       	add	r22, r16
    352a:	81 2f       	mov	r24, r17
    352c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
			
			// turn note on
			sendreg(0, 0x28, 0xF0+chan[i]);
    3530:	fe 01       	movw	r30, r28
    3532:	e4 51       	subi	r30, 0x14	; 20
    3534:	fb 4f       	sbci	r31, 0xFB	; 251
    3536:	40 81       	ld	r20, Z
    3538:	40 51       	subi	r20, 0x10	; 16
    353a:	68 e2       	ldi	r22, 0x28	; 40
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
			
			// flag to indicate that note is indeed on
			ym.notesOn[i][2] = 1;
    3542:	f7 01       	movw	r30, r14
    3544:	ec 0f       	add	r30, r28
    3546:	fd 1f       	adc	r31, r29
    3548:	e2 50       	subi	r30, 0x02	; 2
    354a:	fa 4f       	sbci	r31, 0xFA	; 250
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	84 8f       	std	Z+28, r24	; 0x1c
    3550:	26 c0       	rjmp	.+76     	; 0x359e <__vector_13+0x11a>
			
		// turn notes off
		} else if(!ym.notesOn[i][1] && ym.notesOn[i][2]){ // note is currently on but should be off
    3552:	fe 01       	movw	r30, r28
    3554:	ee 0f       	add	r30, r30
    3556:	ff 1f       	adc	r31, r31
    3558:	ec 0f       	add	r30, r28
    355a:	fd 1f       	adc	r31, r29
    355c:	e2 50       	subi	r30, 0x02	; 2
    355e:	fa 4f       	sbci	r31, 0xFA	; 250
    3560:	83 8d       	ldd	r24, Z+27	; 0x1b
    3562:	81 11       	cpse	r24, r1
    3564:	1c c0       	rjmp	.+56     	; 0x359e <__vector_13+0x11a>
    3566:	fe 01       	movw	r30, r28
    3568:	ee 0f       	add	r30, r30
    356a:	ff 1f       	adc	r31, r31
    356c:	ec 0f       	add	r30, r28
    356e:	fd 1f       	adc	r31, r29
    3570:	e2 50       	subi	r30, 0x02	; 2
    3572:	fa 4f       	sbci	r31, 0xFA	; 250
    3574:	84 8d       	ldd	r24, Z+28	; 0x1c
    3576:	88 23       	and	r24, r24
    3578:	91 f0       	breq	.+36     	; 0x359e <__vector_13+0x11a>
			
			// turn note off
			sendreg(0, 0x28, 0x00+chan[i]);
    357a:	fe 01       	movw	r30, r28
    357c:	e4 51       	subi	r30, 0x14	; 20
    357e:	fb 4f       	sbci	r31, 0xFB	; 251
    3580:	40 81       	ld	r20, Z
    3582:	68 e2       	ldi	r22, 0x28	; 40
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sendreg>
			
			// clear note number, set both flags to 0 to indicate that note is off
			ym.notesOn[i][0] = 0;
    358a:	fe 01       	movw	r30, r28
    358c:	ee 0f       	add	r30, r30
    358e:	ff 1f       	adc	r31, r31
    3590:	ec 0f       	add	r30, r28
    3592:	fd 1f       	adc	r31, r29
    3594:	e2 50       	subi	r30, 0x02	; 2
    3596:	fa 4f       	sbci	r31, 0xFA	; 250
    3598:	12 8e       	std	Z+26, r1	; 0x1a
			ym.notesOn[i][1] = 0;
    359a:	13 8e       	std	Z+27, r1	; 0x1b
			ym.notesOn[i][2] = 0;
    359c:	14 8e       	std	Z+28, r1	; 0x1c
	glb.sreg = SREG;
	cli();
	
	uint8_t chanGrp;
	
	for(int i = 0; i < 6; i++){
    359e:	21 96       	adiw	r28, 0x01	; 1
    35a0:	c6 30       	cpi	r28, 0x06	; 6
    35a2:	d1 05       	cpc	r29, r1
    35a4:	0c f4       	brge	.+2      	; 0x35a8 <__vector_13+0x124>
    35a6:	8c cf       	rjmp	.-232    	; 0x34c0 <__vector_13+0x3c>
			ym.notesOn[i][1] = 0;
			ym.notesOn[i][2] = 0;
		}
	}
	
	SREG = glb.sreg;
    35a8:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <glb+0x10a>
    35ac:	8f bf       	out	0x3f, r24	; 63
    35ae:	ff 91       	pop	r31
    35b0:	ef 91       	pop	r30
    35b2:	df 91       	pop	r29
    35b4:	cf 91       	pop	r28
    35b6:	bf 91       	pop	r27
    35b8:	af 91       	pop	r26
    35ba:	9f 91       	pop	r25
    35bc:	8f 91       	pop	r24
    35be:	7f 91       	pop	r23
    35c0:	6f 91       	pop	r22
    35c2:	5f 91       	pop	r21
    35c4:	4f 91       	pop	r20
    35c6:	3f 91       	pop	r19
    35c8:	2f 91       	pop	r18
    35ca:	1f 91       	pop	r17
    35cc:	0f 91       	pop	r16
    35ce:	ff 90       	pop	r15
    35d0:	ef 90       	pop	r14
    35d2:	0f 90       	pop	r0
    35d4:	0f be       	out	0x3f, r0	; 63
    35d6:	0f 90       	pop	r0
    35d8:	1f 90       	pop	r1
    35da:	18 95       	reti

000035dc <__divmodhi4>:
    35dc:	97 fb       	bst	r25, 7
    35de:	07 2e       	mov	r0, r23
    35e0:	16 f4       	brtc	.+4      	; 0x35e6 <__divmodhi4+0xa>
    35e2:	00 94       	com	r0
    35e4:	07 d0       	rcall	.+14     	; 0x35f4 <__divmodhi4_neg1>
    35e6:	77 fd       	sbrc	r23, 7
    35e8:	09 d0       	rcall	.+18     	; 0x35fc <__divmodhi4_neg2>
    35ea:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
    35ee:	07 fc       	sbrc	r0, 7
    35f0:	05 d0       	rcall	.+10     	; 0x35fc <__divmodhi4_neg2>
    35f2:	3e f4       	brtc	.+14     	; 0x3602 <__divmodhi4_exit>

000035f4 <__divmodhi4_neg1>:
    35f4:	90 95       	com	r25
    35f6:	81 95       	neg	r24
    35f8:	9f 4f       	sbci	r25, 0xFF	; 255
    35fa:	08 95       	ret

000035fc <__divmodhi4_neg2>:
    35fc:	70 95       	com	r23
    35fe:	61 95       	neg	r22
    3600:	7f 4f       	sbci	r23, 0xFF	; 255

00003602 <__divmodhi4_exit>:
    3602:	08 95       	ret

00003604 <__tablejump2__>:
    3604:	ee 0f       	add	r30, r30
    3606:	ff 1f       	adc	r31, r31
    3608:	05 90       	lpm	r0, Z+
    360a:	f4 91       	lpm	r31, Z
    360c:	e0 2d       	mov	r30, r0
    360e:	09 94       	ijmp

00003610 <__udivmodhi4>:
    3610:	aa 1b       	sub	r26, r26
    3612:	bb 1b       	sub	r27, r27
    3614:	51 e1       	ldi	r21, 0x11	; 17
    3616:	07 c0       	rjmp	.+14     	; 0x3626 <__udivmodhi4_ep>

00003618 <__udivmodhi4_loop>:
    3618:	aa 1f       	adc	r26, r26
    361a:	bb 1f       	adc	r27, r27
    361c:	a6 17       	cp	r26, r22
    361e:	b7 07       	cpc	r27, r23
    3620:	10 f0       	brcs	.+4      	; 0x3626 <__udivmodhi4_ep>
    3622:	a6 1b       	sub	r26, r22
    3624:	b7 0b       	sbc	r27, r23

00003626 <__udivmodhi4_ep>:
    3626:	88 1f       	adc	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	5a 95       	dec	r21
    362c:	a9 f7       	brne	.-22     	; 0x3618 <__udivmodhi4_loop>
    362e:	80 95       	com	r24
    3630:	90 95       	com	r25
    3632:	bc 01       	movw	r22, r24
    3634:	cd 01       	movw	r24, r26
    3636:	08 95       	ret

00003638 <printf>:
    3638:	a0 e0       	ldi	r26, 0x00	; 0
    363a:	b0 e0       	ldi	r27, 0x00	; 0
    363c:	e2 e2       	ldi	r30, 0x22	; 34
    363e:	fb e1       	ldi	r31, 0x1B	; 27
    3640:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__prologue_saves__+0x20>
    3644:	ae 01       	movw	r20, r28
    3646:	4b 5f       	subi	r20, 0xFB	; 251
    3648:	5f 4f       	sbci	r21, 0xFF	; 255
    364a:	fa 01       	movw	r30, r20
    364c:	61 91       	ld	r22, Z+
    364e:	71 91       	ld	r23, Z+
    3650:	af 01       	movw	r20, r30
    3652:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <__iob+0x2>
    3656:	90 91 a2 06 	lds	r25, 0x06A2	; 0x8006a2 <__iob+0x3>
    365a:	0e 94 32 1b 	call	0x3664	; 0x3664 <vfprintf>
    365e:	e2 e0       	ldi	r30, 0x02	; 2
    3660:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__epilogue_restores__+0x20>

00003664 <vfprintf>:
    3664:	ab e0       	ldi	r26, 0x0B	; 11
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	e8 e3       	ldi	r30, 0x38	; 56
    366a:	fb e1       	ldi	r31, 0x1B	; 27
    366c:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__prologue_saves__>
    3670:	6c 01       	movw	r12, r24
    3672:	7b 01       	movw	r14, r22
    3674:	8a 01       	movw	r16, r20
    3676:	fc 01       	movw	r30, r24
    3678:	17 82       	std	Z+7, r1	; 0x07
    367a:	16 82       	std	Z+6, r1	; 0x06
    367c:	83 81       	ldd	r24, Z+3	; 0x03
    367e:	81 ff       	sbrs	r24, 1
    3680:	cc c1       	rjmp	.+920    	; 0x3a1a <vfprintf+0x3b6>
    3682:	ce 01       	movw	r24, r28
    3684:	01 96       	adiw	r24, 0x01	; 1
    3686:	3c 01       	movw	r6, r24
    3688:	f6 01       	movw	r30, r12
    368a:	93 81       	ldd	r25, Z+3	; 0x03
    368c:	f7 01       	movw	r30, r14
    368e:	93 fd       	sbrc	r25, 3
    3690:	85 91       	lpm	r24, Z+
    3692:	93 ff       	sbrs	r25, 3
    3694:	81 91       	ld	r24, Z+
    3696:	7f 01       	movw	r14, r30
    3698:	88 23       	and	r24, r24
    369a:	09 f4       	brne	.+2      	; 0x369e <vfprintf+0x3a>
    369c:	ba c1       	rjmp	.+884    	; 0x3a12 <vfprintf+0x3ae>
    369e:	85 32       	cpi	r24, 0x25	; 37
    36a0:	39 f4       	brne	.+14     	; 0x36b0 <vfprintf+0x4c>
    36a2:	93 fd       	sbrc	r25, 3
    36a4:	85 91       	lpm	r24, Z+
    36a6:	93 ff       	sbrs	r25, 3
    36a8:	81 91       	ld	r24, Z+
    36aa:	7f 01       	movw	r14, r30
    36ac:	85 32       	cpi	r24, 0x25	; 37
    36ae:	29 f4       	brne	.+10     	; 0x36ba <vfprintf+0x56>
    36b0:	b6 01       	movw	r22, r12
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <fputc>
    36b8:	e7 cf       	rjmp	.-50     	; 0x3688 <vfprintf+0x24>
    36ba:	91 2c       	mov	r9, r1
    36bc:	21 2c       	mov	r2, r1
    36be:	31 2c       	mov	r3, r1
    36c0:	ff e1       	ldi	r31, 0x1F	; 31
    36c2:	f3 15       	cp	r31, r3
    36c4:	d8 f0       	brcs	.+54     	; 0x36fc <vfprintf+0x98>
    36c6:	8b 32       	cpi	r24, 0x2B	; 43
    36c8:	79 f0       	breq	.+30     	; 0x36e8 <vfprintf+0x84>
    36ca:	38 f4       	brcc	.+14     	; 0x36da <vfprintf+0x76>
    36cc:	80 32       	cpi	r24, 0x20	; 32
    36ce:	79 f0       	breq	.+30     	; 0x36ee <vfprintf+0x8a>
    36d0:	83 32       	cpi	r24, 0x23	; 35
    36d2:	a1 f4       	brne	.+40     	; 0x36fc <vfprintf+0x98>
    36d4:	23 2d       	mov	r18, r3
    36d6:	20 61       	ori	r18, 0x10	; 16
    36d8:	1d c0       	rjmp	.+58     	; 0x3714 <vfprintf+0xb0>
    36da:	8d 32       	cpi	r24, 0x2D	; 45
    36dc:	61 f0       	breq	.+24     	; 0x36f6 <vfprintf+0x92>
    36de:	80 33       	cpi	r24, 0x30	; 48
    36e0:	69 f4       	brne	.+26     	; 0x36fc <vfprintf+0x98>
    36e2:	23 2d       	mov	r18, r3
    36e4:	21 60       	ori	r18, 0x01	; 1
    36e6:	16 c0       	rjmp	.+44     	; 0x3714 <vfprintf+0xb0>
    36e8:	83 2d       	mov	r24, r3
    36ea:	82 60       	ori	r24, 0x02	; 2
    36ec:	38 2e       	mov	r3, r24
    36ee:	e3 2d       	mov	r30, r3
    36f0:	e4 60       	ori	r30, 0x04	; 4
    36f2:	3e 2e       	mov	r3, r30
    36f4:	2a c0       	rjmp	.+84     	; 0x374a <vfprintf+0xe6>
    36f6:	f3 2d       	mov	r31, r3
    36f8:	f8 60       	ori	r31, 0x08	; 8
    36fa:	1d c0       	rjmp	.+58     	; 0x3736 <vfprintf+0xd2>
    36fc:	37 fc       	sbrc	r3, 7
    36fe:	2d c0       	rjmp	.+90     	; 0x375a <vfprintf+0xf6>
    3700:	20 ed       	ldi	r18, 0xD0	; 208
    3702:	28 0f       	add	r18, r24
    3704:	2a 30       	cpi	r18, 0x0A	; 10
    3706:	40 f0       	brcs	.+16     	; 0x3718 <vfprintf+0xb4>
    3708:	8e 32       	cpi	r24, 0x2E	; 46
    370a:	b9 f4       	brne	.+46     	; 0x373a <vfprintf+0xd6>
    370c:	36 fc       	sbrc	r3, 6
    370e:	81 c1       	rjmp	.+770    	; 0x3a12 <vfprintf+0x3ae>
    3710:	23 2d       	mov	r18, r3
    3712:	20 64       	ori	r18, 0x40	; 64
    3714:	32 2e       	mov	r3, r18
    3716:	19 c0       	rjmp	.+50     	; 0x374a <vfprintf+0xe6>
    3718:	36 fe       	sbrs	r3, 6
    371a:	06 c0       	rjmp	.+12     	; 0x3728 <vfprintf+0xc4>
    371c:	8a e0       	ldi	r24, 0x0A	; 10
    371e:	98 9e       	mul	r9, r24
    3720:	20 0d       	add	r18, r0
    3722:	11 24       	eor	r1, r1
    3724:	92 2e       	mov	r9, r18
    3726:	11 c0       	rjmp	.+34     	; 0x374a <vfprintf+0xe6>
    3728:	ea e0       	ldi	r30, 0x0A	; 10
    372a:	2e 9e       	mul	r2, r30
    372c:	20 0d       	add	r18, r0
    372e:	11 24       	eor	r1, r1
    3730:	22 2e       	mov	r2, r18
    3732:	f3 2d       	mov	r31, r3
    3734:	f0 62       	ori	r31, 0x20	; 32
    3736:	3f 2e       	mov	r3, r31
    3738:	08 c0       	rjmp	.+16     	; 0x374a <vfprintf+0xe6>
    373a:	8c 36       	cpi	r24, 0x6C	; 108
    373c:	21 f4       	brne	.+8      	; 0x3746 <vfprintf+0xe2>
    373e:	83 2d       	mov	r24, r3
    3740:	80 68       	ori	r24, 0x80	; 128
    3742:	38 2e       	mov	r3, r24
    3744:	02 c0       	rjmp	.+4      	; 0x374a <vfprintf+0xe6>
    3746:	88 36       	cpi	r24, 0x68	; 104
    3748:	41 f4       	brne	.+16     	; 0x375a <vfprintf+0xf6>
    374a:	f7 01       	movw	r30, r14
    374c:	93 fd       	sbrc	r25, 3
    374e:	85 91       	lpm	r24, Z+
    3750:	93 ff       	sbrs	r25, 3
    3752:	81 91       	ld	r24, Z+
    3754:	7f 01       	movw	r14, r30
    3756:	81 11       	cpse	r24, r1
    3758:	b3 cf       	rjmp	.-154    	; 0x36c0 <vfprintf+0x5c>
    375a:	98 2f       	mov	r25, r24
    375c:	9f 7d       	andi	r25, 0xDF	; 223
    375e:	95 54       	subi	r25, 0x45	; 69
    3760:	93 30       	cpi	r25, 0x03	; 3
    3762:	28 f4       	brcc	.+10     	; 0x376e <vfprintf+0x10a>
    3764:	0c 5f       	subi	r16, 0xFC	; 252
    3766:	1f 4f       	sbci	r17, 0xFF	; 255
    3768:	9f e3       	ldi	r25, 0x3F	; 63
    376a:	99 83       	std	Y+1, r25	; 0x01
    376c:	0d c0       	rjmp	.+26     	; 0x3788 <vfprintf+0x124>
    376e:	83 36       	cpi	r24, 0x63	; 99
    3770:	31 f0       	breq	.+12     	; 0x377e <vfprintf+0x11a>
    3772:	83 37       	cpi	r24, 0x73	; 115
    3774:	71 f0       	breq	.+28     	; 0x3792 <vfprintf+0x12e>
    3776:	83 35       	cpi	r24, 0x53	; 83
    3778:	09 f0       	breq	.+2      	; 0x377c <vfprintf+0x118>
    377a:	59 c0       	rjmp	.+178    	; 0x382e <vfprintf+0x1ca>
    377c:	21 c0       	rjmp	.+66     	; 0x37c0 <vfprintf+0x15c>
    377e:	f8 01       	movw	r30, r16
    3780:	80 81       	ld	r24, Z
    3782:	89 83       	std	Y+1, r24	; 0x01
    3784:	0e 5f       	subi	r16, 0xFE	; 254
    3786:	1f 4f       	sbci	r17, 0xFF	; 255
    3788:	88 24       	eor	r8, r8
    378a:	83 94       	inc	r8
    378c:	91 2c       	mov	r9, r1
    378e:	53 01       	movw	r10, r6
    3790:	13 c0       	rjmp	.+38     	; 0x37b8 <vfprintf+0x154>
    3792:	28 01       	movw	r4, r16
    3794:	f2 e0       	ldi	r31, 0x02	; 2
    3796:	4f 0e       	add	r4, r31
    3798:	51 1c       	adc	r5, r1
    379a:	f8 01       	movw	r30, r16
    379c:	a0 80       	ld	r10, Z
    379e:	b1 80       	ldd	r11, Z+1	; 0x01
    37a0:	36 fe       	sbrs	r3, 6
    37a2:	03 c0       	rjmp	.+6      	; 0x37aa <vfprintf+0x146>
    37a4:	69 2d       	mov	r22, r9
    37a6:	70 e0       	ldi	r23, 0x00	; 0
    37a8:	02 c0       	rjmp	.+4      	; 0x37ae <vfprintf+0x14a>
    37aa:	6f ef       	ldi	r22, 0xFF	; 255
    37ac:	7f ef       	ldi	r23, 0xFF	; 255
    37ae:	c5 01       	movw	r24, r10
    37b0:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <strnlen>
    37b4:	4c 01       	movw	r8, r24
    37b6:	82 01       	movw	r16, r4
    37b8:	f3 2d       	mov	r31, r3
    37ba:	ff 77       	andi	r31, 0x7F	; 127
    37bc:	3f 2e       	mov	r3, r31
    37be:	16 c0       	rjmp	.+44     	; 0x37ec <vfprintf+0x188>
    37c0:	28 01       	movw	r4, r16
    37c2:	22 e0       	ldi	r18, 0x02	; 2
    37c4:	42 0e       	add	r4, r18
    37c6:	51 1c       	adc	r5, r1
    37c8:	f8 01       	movw	r30, r16
    37ca:	a0 80       	ld	r10, Z
    37cc:	b1 80       	ldd	r11, Z+1	; 0x01
    37ce:	36 fe       	sbrs	r3, 6
    37d0:	03 c0       	rjmp	.+6      	; 0x37d8 <vfprintf+0x174>
    37d2:	69 2d       	mov	r22, r9
    37d4:	70 e0       	ldi	r23, 0x00	; 0
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <vfprintf+0x178>
    37d8:	6f ef       	ldi	r22, 0xFF	; 255
    37da:	7f ef       	ldi	r23, 0xFF	; 255
    37dc:	c5 01       	movw	r24, r10
    37de:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <strnlen_P>
    37e2:	4c 01       	movw	r8, r24
    37e4:	f3 2d       	mov	r31, r3
    37e6:	f0 68       	ori	r31, 0x80	; 128
    37e8:	3f 2e       	mov	r3, r31
    37ea:	82 01       	movw	r16, r4
    37ec:	33 fc       	sbrc	r3, 3
    37ee:	1b c0       	rjmp	.+54     	; 0x3826 <vfprintf+0x1c2>
    37f0:	82 2d       	mov	r24, r2
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	88 16       	cp	r8, r24
    37f6:	99 06       	cpc	r9, r25
    37f8:	b0 f4       	brcc	.+44     	; 0x3826 <vfprintf+0x1c2>
    37fa:	b6 01       	movw	r22, r12
    37fc:	80 e2       	ldi	r24, 0x20	; 32
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <fputc>
    3804:	2a 94       	dec	r2
    3806:	f4 cf       	rjmp	.-24     	; 0x37f0 <vfprintf+0x18c>
    3808:	f5 01       	movw	r30, r10
    380a:	37 fc       	sbrc	r3, 7
    380c:	85 91       	lpm	r24, Z+
    380e:	37 fe       	sbrs	r3, 7
    3810:	81 91       	ld	r24, Z+
    3812:	5f 01       	movw	r10, r30
    3814:	b6 01       	movw	r22, r12
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <fputc>
    381c:	21 10       	cpse	r2, r1
    381e:	2a 94       	dec	r2
    3820:	21 e0       	ldi	r18, 0x01	; 1
    3822:	82 1a       	sub	r8, r18
    3824:	91 08       	sbc	r9, r1
    3826:	81 14       	cp	r8, r1
    3828:	91 04       	cpc	r9, r1
    382a:	71 f7       	brne	.-36     	; 0x3808 <vfprintf+0x1a4>
    382c:	e8 c0       	rjmp	.+464    	; 0x39fe <vfprintf+0x39a>
    382e:	84 36       	cpi	r24, 0x64	; 100
    3830:	11 f0       	breq	.+4      	; 0x3836 <vfprintf+0x1d2>
    3832:	89 36       	cpi	r24, 0x69	; 105
    3834:	41 f5       	brne	.+80     	; 0x3886 <vfprintf+0x222>
    3836:	f8 01       	movw	r30, r16
    3838:	37 fe       	sbrs	r3, 7
    383a:	07 c0       	rjmp	.+14     	; 0x384a <vfprintf+0x1e6>
    383c:	60 81       	ld	r22, Z
    383e:	71 81       	ldd	r23, Z+1	; 0x01
    3840:	82 81       	ldd	r24, Z+2	; 0x02
    3842:	93 81       	ldd	r25, Z+3	; 0x03
    3844:	0c 5f       	subi	r16, 0xFC	; 252
    3846:	1f 4f       	sbci	r17, 0xFF	; 255
    3848:	08 c0       	rjmp	.+16     	; 0x385a <vfprintf+0x1f6>
    384a:	60 81       	ld	r22, Z
    384c:	71 81       	ldd	r23, Z+1	; 0x01
    384e:	07 2e       	mov	r0, r23
    3850:	00 0c       	add	r0, r0
    3852:	88 0b       	sbc	r24, r24
    3854:	99 0b       	sbc	r25, r25
    3856:	0e 5f       	subi	r16, 0xFE	; 254
    3858:	1f 4f       	sbci	r17, 0xFF	; 255
    385a:	f3 2d       	mov	r31, r3
    385c:	ff 76       	andi	r31, 0x6F	; 111
    385e:	3f 2e       	mov	r3, r31
    3860:	97 ff       	sbrs	r25, 7
    3862:	09 c0       	rjmp	.+18     	; 0x3876 <vfprintf+0x212>
    3864:	90 95       	com	r25
    3866:	80 95       	com	r24
    3868:	70 95       	com	r23
    386a:	61 95       	neg	r22
    386c:	7f 4f       	sbci	r23, 0xFF	; 255
    386e:	8f 4f       	sbci	r24, 0xFF	; 255
    3870:	9f 4f       	sbci	r25, 0xFF	; 255
    3872:	f0 68       	ori	r31, 0x80	; 128
    3874:	3f 2e       	mov	r3, r31
    3876:	2a e0       	ldi	r18, 0x0A	; 10
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	a3 01       	movw	r20, r6
    387c:	0e 94 65 1d 	call	0x3aca	; 0x3aca <__ultoa_invert>
    3880:	88 2e       	mov	r8, r24
    3882:	86 18       	sub	r8, r6
    3884:	45 c0       	rjmp	.+138    	; 0x3910 <vfprintf+0x2ac>
    3886:	85 37       	cpi	r24, 0x75	; 117
    3888:	31 f4       	brne	.+12     	; 0x3896 <vfprintf+0x232>
    388a:	23 2d       	mov	r18, r3
    388c:	2f 7e       	andi	r18, 0xEF	; 239
    388e:	b2 2e       	mov	r11, r18
    3890:	2a e0       	ldi	r18, 0x0A	; 10
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	25 c0       	rjmp	.+74     	; 0x38e0 <vfprintf+0x27c>
    3896:	93 2d       	mov	r25, r3
    3898:	99 7f       	andi	r25, 0xF9	; 249
    389a:	b9 2e       	mov	r11, r25
    389c:	8f 36       	cpi	r24, 0x6F	; 111
    389e:	c1 f0       	breq	.+48     	; 0x38d0 <vfprintf+0x26c>
    38a0:	18 f4       	brcc	.+6      	; 0x38a8 <vfprintf+0x244>
    38a2:	88 35       	cpi	r24, 0x58	; 88
    38a4:	79 f0       	breq	.+30     	; 0x38c4 <vfprintf+0x260>
    38a6:	b5 c0       	rjmp	.+362    	; 0x3a12 <vfprintf+0x3ae>
    38a8:	80 37       	cpi	r24, 0x70	; 112
    38aa:	19 f0       	breq	.+6      	; 0x38b2 <vfprintf+0x24e>
    38ac:	88 37       	cpi	r24, 0x78	; 120
    38ae:	21 f0       	breq	.+8      	; 0x38b8 <vfprintf+0x254>
    38b0:	b0 c0       	rjmp	.+352    	; 0x3a12 <vfprintf+0x3ae>
    38b2:	e9 2f       	mov	r30, r25
    38b4:	e0 61       	ori	r30, 0x10	; 16
    38b6:	be 2e       	mov	r11, r30
    38b8:	b4 fe       	sbrs	r11, 4
    38ba:	0d c0       	rjmp	.+26     	; 0x38d6 <vfprintf+0x272>
    38bc:	fb 2d       	mov	r31, r11
    38be:	f4 60       	ori	r31, 0x04	; 4
    38c0:	bf 2e       	mov	r11, r31
    38c2:	09 c0       	rjmp	.+18     	; 0x38d6 <vfprintf+0x272>
    38c4:	34 fe       	sbrs	r3, 4
    38c6:	0a c0       	rjmp	.+20     	; 0x38dc <vfprintf+0x278>
    38c8:	29 2f       	mov	r18, r25
    38ca:	26 60       	ori	r18, 0x06	; 6
    38cc:	b2 2e       	mov	r11, r18
    38ce:	06 c0       	rjmp	.+12     	; 0x38dc <vfprintf+0x278>
    38d0:	28 e0       	ldi	r18, 0x08	; 8
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	05 c0       	rjmp	.+10     	; 0x38e0 <vfprintf+0x27c>
    38d6:	20 e1       	ldi	r18, 0x10	; 16
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	02 c0       	rjmp	.+4      	; 0x38e0 <vfprintf+0x27c>
    38dc:	20 e1       	ldi	r18, 0x10	; 16
    38de:	32 e0       	ldi	r19, 0x02	; 2
    38e0:	f8 01       	movw	r30, r16
    38e2:	b7 fe       	sbrs	r11, 7
    38e4:	07 c0       	rjmp	.+14     	; 0x38f4 <vfprintf+0x290>
    38e6:	60 81       	ld	r22, Z
    38e8:	71 81       	ldd	r23, Z+1	; 0x01
    38ea:	82 81       	ldd	r24, Z+2	; 0x02
    38ec:	93 81       	ldd	r25, Z+3	; 0x03
    38ee:	0c 5f       	subi	r16, 0xFC	; 252
    38f0:	1f 4f       	sbci	r17, 0xFF	; 255
    38f2:	06 c0       	rjmp	.+12     	; 0x3900 <vfprintf+0x29c>
    38f4:	60 81       	ld	r22, Z
    38f6:	71 81       	ldd	r23, Z+1	; 0x01
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	0e 5f       	subi	r16, 0xFE	; 254
    38fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3900:	a3 01       	movw	r20, r6
    3902:	0e 94 65 1d 	call	0x3aca	; 0x3aca <__ultoa_invert>
    3906:	88 2e       	mov	r8, r24
    3908:	86 18       	sub	r8, r6
    390a:	fb 2d       	mov	r31, r11
    390c:	ff 77       	andi	r31, 0x7F	; 127
    390e:	3f 2e       	mov	r3, r31
    3910:	36 fe       	sbrs	r3, 6
    3912:	0d c0       	rjmp	.+26     	; 0x392e <vfprintf+0x2ca>
    3914:	23 2d       	mov	r18, r3
    3916:	2e 7f       	andi	r18, 0xFE	; 254
    3918:	a2 2e       	mov	r10, r18
    391a:	89 14       	cp	r8, r9
    391c:	58 f4       	brcc	.+22     	; 0x3934 <vfprintf+0x2d0>
    391e:	34 fe       	sbrs	r3, 4
    3920:	0b c0       	rjmp	.+22     	; 0x3938 <vfprintf+0x2d4>
    3922:	32 fc       	sbrc	r3, 2
    3924:	09 c0       	rjmp	.+18     	; 0x3938 <vfprintf+0x2d4>
    3926:	83 2d       	mov	r24, r3
    3928:	8e 7e       	andi	r24, 0xEE	; 238
    392a:	a8 2e       	mov	r10, r24
    392c:	05 c0       	rjmp	.+10     	; 0x3938 <vfprintf+0x2d4>
    392e:	b8 2c       	mov	r11, r8
    3930:	a3 2c       	mov	r10, r3
    3932:	03 c0       	rjmp	.+6      	; 0x393a <vfprintf+0x2d6>
    3934:	b8 2c       	mov	r11, r8
    3936:	01 c0       	rjmp	.+2      	; 0x393a <vfprintf+0x2d6>
    3938:	b9 2c       	mov	r11, r9
    393a:	a4 fe       	sbrs	r10, 4
    393c:	0f c0       	rjmp	.+30     	; 0x395c <vfprintf+0x2f8>
    393e:	fe 01       	movw	r30, r28
    3940:	e8 0d       	add	r30, r8
    3942:	f1 1d       	adc	r31, r1
    3944:	80 81       	ld	r24, Z
    3946:	80 33       	cpi	r24, 0x30	; 48
    3948:	21 f4       	brne	.+8      	; 0x3952 <vfprintf+0x2ee>
    394a:	9a 2d       	mov	r25, r10
    394c:	99 7e       	andi	r25, 0xE9	; 233
    394e:	a9 2e       	mov	r10, r25
    3950:	09 c0       	rjmp	.+18     	; 0x3964 <vfprintf+0x300>
    3952:	a2 fe       	sbrs	r10, 2
    3954:	06 c0       	rjmp	.+12     	; 0x3962 <vfprintf+0x2fe>
    3956:	b3 94       	inc	r11
    3958:	b3 94       	inc	r11
    395a:	04 c0       	rjmp	.+8      	; 0x3964 <vfprintf+0x300>
    395c:	8a 2d       	mov	r24, r10
    395e:	86 78       	andi	r24, 0x86	; 134
    3960:	09 f0       	breq	.+2      	; 0x3964 <vfprintf+0x300>
    3962:	b3 94       	inc	r11
    3964:	a3 fc       	sbrc	r10, 3
    3966:	11 c0       	rjmp	.+34     	; 0x398a <vfprintf+0x326>
    3968:	a0 fe       	sbrs	r10, 0
    396a:	06 c0       	rjmp	.+12     	; 0x3978 <vfprintf+0x314>
    396c:	b2 14       	cp	r11, r2
    396e:	88 f4       	brcc	.+34     	; 0x3992 <vfprintf+0x32e>
    3970:	28 0c       	add	r2, r8
    3972:	92 2c       	mov	r9, r2
    3974:	9b 18       	sub	r9, r11
    3976:	0e c0       	rjmp	.+28     	; 0x3994 <vfprintf+0x330>
    3978:	b2 14       	cp	r11, r2
    397a:	60 f4       	brcc	.+24     	; 0x3994 <vfprintf+0x330>
    397c:	b6 01       	movw	r22, r12
    397e:	80 e2       	ldi	r24, 0x20	; 32
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <fputc>
    3986:	b3 94       	inc	r11
    3988:	f7 cf       	rjmp	.-18     	; 0x3978 <vfprintf+0x314>
    398a:	b2 14       	cp	r11, r2
    398c:	18 f4       	brcc	.+6      	; 0x3994 <vfprintf+0x330>
    398e:	2b 18       	sub	r2, r11
    3990:	02 c0       	rjmp	.+4      	; 0x3996 <vfprintf+0x332>
    3992:	98 2c       	mov	r9, r8
    3994:	21 2c       	mov	r2, r1
    3996:	a4 fe       	sbrs	r10, 4
    3998:	10 c0       	rjmp	.+32     	; 0x39ba <vfprintf+0x356>
    399a:	b6 01       	movw	r22, r12
    399c:	80 e3       	ldi	r24, 0x30	; 48
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <fputc>
    39a4:	a2 fe       	sbrs	r10, 2
    39a6:	17 c0       	rjmp	.+46     	; 0x39d6 <vfprintf+0x372>
    39a8:	a1 fc       	sbrc	r10, 1
    39aa:	03 c0       	rjmp	.+6      	; 0x39b2 <vfprintf+0x34e>
    39ac:	88 e7       	ldi	r24, 0x78	; 120
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	02 c0       	rjmp	.+4      	; 0x39b6 <vfprintf+0x352>
    39b2:	88 e5       	ldi	r24, 0x58	; 88
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	b6 01       	movw	r22, r12
    39b8:	0c c0       	rjmp	.+24     	; 0x39d2 <vfprintf+0x36e>
    39ba:	8a 2d       	mov	r24, r10
    39bc:	86 78       	andi	r24, 0x86	; 134
    39be:	59 f0       	breq	.+22     	; 0x39d6 <vfprintf+0x372>
    39c0:	a1 fe       	sbrs	r10, 1
    39c2:	02 c0       	rjmp	.+4      	; 0x39c8 <vfprintf+0x364>
    39c4:	8b e2       	ldi	r24, 0x2B	; 43
    39c6:	01 c0       	rjmp	.+2      	; 0x39ca <vfprintf+0x366>
    39c8:	80 e2       	ldi	r24, 0x20	; 32
    39ca:	a7 fc       	sbrc	r10, 7
    39cc:	8d e2       	ldi	r24, 0x2D	; 45
    39ce:	b6 01       	movw	r22, r12
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <fputc>
    39d6:	89 14       	cp	r8, r9
    39d8:	38 f4       	brcc	.+14     	; 0x39e8 <vfprintf+0x384>
    39da:	b6 01       	movw	r22, r12
    39dc:	80 e3       	ldi	r24, 0x30	; 48
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <fputc>
    39e4:	9a 94       	dec	r9
    39e6:	f7 cf       	rjmp	.-18     	; 0x39d6 <vfprintf+0x372>
    39e8:	8a 94       	dec	r8
    39ea:	f3 01       	movw	r30, r6
    39ec:	e8 0d       	add	r30, r8
    39ee:	f1 1d       	adc	r31, r1
    39f0:	80 81       	ld	r24, Z
    39f2:	b6 01       	movw	r22, r12
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <fputc>
    39fa:	81 10       	cpse	r8, r1
    39fc:	f5 cf       	rjmp	.-22     	; 0x39e8 <vfprintf+0x384>
    39fe:	22 20       	and	r2, r2
    3a00:	09 f4       	brne	.+2      	; 0x3a04 <vfprintf+0x3a0>
    3a02:	42 ce       	rjmp	.-892    	; 0x3688 <vfprintf+0x24>
    3a04:	b6 01       	movw	r22, r12
    3a06:	80 e2       	ldi	r24, 0x20	; 32
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <fputc>
    3a0e:	2a 94       	dec	r2
    3a10:	f6 cf       	rjmp	.-20     	; 0x39fe <vfprintf+0x39a>
    3a12:	f6 01       	movw	r30, r12
    3a14:	86 81       	ldd	r24, Z+6	; 0x06
    3a16:	97 81       	ldd	r25, Z+7	; 0x07
    3a18:	02 c0       	rjmp	.+4      	; 0x3a1e <vfprintf+0x3ba>
    3a1a:	8f ef       	ldi	r24, 0xFF	; 255
    3a1c:	9f ef       	ldi	r25, 0xFF	; 255
    3a1e:	2b 96       	adiw	r28, 0x0b	; 11
    3a20:	e2 e1       	ldi	r30, 0x12	; 18
    3a22:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__epilogue_restores__>

00003a26 <strnlen_P>:
    3a26:	fc 01       	movw	r30, r24
    3a28:	05 90       	lpm	r0, Z+
    3a2a:	61 50       	subi	r22, 0x01	; 1
    3a2c:	70 40       	sbci	r23, 0x00	; 0
    3a2e:	01 10       	cpse	r0, r1
    3a30:	d8 f7       	brcc	.-10     	; 0x3a28 <strnlen_P+0x2>
    3a32:	80 95       	com	r24
    3a34:	90 95       	com	r25
    3a36:	8e 0f       	add	r24, r30
    3a38:	9f 1f       	adc	r25, r31
    3a3a:	08 95       	ret

00003a3c <strnlen>:
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	61 50       	subi	r22, 0x01	; 1
    3a40:	70 40       	sbci	r23, 0x00	; 0
    3a42:	01 90       	ld	r0, Z+
    3a44:	01 10       	cpse	r0, r1
    3a46:	d8 f7       	brcc	.-10     	; 0x3a3e <strnlen+0x2>
    3a48:	80 95       	com	r24
    3a4a:	90 95       	com	r25
    3a4c:	8e 0f       	add	r24, r30
    3a4e:	9f 1f       	adc	r25, r31
    3a50:	08 95       	ret

00003a52 <fputc>:
    3a52:	0f 93       	push	r16
    3a54:	1f 93       	push	r17
    3a56:	cf 93       	push	r28
    3a58:	df 93       	push	r29
    3a5a:	fb 01       	movw	r30, r22
    3a5c:	23 81       	ldd	r18, Z+3	; 0x03
    3a5e:	21 fd       	sbrc	r18, 1
    3a60:	03 c0       	rjmp	.+6      	; 0x3a68 <fputc+0x16>
    3a62:	8f ef       	ldi	r24, 0xFF	; 255
    3a64:	9f ef       	ldi	r25, 0xFF	; 255
    3a66:	2c c0       	rjmp	.+88     	; 0x3ac0 <fputc+0x6e>
    3a68:	22 ff       	sbrs	r18, 2
    3a6a:	16 c0       	rjmp	.+44     	; 0x3a98 <fputc+0x46>
    3a6c:	46 81       	ldd	r20, Z+6	; 0x06
    3a6e:	57 81       	ldd	r21, Z+7	; 0x07
    3a70:	24 81       	ldd	r18, Z+4	; 0x04
    3a72:	35 81       	ldd	r19, Z+5	; 0x05
    3a74:	42 17       	cp	r20, r18
    3a76:	53 07       	cpc	r21, r19
    3a78:	44 f4       	brge	.+16     	; 0x3a8a <fputc+0x38>
    3a7a:	a0 81       	ld	r26, Z
    3a7c:	b1 81       	ldd	r27, Z+1	; 0x01
    3a7e:	9d 01       	movw	r18, r26
    3a80:	2f 5f       	subi	r18, 0xFF	; 255
    3a82:	3f 4f       	sbci	r19, 0xFF	; 255
    3a84:	31 83       	std	Z+1, r19	; 0x01
    3a86:	20 83       	st	Z, r18
    3a88:	8c 93       	st	X, r24
    3a8a:	26 81       	ldd	r18, Z+6	; 0x06
    3a8c:	37 81       	ldd	r19, Z+7	; 0x07
    3a8e:	2f 5f       	subi	r18, 0xFF	; 255
    3a90:	3f 4f       	sbci	r19, 0xFF	; 255
    3a92:	37 83       	std	Z+7, r19	; 0x07
    3a94:	26 83       	std	Z+6, r18	; 0x06
    3a96:	14 c0       	rjmp	.+40     	; 0x3ac0 <fputc+0x6e>
    3a98:	8b 01       	movw	r16, r22
    3a9a:	ec 01       	movw	r28, r24
    3a9c:	fb 01       	movw	r30, r22
    3a9e:	00 84       	ldd	r0, Z+8	; 0x08
    3aa0:	f1 85       	ldd	r31, Z+9	; 0x09
    3aa2:	e0 2d       	mov	r30, r0
    3aa4:	09 95       	icall
    3aa6:	89 2b       	or	r24, r25
    3aa8:	e1 f6       	brne	.-72     	; 0x3a62 <fputc+0x10>
    3aaa:	d8 01       	movw	r26, r16
    3aac:	16 96       	adiw	r26, 0x06	; 6
    3aae:	8d 91       	ld	r24, X+
    3ab0:	9c 91       	ld	r25, X
    3ab2:	17 97       	sbiw	r26, 0x07	; 7
    3ab4:	01 96       	adiw	r24, 0x01	; 1
    3ab6:	17 96       	adiw	r26, 0x07	; 7
    3ab8:	9c 93       	st	X, r25
    3aba:	8e 93       	st	-X, r24
    3abc:	16 97       	sbiw	r26, 0x06	; 6
    3abe:	ce 01       	movw	r24, r28
    3ac0:	df 91       	pop	r29
    3ac2:	cf 91       	pop	r28
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	08 95       	ret

00003aca <__ultoa_invert>:
    3aca:	fa 01       	movw	r30, r20
    3acc:	aa 27       	eor	r26, r26
    3ace:	28 30       	cpi	r18, 0x08	; 8
    3ad0:	51 f1       	breq	.+84     	; 0x3b26 <__ultoa_invert+0x5c>
    3ad2:	20 31       	cpi	r18, 0x10	; 16
    3ad4:	81 f1       	breq	.+96     	; 0x3b36 <__ultoa_invert+0x6c>
    3ad6:	e8 94       	clt
    3ad8:	6f 93       	push	r22
    3ada:	6e 7f       	andi	r22, 0xFE	; 254
    3adc:	6e 5f       	subi	r22, 0xFE	; 254
    3ade:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae4:	af 4f       	sbci	r26, 0xFF	; 255
    3ae6:	b1 e0       	ldi	r27, 0x01	; 1
    3ae8:	3e d0       	rcall	.+124    	; 0x3b66 <__ultoa_invert+0x9c>
    3aea:	b4 e0       	ldi	r27, 0x04	; 4
    3aec:	3c d0       	rcall	.+120    	; 0x3b66 <__ultoa_invert+0x9c>
    3aee:	67 0f       	add	r22, r23
    3af0:	78 1f       	adc	r23, r24
    3af2:	89 1f       	adc	r24, r25
    3af4:	9a 1f       	adc	r25, r26
    3af6:	a1 1d       	adc	r26, r1
    3af8:	68 0f       	add	r22, r24
    3afa:	79 1f       	adc	r23, r25
    3afc:	8a 1f       	adc	r24, r26
    3afe:	91 1d       	adc	r25, r1
    3b00:	a1 1d       	adc	r26, r1
    3b02:	6a 0f       	add	r22, r26
    3b04:	71 1d       	adc	r23, r1
    3b06:	81 1d       	adc	r24, r1
    3b08:	91 1d       	adc	r25, r1
    3b0a:	a1 1d       	adc	r26, r1
    3b0c:	20 d0       	rcall	.+64     	; 0x3b4e <__ultoa_invert+0x84>
    3b0e:	09 f4       	brne	.+2      	; 0x3b12 <__ultoa_invert+0x48>
    3b10:	68 94       	set
    3b12:	3f 91       	pop	r19
    3b14:	2a e0       	ldi	r18, 0x0A	; 10
    3b16:	26 9f       	mul	r18, r22
    3b18:	11 24       	eor	r1, r1
    3b1a:	30 19       	sub	r19, r0
    3b1c:	30 5d       	subi	r19, 0xD0	; 208
    3b1e:	31 93       	st	Z+, r19
    3b20:	de f6       	brtc	.-74     	; 0x3ad8 <__ultoa_invert+0xe>
    3b22:	cf 01       	movw	r24, r30
    3b24:	08 95       	ret
    3b26:	46 2f       	mov	r20, r22
    3b28:	47 70       	andi	r20, 0x07	; 7
    3b2a:	40 5d       	subi	r20, 0xD0	; 208
    3b2c:	41 93       	st	Z+, r20
    3b2e:	b3 e0       	ldi	r27, 0x03	; 3
    3b30:	0f d0       	rcall	.+30     	; 0x3b50 <__ultoa_invert+0x86>
    3b32:	c9 f7       	brne	.-14     	; 0x3b26 <__ultoa_invert+0x5c>
    3b34:	f6 cf       	rjmp	.-20     	; 0x3b22 <__ultoa_invert+0x58>
    3b36:	46 2f       	mov	r20, r22
    3b38:	4f 70       	andi	r20, 0x0F	; 15
    3b3a:	40 5d       	subi	r20, 0xD0	; 208
    3b3c:	4a 33       	cpi	r20, 0x3A	; 58
    3b3e:	18 f0       	brcs	.+6      	; 0x3b46 <__ultoa_invert+0x7c>
    3b40:	49 5d       	subi	r20, 0xD9	; 217
    3b42:	31 fd       	sbrc	r19, 1
    3b44:	40 52       	subi	r20, 0x20	; 32
    3b46:	41 93       	st	Z+, r20
    3b48:	02 d0       	rcall	.+4      	; 0x3b4e <__ultoa_invert+0x84>
    3b4a:	a9 f7       	brne	.-22     	; 0x3b36 <__ultoa_invert+0x6c>
    3b4c:	ea cf       	rjmp	.-44     	; 0x3b22 <__ultoa_invert+0x58>
    3b4e:	b4 e0       	ldi	r27, 0x04	; 4
    3b50:	a6 95       	lsr	r26
    3b52:	97 95       	ror	r25
    3b54:	87 95       	ror	r24
    3b56:	77 95       	ror	r23
    3b58:	67 95       	ror	r22
    3b5a:	ba 95       	dec	r27
    3b5c:	c9 f7       	brne	.-14     	; 0x3b50 <__ultoa_invert+0x86>
    3b5e:	00 97       	sbiw	r24, 0x00	; 0
    3b60:	61 05       	cpc	r22, r1
    3b62:	71 05       	cpc	r23, r1
    3b64:	08 95       	ret
    3b66:	9b 01       	movw	r18, r22
    3b68:	ac 01       	movw	r20, r24
    3b6a:	0a 2e       	mov	r0, r26
    3b6c:	06 94       	lsr	r0
    3b6e:	57 95       	ror	r21
    3b70:	47 95       	ror	r20
    3b72:	37 95       	ror	r19
    3b74:	27 95       	ror	r18
    3b76:	ba 95       	dec	r27
    3b78:	c9 f7       	brne	.-14     	; 0x3b6c <__ultoa_invert+0xa2>
    3b7a:	62 0f       	add	r22, r18
    3b7c:	73 1f       	adc	r23, r19
    3b7e:	84 1f       	adc	r24, r20
    3b80:	95 1f       	adc	r25, r21
    3b82:	a0 1d       	adc	r26, r0
    3b84:	08 95       	ret

00003b86 <__prologue_saves__>:
    3b86:	2f 92       	push	r2
    3b88:	3f 92       	push	r3
    3b8a:	4f 92       	push	r4
    3b8c:	5f 92       	push	r5
    3b8e:	6f 92       	push	r6
    3b90:	7f 92       	push	r7
    3b92:	8f 92       	push	r8
    3b94:	9f 92       	push	r9
    3b96:	af 92       	push	r10
    3b98:	bf 92       	push	r11
    3b9a:	cf 92       	push	r12
    3b9c:	df 92       	push	r13
    3b9e:	ef 92       	push	r14
    3ba0:	ff 92       	push	r15
    3ba2:	0f 93       	push	r16
    3ba4:	1f 93       	push	r17
    3ba6:	cf 93       	push	r28
    3ba8:	df 93       	push	r29
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	ca 1b       	sub	r28, r26
    3bb0:	db 0b       	sbc	r29, r27
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	f8 94       	cli
    3bb6:	de bf       	out	0x3e, r29	; 62
    3bb8:	0f be       	out	0x3f, r0	; 63
    3bba:	cd bf       	out	0x3d, r28	; 61
    3bbc:	09 94       	ijmp

00003bbe <__epilogue_restores__>:
    3bbe:	2a 88       	ldd	r2, Y+18	; 0x12
    3bc0:	39 88       	ldd	r3, Y+17	; 0x11
    3bc2:	48 88       	ldd	r4, Y+16	; 0x10
    3bc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bca:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bce:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bd0:	b9 84       	ldd	r11, Y+9	; 0x09
    3bd2:	c8 84       	ldd	r12, Y+8	; 0x08
    3bd4:	df 80       	ldd	r13, Y+7	; 0x07
    3bd6:	ee 80       	ldd	r14, Y+6	; 0x06
    3bd8:	fd 80       	ldd	r15, Y+5	; 0x05
    3bda:	0c 81       	ldd	r16, Y+4	; 0x04
    3bdc:	1b 81       	ldd	r17, Y+3	; 0x03
    3bde:	aa 81       	ldd	r26, Y+2	; 0x02
    3be0:	b9 81       	ldd	r27, Y+1	; 0x01
    3be2:	ce 0f       	add	r28, r30
    3be4:	d1 1d       	adc	r29, r1
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	de bf       	out	0x3e, r29	; 62
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	cd bf       	out	0x3d, r28	; 61
    3bf0:	ed 01       	movw	r28, r26
    3bf2:	08 95       	ret

00003bf4 <_exit>:
    3bf4:	f8 94       	cli

00003bf6 <__stop_program>:
    3bf6:	ff cf       	rjmp	.-2      	; 0x3bf6 <__stop_program>
