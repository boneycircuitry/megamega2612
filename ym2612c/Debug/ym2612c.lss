
ym2612c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000394  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e26  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073f  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051f  00000000  00000000  00001a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000466  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002886  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 c8 01 	jmp	0x390	; 0x390 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ymWrite>:
		//
    }
}

void ymWrite(uint8_t data){
	YM_CTRL_PORT &= ~(1<<CS);
  90:	98 b1       	in	r25, 0x08	; 8
  92:	9e 7f       	andi	r25, 0xFE	; 254
  94:	98 b9       	out	0x08, r25	; 8
	YM_DATA_PORT = data;
  96:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	85 e0       	ldi	r24, 0x05	; 5
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <ymWrite+0xa>
  9e:	00 00       	nop
	_delay_us(1);	
	YM_CTRL_PORT &= ~(1<<WR);
  a0:	88 b1       	in	r24, 0x08	; 8
  a2:	8d 7f       	andi	r24, 0xFD	; 253
  a4:	88 b9       	out	0x08, r24	; 8
  a6:	8a e1       	ldi	r24, 0x1A	; 26
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <ymWrite+0x18>
  ac:	00 c0       	rjmp	.+0      	; 0xae <ymWrite+0x1e>
	//YM_CTRL_PORT |= (1<<RD); // ???
	_delay_us(5);
	YM_CTRL_PORT |= (1<<WR);
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	88 b9       	out	0x08, r24	; 8
  b4:	8a e1       	ldi	r24, 0x1A	; 26
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <ymWrite+0x26>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <ymWrite+0x2c>
	//YM_CTRL_PORT &= ~(1<<RD); // ????
	_delay_us(5);
	YM_CTRL_PORT |= (1<<CS);
  bc:	88 b1       	in	r24, 0x08	; 8
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	88 b9       	out	0x08, r24	; 8
  c2:	08 95       	ret

000000c4 <setreg123>:
	
	sei();
}

// chan 1-3: A0:A1 = 0:0 for reg select, 1:0 for data write
void setreg123(uint8_t reg, uint8_t data){
  c4:	cf 93       	push	r28
  c6:	c6 2f       	mov	r28, r22
	YM_CTRL_PORT &= ~(1<<A0); // channels 1-3
  c8:	98 b1       	in	r25, 0x08	; 8
  ca:	97 7f       	andi	r25, 0xF7	; 247
  cc:	98 b9       	out	0x08, r25	; 8
	ymWrite(reg);
  ce:	0e 94 48 00 	call	0x90	; 0x90 <ymWrite>
	YM_CTRL_PORT |= (1<<A0);
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	88 b9       	out	0x08, r24	; 8
	ymWrite(data);
  d8:	8c 2f       	mov	r24, r28
  da:	0e 94 48 00 	call	0x90	; 0x90 <ymWrite>
	YM_CTRL_PORT &= ~(1<<A0);
  de:	88 b1       	in	r24, 0x08	; 8
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	88 b9       	out	0x08, r24	; 8
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <main>:
ISR(SPI_STC_vect);

int main(void){		
	// DDR setup
	
	SPI_DDR |= (1<<CLK) | (1<<MISO) | (1<<IC);
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	83 61       	ori	r24, 0x13	; 19
  ec:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~((1<<SS) | (1<<MOSI) | (1<<SCK));
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	83 7d       	andi	r24, 0xD3	; 211
  f2:	84 b9       	out	0x04, r24	; 4
	
	YM_CTRL_DDR |= (1<<A1) | (1<<A0) | (1<<RD) | (1<<WR) | (1<<CS);// | (1<<IC);
  f4:	87 b1       	in	r24, 0x07	; 7
  f6:	8f 61       	ori	r24, 0x1F	; 31
  f8:	87 b9       	out	0x07, r24	; 7
	
	YM_DATA_DDR = 0xFF;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	8a b9       	out	0x0a, r24	; 10
	
	// initialize SPI
	SPCR = (1<<SPIE) | (1<<SPE);
  fe:	80 ec       	ldi	r24, 0xC0	; 192
 100:	8c bd       	out	0x2c, r24	; 44
	
	// initialize timer1
	TCCR1A = (1<<COM1A0);
 102:	80 e4       	ldi	r24, 0x40	; 64
 104:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS10) | (1<<WGM12);
 108:	89 e0       	ldi	r24, 0x09	; 9
 10a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCCR1C = 0;
 10e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
	OCR1A = 0;
 112:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 116:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	TCNT1 = 0;
 11a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 11e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	// initialize global vars
	glb.inCnt = 0;
 122:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
		
	// initial YM ctrl pins
	YM_IC_PORT |= (1<<IC);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	85 b9       	out	0x05, r24	; 5
	YM_CTRL_PORT |= (1<<RD) | (1<<WR) | (1<<CS) | (1<<IC) | (0<<A0) | (0<<A1);
 12c:	88 b1       	in	r24, 0x08	; 8
 12e:	87 60       	ori	r24, 0x07	; 7
 130:	88 b9       	out	0x08, r24	; 8
	//YM_CTRL_PORT &= ~((1<<A0) | (1<<A1));
	
	// strobe IC to reset YM
	YM_IC_PORT &= ~(1<<IC);
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	8f e3       	ldi	r24, 0x3F	; 63
 13a:	9c e9       	ldi	r25, 0x9C	; 156
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x54>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x5a>
 142:	00 00       	nop
	_delay_ms(10);
	YM_IC_PORT |= (1<<IC);
 144:	85 b1       	in	r24, 0x05	; 5
 146:	81 60       	ori	r24, 0x01	; 1
 148:	85 b9       	out	0x05, r24	; 5
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9c e9       	ldi	r25, 0x9C	; 156
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x66>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x6c>
 154:	00 00       	nop
	_delay_ms(10);
	
	setreg123(0x22, 0x00); // LFO off
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	82 e2       	ldi	r24, 0x22	; 34
 15a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x27, 0x00); // Note off (channel 0)
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	87 e2       	ldi	r24, 0x27	; 39
 162:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x28, 0x01); // Note off (channel 1)
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	88 e2       	ldi	r24, 0x28	; 40
 16a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x28, 0x02); // Note off (channel 2)
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	88 e2       	ldi	r24, 0x28	; 40
 172:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x28, 0x04); // Note off (channel 3)
 176:	64 e0       	ldi	r22, 0x04	; 4
 178:	88 e2       	ldi	r24, 0x28	; 40
 17a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x28, 0x05); // Note off (channel 4)
 17e:	65 e0       	ldi	r22, 0x05	; 5
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x28, 0x06); // Note off (channel 5)
 186:	66 e0       	ldi	r22, 0x06	; 6
 188:	88 e2       	ldi	r24, 0x28	; 40
 18a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x2B, 0x00); // DAC off
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	8b e2       	ldi	r24, 0x2B	; 43
 192:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x30, 0x71); //
 196:	61 e7       	ldi	r22, 0x71	; 113
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x34, 0x0D); //
 19e:	6d e0       	ldi	r22, 0x0D	; 13
 1a0:	84 e3       	ldi	r24, 0x34	; 52
 1a2:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x38, 0x33); //
 1a6:	63 e3       	ldi	r22, 0x33	; 51
 1a8:	88 e3       	ldi	r24, 0x38	; 56
 1aa:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x3C, 0x01); // DT1/MUL
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	8c e3       	ldi	r24, 0x3C	; 60
 1b2:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x40, 0x23); //
 1b6:	63 e2       	ldi	r22, 0x23	; 35
 1b8:	80 e4       	ldi	r24, 0x40	; 64
 1ba:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x44, 0x2D); //
 1be:	6d e2       	ldi	r22, 0x2D	; 45
 1c0:	84 e4       	ldi	r24, 0x44	; 68
 1c2:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x48, 0x26); //
 1c6:	66 e2       	ldi	r22, 0x26	; 38
 1c8:	88 e4       	ldi	r24, 0x48	; 72
 1ca:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x4C, 0x00); // Total level
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	8c e4       	ldi	r24, 0x4C	; 76
 1d2:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x50, 0x5F); //
 1d6:	6f e5       	ldi	r22, 0x5F	; 95
 1d8:	80 e5       	ldi	r24, 0x50	; 80
 1da:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x54, 0x99); //
 1de:	69 e9       	ldi	r22, 0x99	; 153
 1e0:	84 e5       	ldi	r24, 0x54	; 84
 1e2:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x58, 0x5F); //
 1e6:	6f e5       	ldi	r22, 0x5F	; 95
 1e8:	88 e5       	ldi	r24, 0x58	; 88
 1ea:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x5C, 0x94); // RS/AR
 1ee:	64 e9       	ldi	r22, 0x94	; 148
 1f0:	8c e5       	ldi	r24, 0x5C	; 92
 1f2:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x60, 0x05); //
 1f6:	65 e0       	ldi	r22, 0x05	; 5
 1f8:	80 e6       	ldi	r24, 0x60	; 96
 1fa:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x64, 0x05); //
 1fe:	65 e0       	ldi	r22, 0x05	; 5
 200:	84 e6       	ldi	r24, 0x64	; 100
 202:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x68, 0x05); //
 206:	65 e0       	ldi	r22, 0x05	; 5
 208:	88 e6       	ldi	r24, 0x68	; 104
 20a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x6C, 0x07); // AM/D1R
 20e:	67 e0       	ldi	r22, 0x07	; 7
 210:	8c e6       	ldi	r24, 0x6C	; 108
 212:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x70, 0x02); //
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	80 e7       	ldi	r24, 0x70	; 112
 21a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x74, 0x02); //
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	84 e7       	ldi	r24, 0x74	; 116
 222:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x78, 0x02); //
 226:	62 e0       	ldi	r22, 0x02	; 2
 228:	88 e7       	ldi	r24, 0x78	; 120
 22a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x7C, 0x02); // D2R
 22e:	62 e0       	ldi	r22, 0x02	; 2
 230:	8c e7       	ldi	r24, 0x7C	; 124
 232:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x80, 0x11); //
 236:	61 e1       	ldi	r22, 0x11	; 17
 238:	80 e8       	ldi	r24, 0x80	; 128
 23a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x84, 0x11); //
 23e:	61 e1       	ldi	r22, 0x11	; 17
 240:	84 e8       	ldi	r24, 0x84	; 132
 242:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x88, 0x11); //
 246:	61 e1       	ldi	r22, 0x11	; 17
 248:	88 e8       	ldi	r24, 0x88	; 136
 24a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x8C, 0xA6); // D1L/RR
 24e:	66 ea       	ldi	r22, 0xA6	; 166
 250:	8c e8       	ldi	r24, 0x8C	; 140
 252:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x90, 0x00); //
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	80 e9       	ldi	r24, 0x90	; 144
 25a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x94, 0x00); //
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	84 e9       	ldi	r24, 0x94	; 148
 262:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x98, 0x00); //
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	88 e9       	ldi	r24, 0x98	; 152
 26a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x9C, 0x00); // SSGEG
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	8c e9       	ldi	r24, 0x9C	; 156
 272:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0xB0, 0x32); // Feedback/algorithm
 276:	62 e3       	ldi	r22, 0x32	; 50
 278:	80 eb       	ldi	r24, 0xB0	; 176
 27a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0xB4, 0xC0); // Both speakers on
 27e:	60 ec       	ldi	r22, 0xC0	; 192
 280:	84 eb       	ldi	r24, 0xB4	; 180
 282:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0x28, 0x00); // Key off
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	88 e2       	ldi	r24, 0x28	; 40
 28a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0xA4, 0x22); //
 28e:	62 e2       	ldi	r22, 0x22	; 34
 290:	84 ea       	ldi	r24, 0xA4	; 164
 292:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	setreg123(0xA0, 0x69); // Set frequency
 296:	69 e6       	ldi	r22, 0x69	; 105
 298:	80 ea       	ldi	r24, 0xA0	; 160
 29a:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
	
	sei();
 29e:	78 94       	sei
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <main+0x1b8>

000002a2 <setreg456>:
	ymWrite(data);
	YM_CTRL_PORT &= ~(1<<A0);
}

// chan 4-6: A0:A1 = 0:1 for reg select, 1:1 for data write
void setreg456(uint8_t reg, uint8_t data){
 2a2:	cf 93       	push	r28
 2a4:	c6 2f       	mov	r28, r22
	YM_CTRL_PORT |= (1<<A1); // channels 4-6
 2a6:	98 b1       	in	r25, 0x08	; 8
 2a8:	90 61       	ori	r25, 0x10	; 16
 2aa:	98 b9       	out	0x08, r25	; 8
	ymWrite(reg);
 2ac:	0e 94 48 00 	call	0x90	; 0x90 <ymWrite>
	YM_CTRL_PORT |= (1<<A0); 
 2b0:	88 b1       	in	r24, 0x08	; 8
 2b2:	88 60       	ori	r24, 0x08	; 8
 2b4:	88 b9       	out	0x08, r24	; 8
	ymWrite(data);
 2b6:	8c 2f       	mov	r24, r28
 2b8:	0e 94 48 00 	call	0x90	; 0x90 <ymWrite>
	YM_CTRL_PORT &= ~((1<<A0) | (1<<A1));
 2bc:	88 b1       	in	r24, 0x08	; 8
 2be:	87 7e       	andi	r24, 0xE7	; 231
 2c0:	88 b9       	out	0x08, r24	; 8
}
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <setreg>:
	YM_CTRL_PORT |= (1<<CS);
	
	// TODO: maybe play with setting RD
}

void setreg(uint8_t reg, uint8_t data, uint8_t chan){
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	c8 2f       	mov	r28, r24
 2cc:	d6 2f       	mov	r29, r22
	cli();
 2ce:	f8 94       	cli
	
	switch(chan){
 2d0:	44 23       	and	r20, r20
 2d2:	19 f0       	breq	.+6      	; 0x2da <setreg+0x14>
 2d4:	41 30       	cpi	r20, 0x01	; 1
 2d6:	21 f0       	breq	.+8      	; 0x2e0 <setreg+0x1a>
 2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <setreg+0x20>
		case 0:
			setreg123(reg, data);
 2da:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
			break;
 2de:	09 c0       	rjmp	.+18     	; 0x2f2 <setreg+0x2c>
		case 1:
			setreg456(reg, data);
 2e0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <setreg456>
			break;
 2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <setreg+0x2c>
		default:
			setreg123(reg, data);
 2e6:	0e 94 62 00 	call	0xc4	; 0xc4 <setreg123>
			setreg456(reg, data);
 2ea:	6d 2f       	mov	r22, r29
 2ec:	8c 2f       	mov	r24, r28
 2ee:	0e 94 51 01 	call	0x2a2	; 0x2a2 <setreg456>
			break;
	}
	
	sei();
 2f2:	78 94       	sei
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <__vector_17>:
	ymWrite(data);
	YM_CTRL_PORT &= ~((1<<A0) | (1<<A1));
}


ISR(SPI_STC_vect){
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
	glb.sreg = SREG;
 31c:	8f b7       	in	r24, 0x3f	; 63
 31e:	e0 e0       	ldi	r30, 0x00	; 0
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	80 83       	st	Z, r24
	cli();
 324:	f8 94       	cli
	
	switch(glb.inCnt){
 326:	84 81       	ldd	r24, Z+4	; 0x04
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	41 f0       	breq	.+16     	; 0x33c <__vector_17+0x42>
 32c:	18 f0       	brcs	.+6      	; 0x334 <__vector_17+0x3a>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	49 f0       	breq	.+18     	; 0x344 <__vector_17+0x4a>
 332:	10 c0       	rjmp	.+32     	; 0x354 <__vector_17+0x5a>
		case 0: // first value written determines which channels will be written to
			glb.writeFlag = SPDR;
 334:	8e b5       	in	r24, 0x2e	; 46
 336:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			break;
 33a:	0c c0       	rjmp	.+24     	; 0x354 <__vector_17+0x5a>
		case 1: // next value is the register
			glb.YM_reg = SPDR;
 33c:	8e b5       	in	r24, 0x2e	; 46
 33e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
 342:	08 c0       	rjmp	.+16     	; 0x354 <__vector_17+0x5a>
		case 2: // last is the data to write
			glb.YM_data = SPDR;
 344:	6e b5       	in	r22, 0x2e	; 46
 346:	e0 e0       	ldi	r30, 0x00	; 0
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	62 83       	std	Z+2, r22	; 0x02
			setreg(glb.YM_reg,glb.YM_data,glb.writeFlag);
 34c:	43 81       	ldd	r20, Z+3	; 0x03
 34e:	81 81       	ldd	r24, Z+1	; 0x01
 350:	0e 94 63 01 	call	0x2c6	; 0x2c6 <setreg>
			break;
	}
	
	++glb.inCnt;
 354:	e0 e0       	ldi	r30, 0x00	; 0
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	84 81       	ldd	r24, Z+4	; 0x04
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	84 83       	std	Z+4, r24	; 0x04
	
	if(glb.inCnt > 2) glb.inCnt = 0;
 35e:	83 30       	cpi	r24, 0x03	; 3
 360:	10 f0       	brcs	.+4      	; 0x366 <__vector_17+0x6c>
 362:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
	
	SPDR = 0; //glb.inCnt + (glb.writeFlag<<4);
 366:	1e bc       	out	0x2e, r1	; 46
	SREG = glb.sreg;
 368:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 36c:	8f bf       	out	0x3f, r24	; 63
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	5f 91       	pop	r21
 380:	4f 91       	pop	r20
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
